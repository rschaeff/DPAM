{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"sid",
				"sidechain_outliers"
			],
			[
				"structu",
				"structureData"
			],
			[
				"use",
				"useCombinedClusterData"
			]
		]
	},
	"buffers":
	[
		{
			"file": "grid/manager.py",
			"settings":
			{
				"buffer_size": 17532,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			},
			"undo_stack":
			[
				[
					3,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAABgAAAAAAAAAGQAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAGAAAAAAAAAAYAAAAAAAAAAAAAAAAAPC/"
				],
				[
					5,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAABgAAAAAAAAAGQAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAGAAAAAAAAAAYAAAAAAAAAAAAAAAAAAAA"
				],
				[
					6,
					1,
					"paste",
					null,
					"AQAAABkAAAAAAAAA1gAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAGQAAAAAAAAAZAAAAAAAAAAAAAAAAAPC/"
				],
				[
					9,
					1,
					"paste",
					null,
					"AgAAAAAAAAAAAAAABgEAAAAAAAAAAAAABgEAAAAAAAAGAQAAAAAAABgAAAAjIyBkcGFtL2dyaWQvbWFuYWdlci5weQo",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAGAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				],
				[
					12,
					4,
					"left_delete",
					null,
					"BAAAAAMAAAAAAAAAAwAAAAAAAAABAAAAeQIAAAAAAAAAAgAAAAAAAAABAAAAcAEAAAAAAAAAAQAAAAAAAAABAAAAbwAAAAAAAAAAAAAAAAAAAAABAAAAQw",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAABAAAAAAAAAAEAAAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "batch/supplement.py",
			"settings":
			{
				"buffer_size": 7464,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			},
			"undo_stack":
			[
				[
					3,
					1,
					"paste",
					null,
					"AgAAAAAAAAAAAAAAKAIAAAAAAAAAAAAAKAIAAAAAAAAoAgAAAAAAABwAAAAjIyBkcGFtL2JhdGNoL3N1cHBsZW1lbnQucHkK",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAHAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				],
				[
					4,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAACgCAAAAAAAAKQIAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAKAIAAAAAAAAoAgAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"contents": "#!/usr/bin/env python3\n\"\"\"\nAPI routes and handlers for DPAM pipeline.\n\nThis module defines the routes and handlers for the DPAM REST API.\n\"\"\"\n\nimport os\nimport logging\nimport json\nimport tempfile\nimport shutil\nfrom typing import Dict, List, Any, Optional, Union, Set\nfrom enum import Enum\nfrom datetime import datetime\n\nfrom fastapi import APIRouter, Depends, HTTPException, BackgroundTasks, File, UploadFile, Query, Path, Body, Request\nfrom fastapi.responses import JSONResponse, FileResponse\nfrom pydantic import BaseModel, Field, validator\n\n# Configure logging\nlogger = logging.getLogger(\"dpam.api.routes\")\n\n# Define API models\nclass BatchStatus(str, Enum):\n    \"\"\"\n    Possible batch statuses\n\n    Status flow:\n    INITIALIZED -> PREPARING -> READY_FOR_DOWNLOAD -> DOWNLOADING -> \n    DOWNLOADING_PAE -> READY_FOR_PROCESSING -> PIPELINE_READY -> \n    PIPELINE_RUNNING -> PIPELINE_COMPLETED\n    \n    Error paths:\n    PIPELINE_RUNNING -> PIPELINE_FAILED -> PIPELINE_RECOVERING -> PIPELINE_RUNNING\n    PIPELINE_RUNNING -> PIPELINE_COMPLETED_WITH_FAILURES\n\n    \"\"\"\n    INITIALIZED = \"INITIALIZED\"\n    PREPARING = \"PREPARING\"\n    READY_FOR_DOWNLOAD = \"READY_FOR_DOWNLOAD\"\n    DOWNLOADING = \"DOWNLOADING\"\n    DOWNLOADING_PAE = \"DOWNLOADING_PAE\"\n    READY_FOR_PROCESSING = \"READY_FOR_PROCESSING\"\n    PIPELINE_READY = \"PIPELINE_READY\"\n    PIPELINE_RUNNING = \"PIPELINE_RUNNING\"\n    PIPELINE_COMPLETED = \"PIPELINE_COMPLETED\"\n    PIPELINE_FAILED = \"PIPELINE_FAILED\"\n    PIPELINE_RECOVERING = \"PIPELINE_RECOVERING\"\n    PIPELINE_COMPLETED_WITH_FAILURES = \"PIPELINE_COMPLETED_WITH_FAILURES\"\n    COMPLETED = \"COMPLETED\"\n\nclass BatchCreate(BaseModel):\n    \"\"\"Model for batch creation\"\"\"\n    name: str\n    description: Optional[str] = None\n    accessions: List[str]\n\nclass BatchResponse(BaseModel):\n    \"\"\"Model for batch response\"\"\"\n    batch_id: int\n    name: str\n    description: Optional[str] = None\n    status: str\n    created_at: datetime\n    completed_at: Optional[datetime] = None\n    structure_count: int\n    \n    class Config:\n        orm_mode = True\n\nclass StructureResponse(BaseModel):\n    \"\"\"Model for structure response\"\"\"\n    structure_id: int\n    pdb_id: str\n    processing_status: str\n    \n    class Config:\n        orm_mode = True\n\nclass DomainResponse(BaseModel):\n    \"\"\"Model for domain response\"\"\"\n    domain_id: str\n    start: int\n    end: int\n    size: int\n    confidence_level: str\n    ecod_mapping: Optional[Dict[str, Any]] = None\n    \n    class Config:\n        orm_mode = True\n\nclass PipelineStart(BaseModel):\n    \"\"\"Model for pipeline start request\"\"\"\n    step: Optional[str] = None\n    restart: bool = False\n\nclass PipelineResponse(BaseModel):\n    \"\"\"Model for pipeline response\"\"\"\n    status: str\n    current_step: Optional[str] = None\n    progress_percent: float\n    \n    class Config:\n        orm_mode = True\n\ndef is_completed_status(status: str) -> bool:\n    \"\"\"Check if a status indicates completion\"\"\"\n    return status in (\n        BatchStatus.PIPELINE_COMPLETED.value,\n        BatchStatus.PIPELINE_COMPLETED_WITH_FAILURES.value,\n        BatchStatus.COMPLETED.value  # If this is a legitimate status\n    )\n\ndef setup_routes(app):\n    \"\"\"\n    Set up API routes\n    \n    Args:\n        app: FastAPI application\n    \"\"\"\n    router = APIRouter(prefix=\"/api/v1\")\n    \n    # Dependency to get controllers\n    def get_controllers(request: Request):\n        \"\"\"Get controllers from app state\"\"\"\n        return {\n            \"pipeline_controller\": request.app.state.pipeline_controller,\n            \"batch_manager\": request.app.state.batch_manager,\n            \"batch_preparation\": request.app.state.batch_preparation,\n            \"db_manager\": request.app.state.db_manager\n        }\n    \n    # Health check endpoint\n    @router.get(\"/health\", tags=[\"System\"])\n    async def health_check():\n        \"\"\"Check API health\"\"\"\n        return {\"status\": \"healthy\", \"timestamp\": datetime.now().isoformat()}\n    \n    # Batch endpoints\n    @router.post(\"/batches\", response_model=BatchResponse, tags=[\"Batches\"])\n    async def create_batch(\n        batch_data: BatchCreate,\n        controllers: Dict[str, Any] = Depends(get_controllers)\n    ):\n        \"\"\"Create a new batch from accessions\"\"\"\n        try:\n            batch_id = controllers[\"batch_manager\"].create_batch_from_accessions(\n                batch_data.accessions,\n                batch_name=batch_data.name,\n                description=batch_data.description\n            )\n            \n            # Get batch details\n            batch = controllers[\"db_manager\"].fetchone(\n                \"\"\"\n                SELECT b.batch_id, b.name, b.description, b.status, b.created_at, b.completed_at,\n                       COUNT(bi.batch_item_id) as structure_count\n                FROM batches b\n                LEFT JOIN batch_items bi ON b.batch_id = bi.batch_id\n                WHERE b.batch_id = %s\n                GROUP BY b.batch_id\n                \"\"\",\n                (batch_id,)\n            )\n            \n            return batch\n            \n        except Exception as e:\n            logger.error(f\"Error creating batch: {e}\")\n            raise HTTPException(status_code=500, detail=str(e))\n    \n    @router.get(\"/batches\", tags=[\"Batches\"])\n    async def list_batches(\n        status: Optional[str] = None,\n        limit: int = 20,\n        offset: int = 0,\n        controllers: Dict[str, Any] = Depends(get_controllers)\n    ):\n        \"\"\"List all batches\"\"\"\n        try:\n            # Build query\n            query = \"\"\"\n                SELECT b.batch_id, b.name, b.status, b.created_at, b.completed_at,\n                       COUNT(bi.batch_item_id) as structure_count\n                FROM batches b\n                LEFT JOIN batch_items bi ON b.batch_id = bi.batch_id\n            \"\"\"\n            params = []\n            \n            # Add status filter if specified\n            if status:\n                query += \" WHERE b.status = %s\"\n                params.append(status)\n            \n            # Add group by, order by, and pagination\n            query += \"\"\"\n                GROUP BY b.batch_id, b.name, b.status, b.created_at, b.completed_at\n                ORDER BY b.created_at DESC\n                LIMIT %s OFFSET %s\n            \"\"\"\n            params.extend([limit, offset])\n            \n            # Execute query\n            batches = controllers[\"db_manager\"].fetchall(query, tuple(params))\n            \n            # Get total count\n            count_query = \"SELECT COUNT(*) as total FROM batches\"\n            if status:\n                count_query += \" WHERE status = %s\"\n                count_params = (status,)\n            else:\n                count_params = ()\n                \n            count_result = controllers[\"db_manager\"].fetchone(count_query, count_params)\n            total = count_result['total'] if count_result else 0\n            \n            return {\n                \"batches\": batches,\n                \"total\": total,\n                \"limit\": limit,\n                \"offset\": offset\n            }\n            \n        except Exception as e:\n            logger.error(f\"Error listing batches: {e}\")\n            raise HTTPException(status_code=500, detail=str(e))\n    \n    @router.get(\"/batches/{batch_id}\", response_model=BatchResponse, tags=[\"Batches\"])\n    async def get_batch(\n        batch_id: int = Path(..., description=\"Batch ID\"),\n        controllers: Dict[str, Any] = Depends(get_controllers)\n    ):\n        \"\"\"Get batch details\"\"\"\n        try:\n            batch = controllers[\"db_manager\"].fetchone(\n                \"\"\"\n                SELECT b.batch_id, b.name, b.description, b.status, b.created_at, b.completed_at,\n                       COUNT(bi.batch_item_id) as structure_count\n                FROM batches b\n                LEFT JOIN batch_items bi ON b.batch_id = bi.batch_id\n                WHERE b.batch_id = %s\n                GROUP BY b.batch_id\n                \"\"\",\n                (batch_id,)\n            )\n            \n            if not batch:\n                raise HTTPException(status_code=404, detail=f\"Batch {batch_id} not found\")\n                \n            return batch\n            \n        except HTTPException:\n            raise\n        except Exception as e:\n            logger.error(f\"Error getting batch {batch_id}: {e}\")\n            raise HTTPException(status_code=500, detail=str(e))\n    \n    @router.post(\"/batches/{batch_id}/prepare\", tags=[\"Batches\"])\n    async def prepare_batch(\n        batch_id: int = Path(..., description=\"Batch ID\"),\n        background_tasks: BackgroundTasks = None,\n        controllers: Dict[str, Any] = Depends(get_controllers)\n    ):\n        \"\"\"Prepare batch for processing\"\"\"\n        try:\n            # Check if batch exists\n            batch = controllers[\"db_manager\"].fetchone(\n                \"SELECT status FROM batches WHERE batch_id = %s\",\n                (batch_id,)\n            )\n            \n            if not batch:\n                raise HTTPException(status_code=404, detail=f\"Batch {batch_id} not found\")\n                \n            # Check if batch is ready for preparation\n            if batch['status'] != BatchStatus.READY_FOR_DOWNLOAD.value:\n                raise HTTPException(\n                    status_code=400, \n                    detail=f\"Batch not ready for preparation (status: {batch['status']})\"\n                )\n            \n            # Start preparation in background\n            if background_tasks:\n                background_tasks.add_task(\n                    controllers[\"batch_preparation\"].prepare_batch_directory,\n                    batch_id\n                )\n                \n                return {\n                    \"message\": f\"Batch {batch_id} preparation started in background\",\n                    \"batch_id\": batch_id\n                }\n            else:\n                # Run synchronously\n                result = controllers[\"batch_preparation\"].prepare_batch_directory(batch_id)\n                \n                return {\n                    \"message\": f\"Batch {batch_id} preparation completed\",\n                    \"batch_id\": batch_id,\n                    \"status\": result['status'],\n                    \"batch_path\": result.get('batch_path'),\n                    \"metrics\": result.get('metrics')\n                }\n                \n        except HTTPException:\n            raise\n        except Exception as e:\n            logger.error(f\"Error preparing batch {batch_id}: {e}\")\n            raise HTTPException(status_code=500, detail=str(e))\n    \n    @router.get(\"/batches/{batch_id}/structures\", tags=[\"Batches\"])\n    async def list_batch_structures(\n        batch_id: int = Path(..., description=\"Batch ID\"),\n        status: Optional[str] = None,\n        controllers: Dict[str, Any] = Depends(get_controllers)\n    ):\n        \"\"\"List structures in a batch\"\"\"\n        try:\n            # Build query\n            query = \"\"\"\n                SELECT s.structure_id, s.pdb_id, p.uniprot_id, s.processing_status, bi.status as batch_status,\n                       bi.error_message\n                FROM batch_items bi\n                JOIN structures s ON bi.structure_id = s.structure_id\n                JOIN proteins p ON s.protein_id = p.protein_id\n                WHERE bi.batch_id = %s\n            \"\"\"\n            params = [batch_id]\n            \n            # Add status filter if specified\n            if status:\n                query += \" AND bi.status = %s\"\n                params.append(status)\n            \n            # Add order by\n            query += \" ORDER BY s.pdb_id\"\n            \n            # Execute query\n            structures = controllers[\"db_manager\"].fetchall(query, tuple(params))\n            \n            if not structures and not controllers[\"db_manager\"].fetchone(\n                \"SELECT 1 FROM batches WHERE batch_id = %s\", (batch_id,)\n            ):\n                raise HTTPException(status_code=404, detail=f\"Batch {batch_id} not found\")\n                \n            return {\n                \"batch_id\": batch_id,\n                \"structures\": structures,\n                \"total\": len(structures)\n            }\n            \n        except HTTPException:\n            raise\n        except Exception as e:\n            logger.error(f\"Error listing structures for batch {batch_id}: {e}\")\n            raise HTTPException(status_code=500, detail=str(e))\n    \n    # Pipeline endpoints\n    @router.post(\"/batches/{batch_id}/pipeline/prepare\", tags=[\"Pipeline\"])\n    async def prepare_pipeline(\n        batch_id: int = Path(..., description=\"Batch ID\"),\n        controllers: Dict[str, Any] = Depends(get_controllers)\n    ):\n        \"\"\"Prepare pipeline for batch execution\"\"\"\n        try:\n            result = controllers[\"pipeline_controller\"].prepare_batch_pipeline(batch_id)\n            \n            if not result['success']:\n                raise HTTPException(status_code=400, detail=result['message'])\n                \n            return {\n                \"message\": f\"Pipeline prepared for batch {batch_id}\",\n                \"batch_id\": batch_id,\n                \"grid_config\": result['grid_config'],\n                \"steps\": result['steps']\n            }\n            \n        except HTTPException:\n            raise\n        except Exception as e:\n            logger.error(f\"Error preparing pipeline for batch {batch_id}: {e}\")\n            raise HTTPException(status_code=500, detail=str(e))\n    \n    @router.post(\"/batches/{batch_id}/pipeline/start\", tags=[\"Pipeline\"])\n    async def start_pipeline(\n        batch_id: int = Path(..., description=\"Batch ID\"),\n        pipeline_data: PipelineStart = Body(...),\n        controllers: Dict[str, Any] = Depends(get_controllers)\n    ):\n        \"\"\"Start pipeline execution\"\"\"\n        try:\n            result = controllers[\"pipeline_controller\"].start_pipeline(\n                batch_id,\n                start_from=pipeline_data.step,\n                restart=pipeline_data.restart\n            )\n            \n            if not result['success']:\n                raise HTTPException(status_code=400, detail=result['message'])\n                \n            return {\n                \"message\": f\"Pipeline started for batch {batch_id}\",\n                \"batch_id\": batch_id,\n                \"job_id\": result['job_id'],\n                \"grid_job_id\": result['grid_job_id'],\n                \"step\": result['step'],\n                \"step_index\": result.get('step_index', 0)\n            }\n            \n        except HTTPException:\n            raise\n        except Exception as e:\n            logger.error(f\"Error starting pipeline for batch {batch_id}: {e}\")\n            raise HTTPException(status_code=500, detail=str(e))\n    \n    @router.get(\"/batches/{batch_id}/pipeline/status\", tags=[\"Pipeline\"])\n    async def get_pipeline_status(\n        batch_id: int = Path(..., description=\"Batch ID\"),\n        controllers: Dict[str, Any] = Depends(get_controllers)\n    ):\n        \"\"\"Get pipeline status\"\"\"\n        try:\n            result = controllers[\"pipeline_controller\"].get_pipeline_status(batch_id)\n            \n            if not result['success']:\n                raise HTTPException(status_code=400, detail=result['message'])\n                \n            return result\n            \n        except HTTPException:\n            raise\n        except Exception as e:\n            logger.error(f\"Error getting pipeline status for batch {batch_id}: {e}\")\n            raise HTTPException(status_code=500, detail=str(e))\n    \n    @router.post(\"/batches/{batch_id}/pipeline/recover\", tags=[\"Pipeline\"])\n    async def recover_pipeline(\n        batch_id: int = Path(..., description=\"Batch ID\"),\n        controllers: Dict[str, Any] = Depends(get_controllers)\n    ):\n        \"\"\"Recover failed pipeline\"\"\"\n        try:\n            result = controllers[\"pipeline_controller\"].recover_failed_pipeline(batch_id)\n            \n            if not result['success']:\n                raise HTTPException(status_code=400, detail=result['message'])\n                \n            return {\n                \"message\": f\"Pipeline recovery initiated for batch {batch_id}\",\n                \"batch_id\": batch_id,\n                \"recovery_plans\": result.get('recovery_plans', []),\n                \"status\": result.get('status')\n            }\n            \n        except HTTPException:\n            raise\n        except Exception as e:\n            logger.error(f\"Error recovering pipeline for batch {batch_id}: {e}\")\n            raise HTTPException(status_code=500, detail=str(e))\n    \n    # Domains endpoints\n    @router.get(\"/batches/{batch_id}/domains\", tags=[\"Domains\"])\n    async def list_batch_domains(\n        batch_id: int = Path(..., description=\"Batch ID\"),\n        confidence: Optional[str] = None,\n        controllers: Dict[str, Any] = Depends(get_controllers)\n    ):\n        \"\"\"List domains in a batch\"\"\"\n        try:\n            # First check if batch has completed domain detection\n            batch = controllers[\"db_manager\"].fetchone(\n                \"SELECT status FROM batches WHERE batch_id = %s\",\n                (batch_id,)\n            )\n            \n            if not batch:\n                raise HTTPException(status_code=404, detail=f\"Batch {batch_id} not found\")\n                \n            if not is_completed_status(batch['status']): \n                raise HTTPException(\n                    status_code=400, \n                    detail=f\"Batch processing not completed (status: {batch['status']})\"\n                )\n            \n            # Get batch path\n            batch_path = controllers[\"db_manager\"].fetchone(\n                \"SELECT parameters->>'batch_path' FROM batches WHERE batch_id = %s\",\n                (batch_id,)\n            )\n            \n            if not batch_path or not batch_path.get('parameters', {}).get('batch_path'):\n                raise HTTPException(\n                    status_code=400,\n                    detail=f\"Batch path not found for batch {batch_id}\"\n                )\n                \n            batch_path = batch_path.get('parameters', {}).get('batch_path')\n            \n            # Get structure IDs in batch\n            structures = controllers[\"db_manager\"].fetchall(\n                \"\"\"\n                SELECT s.structure_id, s.pdb_id\n                FROM batch_items bi\n                JOIN structures s ON bi.structure_id = s.structure_id\n                WHERE bi.batch_id = %s AND bi.status = %s\n                \"\"\",\n                (batch_id, BatchStatus.PIPELINE_COMPLETED.value)\n            )\n            \n            # Collect domains from all structures\n            all_domains = []\n            \n            for structure in structures:\n                structure_id = structure['structure_id']\n                pdb_id = structure['pdb_id']\n                \n                # Look for domain file\n                domains_file = os.path.join(\n                    batch_path, \"results\", \"parse_domains\", f\"struct_{structure_id}\", \n                    f\"struct_{structure_id}_domains.json\"\n                )\n                \n                if not os.path.exists(domains_file):\n                    continue\n                \n                # Load domains\n                with open(domains_file, 'r') as f:\n                    domains_data = json.load(f)\n                \n                domains = domains_data.get('domains', [])\n                \n                # Filter by confidence if specified\n                if confidence:\n                    domains = [d for d in domains if d.get('confidence_level') == confidence]\n                \n                # Add structure info to domains\n                for domain in domains:\n                    domain['structure_id'] = structure_id\n                    domain['pdb_id'] = pdb_id\n                    all_domains.append(domain)\n            \n            return {\n                \"batch_id\": batch_id,\n                \"domains\": all_domains,\n                \"total\": len(all_domains)\n            }\n            \n        except HTTPException:\n            raise\n        except Exception as e:\n            logger.error(f\"Error listing domains for batch {batch_id}: {e}\")\n            raise HTTPException(status_code=500, detail=str(e))\n    \n    @router.get(\"/structures/{structure_id}/domains\", tags=[\"Domains\"])\n    async def get_structure_domains(\n        structure_id: int = Path(..., description=\"Structure ID\"),\n        controllers: Dict[str, Any] = Depends(get_controllers)\n    ):\n        \"\"\"Get domains for a structure\"\"\"\n        try:\n            # Get batch and structure information\n            structure_info = controllers[\"db_manager\"].fetchone(\n                \"\"\"\n                SELECT s.pdb_id, s.processing_status, bi.batch_id, bi.status,\n                       b.parameters->>'batch_path' as batch_path\n                FROM structures s\n                JOIN batch_items bi ON s.structure_id = bi.structure_id\n                JOIN batches b ON bi.batch_id = b.batch_id\n                WHERE s.structure_id = %s\n                \"\"\",\n                (structure_id,)\n            )\n            \n            if not structure_info:\n                raise HTTPException(status_code=404, detail=f\"Structure {structure_id} not found\")\n                \n            if structure_info['status'] != 'COMPLETED':\n                raise HTTPException(\n                    status_code=400,\n                    detail=f\"Structure processing not completed (status: {structure_info['status']})\"\n                )\n                \n            batch_path = structure_info['batch_path']\n            if not batch_path:\n                raise HTTPException(\n                    status_code=400,\n                    detail=f\"Batch path not found for structure {structure_id}\"\n                )\n            \n            # Look for domain file\n            domains_file = os.path.join(\n                batch_path, \"results\", \"parse_domains\", f\"struct_{structure_id}\", \n                f\"struct_{structure_id}_domains.json\"\n            )\n            \n            if not os.path.exists(domains_file):\n                raise HTTPException(\n                    status_code=404,\n                    detail=f\"Domains not found for structure {structure_id}\"\n                )\n            \n            # Load domains\n            with open(domains_file, 'r') as f:\n                domains_data = json.load(f)\n            \n            domains = domains_data.get('domains', [])\n            \n            # Add structure info to domains\n            for domain in domains:\n                domain['structure_id'] = structure_id\n                domain['pdb_id'] = structure_info['pdb_id']\n            \n            return {\n                \"structure_id\": structure_id,\n                \"pdb_id\": structure_info['pdb_id'],\n                \"domains\": domains,\n                \"total\": len(domains)\n            }\n            \n        except HTTPException:\n            raise\n        except Exception as e:\n            logger.error(f\"Error getting domains for structure {structure_id}: {e}\")\n            raise HTTPException(status_code=500, detail=str(e))\n    \n    # Download endpoints\n    @router.get(\"/structures/{structure_id}/file\", tags=[\"Downloads\"])\n    async def download_structure_file(\n        structure_id: int = Path(..., description=\"Structure ID\"),\n        controllers: Dict[str, Any] = Depends(get_controllers)\n    ):\n        \"\"\"Download structure file\"\"\"\n        try:\n            # Get structure path\n            structure = controllers[\"db_manager\"].fetchone(\n                \"SELECT structure_path, pdb_id FROM structures WHERE structure_id = %s\",\n                (structure_id,)\n            )\n            \n            if not structure or not structure['structure_path']:\n                raise HTTPException(status_code=404, detail=f\"Structure {structure_id} not found\")\n                \n            structure_path = structure['structure_path']\n            \n            if not os.path.exists(structure_path):\n                raise HTTPException(status_code=404, detail=f\"Structure file not found\")\n                \n            return FileResponse(\n                structure_path,\n                filename=f\"{structure['pdb_id']}.cif.gz\",\n                media_type=\"application/gzip\"\n            )\n            \n        except HTTPException:\n            raise\n        except Exception as e:\n            logger.error(f\"Error downloading structure file {structure_id}: {e}\")\n            raise HTTPException(status_code=500, detail=str(e))\n    \n    @router.get(\"/batches/{batch_id}/report\", tags=[\"Downloads\"])\n    async def download_batch_report(\n        batch_id: int = Path(..., description=\"Batch ID\"),\n        format: str = Query(\"json\", description=\"Report format (json or tsv)\"),\n        controllers: Dict[str, Any] = Depends(get_controllers)\n    ):\n        \"\"\"Download batch report\"\"\"\n        try:\n            # Get batch path\n            batch_path_result = controllers[\"db_manager\"].fetchone(\n                \"SELECT parameters->>'batch_path' FROM batches WHERE batch_id = %s\",\n                (batch_id,)\n            )\n            \n            if not batch_path_result:\n                raise HTTPException(status_code=404, detail=f\"Batch {batch_id} not found\")\n                \n            batch_path = batch_path_result.get('parameters', {}).get('batch_path')\n            if not batch_path:\n                raise HTTPException(\n                    status_code=400,\n                    detail=f\"Batch path not found for batch {batch_id}\"\n                )\n            \n            # Look for report file\n            report_dir = os.path.join(batch_path, \"reports\")\n            \n            if format.lower() == \"json\":\n                report_file = os.path.join(report_dir, f\"batch_{batch_id}_report.json\")\n                media_type = \"application/json\"\n                filename = f\"batch_{batch_id}_report.json\"\n            elif format.lower() == \"tsv\":\n                report_file = os.path.join(report_dir, f\"batch_{batch_id}_domains.tsv\")\n                media_type = \"text/tab-separated-values\"\n                filename = f\"batch_{batch_id}_domains.tsv\"\n            else:\n                raise HTTPException(\n                    status_code=400,\n                    detail=f\"Unsupported format: {format}. Use 'json' or 'tsv'.\"\n                )\n            \n            if not os.path.exists(report_file):\n                raise HTTPException(\n                    status_code=404,\n                    detail=f\"Report not found for batch {batch_id}\"\n                )\n                \n            return FileResponse(\n                report_file,\n                filename=filename,\n                media_type=media_type\n            )\n            \n        except HTTPException:\n            raise\n        except Exception as e:\n            logger.error(f\"Error downloading batch report {batch_id}: {e}\")\n            raise HTTPException(status_code=500, detail=str(e))\n    \n    # Add routes to app\n    app.include_router(router)",
			"file": "api/routes.py",
			"file_size": 26896,
			"file_write_time": 133870575879980750,
			"settings":
			{
				"buffer_size": 26914,
				"line_ending": "Windows"
			},
			"undo_stack":
			[
				[
					3,
					1,
					"insert",
					{
						"characters": "\nCOMM"
					},
					"BgAAALoEAAAAAAAAuwQAAAAAAAAAAAAAuwQAAAAAAAC/BAAAAAAAAAAAAAC/BAAAAAAAAMAEAAAAAAAAAAAAAMAEAAAAAAAAwQQAAAAAAAAAAAAAwQQAAAAAAADCBAAAAAAAAAAAAADCBAAAAAAAAMMEAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAugQAAAAAAAC6BAAAAAAAAAAAAAAAAPC/"
				],
				[
					4,
					1,
					"left_delete",
					null,
					"AQAAAMIEAAAAAAAAwgQAAAAAAAABAAAATQ",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAwwQAAAAAAADDBAAAAAAAAAAAAAAAAPC/"
				],
				[
					5,
					1,
					"insert",
					{
						"characters": "PLETED"
					},
					"BgAAAMIEAAAAAAAAwwQAAAAAAAAAAAAAwwQAAAAAAADEBAAAAAAAAAAAAADEBAAAAAAAAMUEAAAAAAAAAAAAAMUEAAAAAAAAxgQAAAAAAAAAAAAAxgQAAAAAAADHBAAAAAAAAAAAAADHBAAAAAAAAMgEAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAwgQAAAAAAADCBAAAAAAAAAAAAAAAAPC/"
				],
				[
					6,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAAMgEAAAAAAAAyQQAAAAAAAAAAAAAyQQAAAAAAADKBAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAyAQAAAAAAADIBAAAAAAAAAAAAAAAAPC/"
				],
				[
					7,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAMoEAAAAAAAAywQAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAygQAAAAAAADKBAAAAAAAAAAAAAAAAPC/"
				],
				[
					8,
					1,
					"insert_snippet",
					{
						"contents": "'$0'"
					},
					"AQAAAMsEAAAAAAAAzQQAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAywQAAAAAAADLBAAAAAAAAAAAAAAAAPC/"
				],
				[
					9,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Delete Left Right.sublime-macro"
					},
					"AgAAAMsEAAAAAAAAywQAAAAAAAABAAAAJ8sEAAAAAAAAywQAAAAAAAABAAAAJw",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAzAQAAAAAAADMBAAAAAAAAAAAAAAAAPC/"
				],
				[
					10,
					1,
					"insert_snippet",
					{
						"contents": "\"$0\""
					},
					"AQAAAMsEAAAAAAAAzQQAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAywQAAAAAAADLBAAAAAAAAAAAAAAAAPC/"
				],
				[
					11,
					1,
					"insert",
					{
						"characters": "COMPLETED"
					},
					"CQAAAMwEAAAAAAAAzQQAAAAAAAAAAAAAzQQAAAAAAADOBAAAAAAAAAAAAADOBAAAAAAAAM8EAAAAAAAAAAAAAM8EAAAAAAAA0AQAAAAAAAAAAAAA0AQAAAAAAADRBAAAAAAAAAAAAADRBAAAAAAAANIEAAAAAAAAAAAAANIEAAAAAAAA0wQAAAAAAAAAAAAA0wQAAAAAAADUBAAAAAAAAAAAAADUBAAAAAAAANUEAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAzAQAAAAAAADMBAAAAAAAAAAAAAAAAPC/"
				],
				[
					19,
					1,
					"insert",
					{
						"characters": "aB"
					},
					"AwAAAPIgAAAAAAAA8yAAAAAAAAAAAAAA8yAAAAAAAADzIAAAAAAAABQAAAAiUkVBRFlfRk9SX0RPV05MT0FEIvMgAAAAAAAA9CAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAABiEAAAAAAADyIAAAAAAAAAAAAAAAAPC/"
				],
				[
					20,
					2,
					"left_delete",
					null,
					"AgAAAPMgAAAAAAAA8yAAAAAAAAABAAAAQvIgAAAAAAAA8iAAAAAAAAABAAAAYQ",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA9CAAAAAAAAD0IAAAAAAAAAAAAAAAAPC/"
				],
				[
					21,
					1,
					"insert",
					{
						"characters": "BatchSatus"
					},
					"CgAAAPIgAAAAAAAA8yAAAAAAAAAAAAAA8yAAAAAAAAD0IAAAAAAAAAAAAAD0IAAAAAAAAPUgAAAAAAAAAAAAAPUgAAAAAAAA9iAAAAAAAAAAAAAA9iAAAAAAAAD3IAAAAAAAAAAAAAD3IAAAAAAAAPggAAAAAAAAAAAAAPggAAAAAAAA+SAAAAAAAAAAAAAA+SAAAAAAAAD6IAAAAAAAAAAAAAD6IAAAAAAAAPsgAAAAAAAAAAAAAPsgAAAAAAAA/CAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA8iAAAAAAAADyIAAAAAAAAAAAAAAAAPC/"
				],
				[
					22,
					1,
					"insert",
					{
						"characters": ".READY_FOR_DO"
					},
					"DQAAAPwgAAAAAAAA/SAAAAAAAAAAAAAA/SAAAAAAAAD+IAAAAAAAAAAAAAD+IAAAAAAAAP8gAAAAAAAAAAAAAP8gAAAAAAAAACEAAAAAAAAAAAAAACEAAAAAAAABIQAAAAAAAAAAAAABIQAAAAAAAAIhAAAAAAAAAAAAAAIhAAAAAAAAAyEAAAAAAAAAAAAAAyEAAAAAAAAEIQAAAAAAAAAAAAAEIQAAAAAAAAUhAAAAAAAAAAAAAAUhAAAAAAAABiEAAAAAAAAAAAAABiEAAAAAAAAHIQAAAAAAAAAAAAAHIQAAAAAAAAghAAAAAAAAAAAAAAghAAAAAAAACSEAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA/CAAAAAAAAD8IAAAAAAAAAAAAAAAAPC/"
				],
				[
					23,
					1,
					"insert",
					{
						"characters": "WNLOAD.value"
					},
					"DAAAAAkhAAAAAAAACiEAAAAAAAAAAAAACiEAAAAAAAALIQAAAAAAAAAAAAALIQAAAAAAAAwhAAAAAAAAAAAAAAwhAAAAAAAADSEAAAAAAAAAAAAADSEAAAAAAAAOIQAAAAAAAAAAAAAOIQAAAAAAAA8hAAAAAAAAAAAAAA8hAAAAAAAAECEAAAAAAAAAAAAAECEAAAAAAAARIQAAAAAAAAAAAAARIQAAAAAAABIhAAAAAAAAAAAAABIhAAAAAAAAEyEAAAAAAAAAAAAAEyEAAAAAAAAUIQAAAAAAAAAAAAAUIQAAAAAAABUhAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAACSEAAAAAAAAJIQAAAAAAAAAAAAAAAPC/"
				],
				[
					25,
					1,
					"insert",
					{
						"characters": "t"
					},
					"AQAAAPggAAAAAAAA+SAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA+CAAAAAAAAD4IAAAAAAAAAAAAAAAAPC/"
				],
				[
					39,
					1,
					"insert",
					{
						"characters": " #How"
					},
					"BQAAAMtAAAAAAAAAzEAAAAAAAAAAAAAAzEAAAAAAAADNQAAAAAAAAAAAAADNQAAAAAAAAM5AAAAAAAAAAAAAAM5AAAAAAAAAz0AAAAAAAAAAAAAAz0AAAAAAAADQQAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAy0AAAAAAAADLQAAAAAAAAAAAAAAAAPC/"
				],
				[
					40,
					1,
					"insert",
					{
						"characters": " do"
					},
					"AwAAANBAAAAAAAAA0UAAAAAAAAAAAAAA0UAAAAAAAADSQAAAAAAAAAAAAADSQAAAAAAAANNAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA0EAAAAAAAADQQAAAAAAAAAAAAAAAAPC/"
				],
				[
					41,
					1,
					"insert",
					{
						"characters": " I"
					},
					"AgAAANNAAAAAAAAA1EAAAAAAAAAAAAAA1EAAAAAAAADVQAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA00AAAAAAAADTQAAAAAAAAAAAAAAAAPC/"
				],
				[
					42,
					1,
					"insert",
					{
						"characters": " fix"
					},
					"BAAAANVAAAAAAAAA1kAAAAAAAAAAAAAA1kAAAAAAAADXQAAAAAAAAAAAAADXQAAAAAAAANhAAAAAAAAAAAAAANhAAAAAAAAA2UAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA1UAAAAAAAADVQAAAAAAAAAAAAAAAAPC/"
				],
				[
					43,
					1,
					"insert",
					{
						"characters": " this?"
					},
					"BgAAANlAAAAAAAAA2kAAAAAAAAAAAAAA2kAAAAAAAADbQAAAAAAAAAAAAADbQAAAAAAAANxAAAAAAAAAAAAAANxAAAAAAAAA3UAAAAAAAAAAAAAA3UAAAAAAAADeQAAAAAAAAAAAAADeQAAAAAAAAN9AAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA2UAAAAAAAADZQAAAAAAAAAAAAAAAAPC/"
				],
				[
					70,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"AgAAAJkJAAAAAAAAmgkAAAAAAAAAAAAAmgkAAAAAAACbCQAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAmQkAAAAAAACZCQAAAAAAAAAAAAAAAPC/"
				],
				[
					74,
					1,
					"paste",
					null,
					"AQAAAJoJAAAAAAAAxQoAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAmgkAAAAAAACaCQAAAAAAAAAAAAAAAPC/"
				],
				[
					114,
					21,
					"left_delete",
					null,
					"FQAAAPVBAAAAAAAA9UEAAAAAAAABAAAAKfRBAAAAAAAA9EEAAAAAAAABAAAAIvNBAAAAAAAA80EAAAAAAAABAAAARPJBAAAAAAAA8kEAAAAAAAABAAAARfFBAAAAAAAA8UEAAAAAAAABAAAAVPBBAAAAAAAA8EEAAAAAAAABAAAARe9BAAAAAAAA70EAAAAAAAABAAAATO5BAAAAAAAA7kEAAAAAAAABAAAAUO1BAAAAAAAA7UEAAAAAAAABAAAATexBAAAAAAAA7EEAAAAAAAABAAAAT+tBAAAAAAAA60EAAAAAAAABAAAAQ+pBAAAAAAAA6kEAAAAAAAABAAAAIulBAAAAAAAA6UEAAAAAAAABAAAAIOhBAAAAAAAA6EEAAAAAAAABAAAALOdBAAAAAAAA50EAAAAAAAABAAAAIuZBAAAAAAAA5kEAAAAAAAABAAAAROVBAAAAAAAA5UEAAAAAAAABAAAAReRBAAAAAAAA5EEAAAAAAAABAAAAVONBAAAAAAAA40EAAAAAAAABAAAAReJBAAAAAAAA4kEAAAAAAAABAAAATOFBAAAAAAAA4UEAAAAAAAABAAAAUA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA9kEAAAAAAAD2QQAAAAAAAAAAAAAAAPC/"
				],
				[
					115,
					13,
					"left_delete",
					null,
					"DQAAAOBBAAAAAAAA4EEAAAAAAAABAAAATd9BAAAAAAAA30EAAAAAAAABAAAAT95BAAAAAAAA3kEAAAAAAAABAAAAQ91BAAAAAAAA3UEAAAAAAAABAAAAX9xBAAAAAAAA3EEAAAAAAAABAAAARdtBAAAAAAAA20EAAAAAAAABAAAATtpBAAAAAAAA2kEAAAAAAAABAAAASdlBAAAAAAAA2UEAAAAAAAABAAAATNhBAAAAAAAA2EEAAAAAAAABAAAARddBAAAAAAAA10EAAAAAAAABAAAAUNZBAAAAAAAA1kEAAAAAAAABAAAASdVBAAAAAAAA1UEAAAAAAAABAAAAUNRBAAAAAAAA1EEAAAAAAAABAAAAIg",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA4UEAAAAAAADhQQAAAAAAAAAAAAAAAPC/"
				],
				[
					116,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Delete Left Right.sublime-macro"
					},
					"AgAAANNBAAAAAAAA00EAAAAAAAABAAAAKNNBAAAAAAAA00EAAAAAAAABAAAAKQ",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA1EEAAAAAAADUQQAAAAAAAAAAAAAAAPC/"
				],
				[
					117,
					12,
					"left_delete",
					null,
					"DAAAANJBAAAAAAAA0kEAAAAAAAABAAAAKNFBAAAAAAAA0UEAAAAAAAABAAAAaNBBAAAAAAAA0EEAAAAAAAABAAAAdM9BAAAAAAAAz0EAAAAAAAABAAAAac5BAAAAAAAAzkEAAAAAAAABAAAAd81BAAAAAAAAzUEAAAAAAAABAAAAc8xBAAAAAAAAzEEAAAAAAAABAAAAdMtBAAAAAAAAy0EAAAAAAAABAAAAcspBAAAAAAAAykEAAAAAAAABAAAAYclBAAAAAAAAyUEAAAAAAAABAAAAdMhBAAAAAAAAyEEAAAAAAAABAAAAc8dBAAAAAAAAx0EAAAAAAAABAAAALg",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA00EAAAAAAADTQQAAAAAAAAAAAAAAAPC/"
				],
				[
					122,
					1,
					"insert",
					{
						"characters": "is_c"
					},
					"BAAAALhBAAAAAAAAuUEAAAAAAAAAAAAAuUEAAAAAAAC6QQAAAAAAAAAAAAC6QQAAAAAAALtBAAAAAAAAAAAAALtBAAAAAAAAvEEAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAuEEAAAAAAAC4QQAAAAAAAAAAAAAAAPC/"
				],
				[
					123,
					1,
					"insert",
					{
						"characters": "ompleted_"
					},
					"CQAAALxBAAAAAAAAvUEAAAAAAAAAAAAAvUEAAAAAAAC+QQAAAAAAAAAAAAC+QQAAAAAAAL9BAAAAAAAAAAAAAL9BAAAAAAAAwEEAAAAAAAAAAAAAwEEAAAAAAADBQQAAAAAAAAAAAADBQQAAAAAAAMJBAAAAAAAAAAAAAMJBAAAAAAAAw0EAAAAAAAAAAAAAw0EAAAAAAADEQQAAAAAAAAAAAADEQQAAAAAAAMVBAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAvEEAAAAAAAC8QQAAAAAAAAAAAAAAAPC/"
				],
				[
					124,
					1,
					"insert",
					{
						"characters": "status("
					},
					"BwAAAMVBAAAAAAAAxkEAAAAAAAAAAAAAxkEAAAAAAADHQQAAAAAAAAAAAADHQQAAAAAAAMhBAAAAAAAAAAAAAMhBAAAAAAAAyUEAAAAAAAAAAAAAyUEAAAAAAADKQQAAAAAAAAAAAADKQQAAAAAAAMtBAAAAAAAAAAAAAMtBAAAAAAAAzEEAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAxUEAAAAAAADFQQAAAAAAAAAAAAAAAPC/"
				],
				[
					127,
					1,
					"insert",
					{
						"characters": ")"
					},
					"AQAAANtBAAAAAAAA3EEAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA20EAAAAAAADbQQAAAAAAAAAAAAAAAPC/"
				],
				[
					130,
					1,
					"left_delete",
					null,
					"AQAAAN5BAAAAAAAA3kEAAAAAAAATAAAAI0hvdyBkbyBJIGZpeCB0aGlzPw",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA3kEAAAAAAADxQQAAAAAAAAAAAAAAAPC/"
				],
				[
					145,
					1,
					"insert",
					{
						"characters": "%s"
					},
					"AwAAADpGAAAAAAAAO0YAAAAAAAAAAAAAO0YAAAAAAAA7RgAAAAAAAAsAAAAnQ09NUExFVEVEJztGAAAAAAAAPEYAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAARUYAAAAAAAA6RgAAAAAAAAAAAAAAAPC/"
				],
				[
					155,
					1,
					"insert",
					{
						"characters": " Bact"
					},
					"BQAAAGxGAAAAAAAAbUYAAAAAAAAAAAAAbUYAAAAAAABuRgAAAAAAAAAAAABuRgAAAAAAAG9GAAAAAAAAAAAAAG9GAAAAAAAAcEYAAAAAAAAAAAAAcEYAAAAAAABxRgAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAbEYAAAAAAABsRgAAAAAAAAAAAAAAAPC/"
				],
				[
					156,
					2,
					"left_delete",
					null,
					"AgAAAHBGAAAAAAAAcEYAAAAAAAABAAAAdG9GAAAAAAAAb0YAAAAAAAABAAAAYw",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAcUYAAAAAAABxRgAAAAAAAAAAAAAAAPC/"
				],
				[
					157,
					1,
					"insert",
					{
						"characters": "tsc"
					},
					"AwAAAG9GAAAAAAAAcEYAAAAAAAAAAAAAcEYAAAAAAABxRgAAAAAAAAAAAABxRgAAAAAAAHJGAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAb0YAAAAAAABvRgAAAAAAAAAAAAAAAPC/"
				],
				[
					158,
					5,
					"left_delete",
					null,
					"BQAAAHFGAAAAAAAAcUYAAAAAAAABAAAAY3BGAAAAAAAAcEYAAAAAAAABAAAAc29GAAAAAAAAb0YAAAAAAAABAAAAdG5GAAAAAAAAbkYAAAAAAAABAAAAYW1GAAAAAAAAbUYAAAAAAAABAAAAQg",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAckYAAAAAAAByRgAAAAAAAAAAAAAAAPC/"
				],
				[
					159,
					1,
					"insert",
					{
						"characters": "batch"
					},
					"BQAAAG1GAAAAAAAAbkYAAAAAAAAAAAAAbkYAAAAAAABvRgAAAAAAAAAAAABvRgAAAAAAAHBGAAAAAAAAAAAAAHBGAAAAAAAAcUYAAAAAAAAAAAAAcUYAAAAAAAByRgAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAbUYAAAAAAABtRgAAAAAAAAAAAAAAAPC/"
				],
				[
					160,
					5,
					"left_delete",
					null,
					"BQAAAHFGAAAAAAAAcUYAAAAAAAABAAAAaHBGAAAAAAAAcEYAAAAAAAABAAAAY29GAAAAAAAAb0YAAAAAAAABAAAAdG5GAAAAAAAAbkYAAAAAAAABAAAAYW1GAAAAAAAAbUYAAAAAAAABAAAAYg",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAckYAAAAAAAByRgAAAAAAAAAAAAAAAPC/"
				],
				[
					161,
					1,
					"insert",
					{
						"characters": "Bas"
					},
					"AwAAAG1GAAAAAAAAbkYAAAAAAAAAAAAAbkYAAAAAAABvRgAAAAAAAAAAAABvRgAAAAAAAHBGAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAbUYAAAAAAABtRgAAAAAAAAAAAAAAAPC/"
				],
				[
					162,
					1,
					"left_delete",
					null,
					"AQAAAG9GAAAAAAAAb0YAAAAAAAABAAAAcw",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAcEYAAAAAAABwRgAAAAAAAAAAAAAAAPC/"
				],
				[
					163,
					1,
					"insert",
					{
						"characters": "tchSat"
					},
					"BgAAAG9GAAAAAAAAcEYAAAAAAAAAAAAAcEYAAAAAAABxRgAAAAAAAAAAAABxRgAAAAAAAHJGAAAAAAAAAAAAAHJGAAAAAAAAc0YAAAAAAAAAAAAAc0YAAAAAAAB0RgAAAAAAAAAAAAB0RgAAAAAAAHVGAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAb0YAAAAAAABvRgAAAAAAAAAAAAAAAPC/"
				],
				[
					164,
					2,
					"left_delete",
					null,
					"AgAAAHRGAAAAAAAAdEYAAAAAAAABAAAAdHNGAAAAAAAAc0YAAAAAAAABAAAAYQ",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAdUYAAAAAAAB1RgAAAAAAAAAAAAAAAPC/"
				],
				[
					165,
					1,
					"insert",
					{
						"characters": "ttus"
					},
					"BAAAAHNGAAAAAAAAdEYAAAAAAAAAAAAAdEYAAAAAAAB1RgAAAAAAAAAAAAB1RgAAAAAAAHZGAAAAAAAAAAAAAHZGAAAAAAAAd0YAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAc0YAAAAAAABzRgAAAAAAAAAAAAAAAPC/"
				],
				[
					166,
					3,
					"left_delete",
					null,
					"AwAAAHZGAAAAAAAAdkYAAAAAAAABAAAAc3VGAAAAAAAAdUYAAAAAAAABAAAAdXRGAAAAAAAAdEYAAAAAAAABAAAAdA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAd0YAAAAAAAB3RgAAAAAAAAAAAAAAAPC/"
				],
				[
					167,
					1,
					"insert",
					{
						"characters": "atus."
					},
					"BQAAAHRGAAAAAAAAdUYAAAAAAAAAAAAAdUYAAAAAAAB2RgAAAAAAAAAAAAB2RgAAAAAAAHdGAAAAAAAAAAAAAHdGAAAAAAAAeEYAAAAAAAAAAAAAeEYAAAAAAAB5RgAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAdEYAAAAAAAB0RgAAAAAAAAAAAAAAAPC/"
				],
				[
					168,
					1,
					"insert",
					{
						"characters": "PIP"
					},
					"AwAAAHlGAAAAAAAAekYAAAAAAAAAAAAAekYAAAAAAAB7RgAAAAAAAAAAAAB7RgAAAAAAAHxGAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAeUYAAAAAAAB5RgAAAAAAAAAAAAAAAPC/"
				],
				[
					169,
					1,
					"insert_completion",
					{
						"completion": "PIPELINE_COMPLETED",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "PIPELINE_COMPLETED"
					},
					"AgAAAHlGAAAAAAAAeUYAAAAAAAADAAAAUElQeUYAAAAAAACLRgAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAfEYAAAAAAAB8RgAAAAAAAAAAAAAAAPC/"
				],
				[
					170,
					1,
					"insert",
					{
						"characters": ".value"
					},
					"BgAAAItGAAAAAAAAjEYAAAAAAAAAAAAAjEYAAAAAAACNRgAAAAAAAAAAAACNRgAAAAAAAI5GAAAAAAAAAAAAAI5GAAAAAAAAj0YAAAAAAAAAAAAAj0YAAAAAAACQRgAAAAAAAAAAAACQRgAAAAAAAJFGAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAi0YAAAAAAACLRgAAAAAAAAAAAAAAAPC/"
				],
				[
					224,
					1,
					"insert",
					{
						"characters": "\n\n\n"
					},
					"CAAAALMCAAAAAAAAtAIAAAAAAAAAAAAAtAIAAAAAAAC4AgAAAAAAAAAAAAC4AgAAAAAAALkCAAAAAAAAAAAAALkCAAAAAAAAvQIAAAAAAAAAAAAAtAIAAAAAAAC0AgAAAAAAAAQAAAAgICAguQIAAAAAAAC6AgAAAAAAAAAAAAC6AgAAAAAAAL4CAAAAAAAAAAAAALUCAAAAAAAAtQIAAAAAAAAEAAAAICAgIA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAswIAAAAAAACzAgAAAAAAAAAAAAAAAPC/"
				],
				[
					226,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAALQCAAAAAAAAtQIAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAtAIAAAAAAAC0AgAAAAAAAAAAAAAAgEFA"
				],
				[
					228,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAALQCAAAAAAAAtQIAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAtAIAAAAAAAC0AgAAAAAAAAAAAAAAAAAA"
				],
				[
					232,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAJwCAAAAAAAAnQIAAAAAAAAAAAAAnQIAAAAAAAChAgAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAnAIAAAAAAACcAgAAAAAAAAAAAAAAAPC/"
				],
				[
					235,
					1,
					"reindent",
					null,
					"AQAAALoCAAAAAAAAvgIAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAugIAAAAAAAC6AgAAAAAAAAAAAAAAAPC/"
				],
				[
					236,
					1,
					"paste",
					null,
					"AQAAAL4CAAAAAAAAIwQAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAvgIAAAAAAAC+AgAAAAAAAAAAAAAAAPC/"
				],
				[
					239,
					1,
					"left_delete",
					null,
					"AQAAAL4CAAAAAAAAvgIAAAAAAAAEAAAAICAgIA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAwgIAAAAAAADCAgAAAAAAAAAAAAAAAPC/"
				],
				[
					242,
					1,
					"left_delete",
					null,
					"AQAAAB8EAAAAAAAAHwQAAAAAAAABAAAACg",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAIAQAAAAAAAAgBAAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "steps/domain_quality_filter.py",
			"settings":
			{
				"buffer_size": 16052,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			},
			"undo_stack":
			[
				[
					1,
					1,
					"insert",
					{
						"characters": "get_good_domains."
					},
					"EQAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAQAAAAAAAAACAAAAAAAAAAAAAAACAAAAAAAAAAMAAAAAAAAAAAAAAAMAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAFAAAAAAAAAAAAAAAFAAAAAAAAAAYAAAAAAAAAAAAAAAYAAAAAAAAABwAAAAAAAAAAAAAABwAAAAAAAAAIAAAAAAAAAAAAAAAIAAAAAAAAAAkAAAAAAAAAAAAAAAkAAAAAAAAACgAAAAAAAAAAAAAACgAAAAAAAAALAAAAAAAAAAAAAAALAAAAAAAAAAwAAAAAAAAAAAAAAAwAAAAAAAAADQAAAAAAAAAAAAAADQAAAAAAAAAOAAAAAAAAAAAAAAAOAAAAAAAAAA8AAAAAAAAAAAAAAA8AAAAAAAAAEAAAAAAAAAAAAAAAEAAAAAAAAAARAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				],
				[
					2,
					3,
					"left_delete",
					null,
					"AwAAABAAAAAAAAAAEAAAAAAAAAABAAAALg8AAAAAAAAADwAAAAAAAAABAAAAcw4AAAAAAAAADgAAAAAAAAABAAAAbg",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAEQAAAAAAAAARAAAAAAAAAAAAAAAAAPC/"
				],
				[
					3,
					17,
					"left_delete",
					null,
					"DgAAAA0AAAAAAAAADQAAAAAAAAABAAAAaQwAAAAAAAAADAAAAAAAAAABAAAAYQsAAAAAAAAACwAAAAAAAAABAAAAbQoAAAAAAAAACgAAAAAAAAABAAAAbwkAAAAAAAAACQAAAAAAAAABAAAAZAgAAAAAAAAACAAAAAAAAAABAAAAXwcAAAAAAAAABwAAAAAAAAABAAAAZAYAAAAAAAAABgAAAAAAAAABAAAAbwUAAAAAAAAABQAAAAAAAAABAAAAbwQAAAAAAAAABAAAAAAAAAABAAAAZwMAAAAAAAAAAwAAAAAAAAABAAAAXwIAAAAAAAAAAgAAAAAAAAABAAAAdAEAAAAAAAAAAQAAAAAAAAABAAAAZQAAAAAAAAAAAAAAAAAAAAABAAAAZw",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAADgAAAAAAAAAOAAAAAAAAAAAAAAAAAPC/"
				],
				[
					6,
					1,
					"paste",
					null,
					"AQAAAAAAAAAAAAAAtD4AAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "steps/foldseek_search_runner.py",
			"settings":
			{
				"buffer_size": 4789,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			},
			"undo_stack":
			[
				[
					3,
					1,
					"insert",
					{
						"characters": "Search"
					},
					"BgAAAJ0AAAAAAAAAngAAAAAAAAAAAAAAngAAAAAAAACfAAAAAAAAAAAAAACfAAAAAAAAAKAAAAAAAAAAAAAAAKAAAAAAAAAAoQAAAAAAAAAAAAAAoQAAAAAAAACiAAAAAAAAAAAAAACiAAAAAAAAAKMAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAnQAAAAAAAACdAAAAAAAAAAAAAAAAAPC/"
				],
				[
					10,
					1,
					"paste",
					null,
					"AgAAAAAAAAAAAAAAtgAAAAAAAAAAAAAAtgAAAAAAAAC2AAAAAAAAABkAAAAjIyBkcGFtL3N0ZXBzL2ZvbGRzZWVrLnB5",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAZAAAAAAAAAAAAAAAAAPC/"
				],
				[
					16,
					1,
					"insert",
					{
						"characters": "RRun"
					},
					"BQAAABsAAAAAAAAAHAAAAAAAAAAAAAAAHAAAAAAAAAAcAAAAAAAAAJcAAABCYXNlIGNsYXNzIGZvciBEUEFNIHBpcGVsaW5lIHN0ZXBzLgoKVGhpcyBtb2R1bGUgZGVmaW5lcyB0aGUgYWJzdHJhY3QgYmFzZSBjbGFzcyBmb3IgYWxsIHBpcGVsaW5lIHN0ZXBzLApwcm92aWRpbmcgY29tbW9uIGZ1bmN0aW9uYWxpdHkgYW5kIGludGVyZmFjZXMuHAAAAAAAAAAdAAAAAAAAAAAAAAAdAAAAAAAAAB4AAAAAAAAAAAAAAB4AAAAAAAAAHwAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAGwAAAAAAAACyAAAAAAAAAAAAAAAAAPC/"
				],
				[
					17,
					3,
					"left_delete",
					null,
					"AwAAAB4AAAAAAAAAHgAAAAAAAAABAAAAbh0AAAAAAAAAHQAAAAAAAAABAAAAdRwAAAAAAAAAHAAAAAAAAAABAAAAUg",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAHwAAAAAAAAAfAAAAAAAAAAAAAAAAAPC/"
				],
				[
					18,
					1,
					"insert",
					{
						"characters": "uns"
					},
					"AwAAABwAAAAAAAAAHQAAAAAAAAAAAAAAHQAAAAAAAAAeAAAAAAAAAAAAAAAeAAAAAAAAAB8AAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAHAAAAAAAAAAcAAAAAAAAAAAAAAAAAPC/"
				],
				[
					19,
					1,
					"insert",
					{
						"characters": " fo"
					},
					"AwAAAB8AAAAAAAAAIAAAAAAAAAAAAAAAIAAAAAAAAAAhAAAAAAAAAAAAAAAhAAAAAAAAACIAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAHwAAAAAAAAAfAAAAAAAAAAAAAAAAAPC/"
				],
				[
					20,
					2,
					"left_delete",
					null,
					"AgAAACEAAAAAAAAAIQAAAAAAAAABAAAAbyAAAAAAAAAAIAAAAAAAAAABAAAAZg",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAIgAAAAAAAAAiAAAAAAAAAAAAAAAAAPC/"
				],
				[
					21,
					1,
					"insert",
					{
						"characters": "Foldseek"
					},
					"CAAAACAAAAAAAAAAIQAAAAAAAAAAAAAAIQAAAAAAAAAiAAAAAAAAAAAAAAAiAAAAAAAAACMAAAAAAAAAAAAAACMAAAAAAAAAJAAAAAAAAAAAAAAAJAAAAAAAAAAlAAAAAAAAAAAAAAAlAAAAAAAAACYAAAAAAAAAAAAAACYAAAAAAAAAJwAAAAAAAAAAAAAAJwAAAAAAAAAoAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAIAAAAAAAAAAgAAAAAAAAAAAAAAAAAPC/"
				],
				[
					22,
					1,
					"insert",
					{
						"characters": " against"
					},
					"CAAAACgAAAAAAAAAKQAAAAAAAAAAAAAAKQAAAAAAAAAqAAAAAAAAAAAAAAAqAAAAAAAAACsAAAAAAAAAAAAAACsAAAAAAAAALAAAAAAAAAAAAAAALAAAAAAAAAAtAAAAAAAAAAAAAAAtAAAAAAAAAC4AAAAAAAAAAAAAAC4AAAAAAAAALwAAAAAAAAAAAAAALwAAAAAAAAAwAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAKAAAAAAAAAAoAAAAAAAAAAAAAAAAAPC/"
				],
				[
					23,
					1,
					"insert",
					{
						"characters": " query"
					},
					"BgAAADAAAAAAAAAAMQAAAAAAAAAAAAAAMQAAAAAAAAAyAAAAAAAAAAAAAAAyAAAAAAAAADMAAAAAAAAAAAAAADMAAAAAAAAANAAAAAAAAAAAAAAANAAAAAAAAAA1AAAAAAAAAAAAAAA1AAAAAAAAADYAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAMAAAAAAAAAAwAAAAAAAAAAAAAAAAAPC/"
				],
				[
					24,
					1,
					"insert",
					{
						"characters": " structures"
					},
					"CwAAADYAAAAAAAAANwAAAAAAAAAAAAAANwAAAAAAAAA4AAAAAAAAAAAAAAA4AAAAAAAAADkAAAAAAAAAAAAAADkAAAAAAAAAOgAAAAAAAAAAAAAAOgAAAAAAAAA7AAAAAAAAAAAAAAA7AAAAAAAAADwAAAAAAAAAAAAAADwAAAAAAAAAPQAAAAAAAAAAAAAAPQAAAAAAAAA+AAAAAAAAAAAAAAA+AAAAAAAAAD8AAAAAAAAAAAAAAD8AAAAAAAAAQAAAAAAAAAAAAAAAQAAAAAAAAABBAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAANgAAAAAAAAA2AAAAAAAAAAAAAAAAAPC/"
				],
				[
					25,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAEEAAAAAAAAAQgAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAQQAAAAAAAABBAAAAAAAAAAAAAAAAAPC/"
				],
				[
					28,
					9,
					"left_delete",
					null,
					"CQAAAGIIAAAAAAAAYggAAAAAAAABAAAAImEIAAAAAAAAYQgAAAAAAAABAAAAa2AIAAAAAAAAYAgAAAAAAAABAAAAZV8IAAAAAAAAXwgAAAAAAAABAAAAZV4IAAAAAAAAXggAAAAAAAABAAAAc10IAAAAAAAAXQgAAAAAAAABAAAAZFwIAAAAAAAAXAgAAAAAAAABAAAAbFsIAAAAAAAAWwgAAAAAAAABAAAAb1oIAAAAAAAAWggAAAAAAAABAAAAZg",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAYwgAAAAAAABjCAAAAAAAAAAAAAAAAPC/"
				],
				[
					29,
					1,
					"insert",
					{
						"characters": "s"
					},
					"AQAAAFoIAAAAAAAAWwgAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAWggAAAAAAABaCAAAAAAAAAAAAAAAAPC/"
				],
				[
					30,
					2,
					"left_delete",
					null,
					"AgAAAFoIAAAAAAAAWggAAAAAAAABAAAAc1kIAAAAAAAAWQgAAAAAAAABAAAAIg",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAWwgAAAAAAABbCAAAAAAAAAAAAAAAAPC/"
				],
				[
					31,
					1,
					"insert",
					{
						"characters": "self.foldseek"
					},
					"DQAAAFkIAAAAAAAAWggAAAAAAAAAAAAAWggAAAAAAABbCAAAAAAAAAAAAABbCAAAAAAAAFwIAAAAAAAAAAAAAFwIAAAAAAAAXQgAAAAAAAAAAAAAXQgAAAAAAABeCAAAAAAAAAAAAABeCAAAAAAAAF8IAAAAAAAAAAAAAF8IAAAAAAAAYAgAAAAAAAAAAAAAYAgAAAAAAABhCAAAAAAAAAAAAABhCAAAAAAAAGIIAAAAAAAAAAAAAGIIAAAAAAAAYwgAAAAAAAAAAAAAYwgAAAAAAABkCAAAAAAAAAAAAABkCAAAAAAAAGUIAAAAAAAAAAAAAGUIAAAAAAAAZggAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAWQgAAAAAAABZCAAAAAAAAAAAAAAAAPC/"
				],
				[
					32,
					1,
					"insert",
					{
						"characters": "_binary"
					},
					"BwAAAGYIAAAAAAAAZwgAAAAAAAAAAAAAZwgAAAAAAABoCAAAAAAAAAAAAABoCAAAAAAAAGkIAAAAAAAAAAAAAGkIAAAAAAAAaggAAAAAAAAAAAAAaggAAAAAAABrCAAAAAAAAAAAAABrCAAAAAAAAGwIAAAAAAAAAAAAAGwIAAAAAAAAbQgAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAZggAAAAAAABmCAAAAAAAAAAAAAAAAPC/"
				],
				[
					35,
					1,
					"insert",
					{
						"characters": "\nself.fold"
					},
					"CwAAAMsCAAAAAAAAzAIAAAAAAAAAAAAAzAIAAAAAAADUAgAAAAAAAAAAAADUAgAAAAAAANUCAAAAAAAAAAAAANUCAAAAAAAA1gIAAAAAAAAAAAAA1gIAAAAAAADXAgAAAAAAAAAAAADXAgAAAAAAANgCAAAAAAAAAAAAANgCAAAAAAAA2QIAAAAAAAAAAAAA2QIAAAAAAADaAgAAAAAAAAAAAADaAgAAAAAAANsCAAAAAAAAAAAAANsCAAAAAAAA3AIAAAAAAAAAAAAA3AIAAAAAAADdAgAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAywIAAAAAAADLAgAAAAAAAAAAAAAAAPC/"
				],
				[
					36,
					1,
					"insert_completion",
					{
						"completion": "foldseek_tmp",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "foldseek_tmp"
					},
					"AgAAANkCAAAAAAAA2QIAAAAAAAAEAAAAZm9sZNkCAAAAAAAA5QIAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA3QIAAAAAAADdAgAAAAAAAAAAAAAAAPC/"
				],
				[
					37,
					1,
					"insert",
					{
						"characters": "\t"
					},
					"AQAAAOUCAAAAAAAA6AIAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA5QIAAAAAAADlAgAAAAAAAAAAAAAAAPC/"
				],
				[
					38,
					5,
					"left_delete",
					null,
					"BQAAAOcCAAAAAAAA5wIAAAAAAAABAAAAIOYCAAAAAAAA5gIAAAAAAAABAAAAIOUCAAAAAAAA5QIAAAAAAAABAAAAIOQCAAAAAAAA5AIAAAAAAAABAAAAcOMCAAAAAAAA4wIAAAAAAAABAAAAbQ",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA6AIAAAAAAADoAgAAAAAAAAAAAAAAAPC/"
				],
				[
					39,
					1,
					"insert",
					{
						"characters": "b"
					},
					"AQAAAOMCAAAAAAAA5AIAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA4wIAAAAAAADjAgAAAAAAAAAAAAAAAPC/"
				],
				[
					40,
					2,
					"left_delete",
					null,
					"AgAAAOMCAAAAAAAA4wIAAAAAAAABAAAAYuICAAAAAAAA4gIAAAAAAAABAAAAdA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA5AIAAAAAAADkAgAAAAAAAAAAAAAAAPC/"
				],
				[
					41,
					1,
					"insert",
					{
						"characters": "binary"
					},
					"BgAAAOICAAAAAAAA4wIAAAAAAAAAAAAA4wIAAAAAAADkAgAAAAAAAAAAAADkAgAAAAAAAOUCAAAAAAAAAAAAAOUCAAAAAAAA5gIAAAAAAAAAAAAA5gIAAAAAAADnAgAAAAAAAAAAAADnAgAAAAAAAOgCAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA4gIAAAAAAADiAgAAAAAAAAAAAAAAAPC/"
				],
				[
					42,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAAOgCAAAAAAAA6QIAAAAAAAAAAAAA6QIAAAAAAADqAgAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA6AIAAAAAAADoAgAAAAAAAAAAAAAAAPC/"
				],
				[
					43,
					1,
					"insert",
					{
						"characters": " config.get"
					},
					"CwAAAOoCAAAAAAAA6wIAAAAAAAAAAAAA6wIAAAAAAADsAgAAAAAAAAAAAADsAgAAAAAAAO0CAAAAAAAAAAAAAO0CAAAAAAAA7gIAAAAAAAAAAAAA7gIAAAAAAADvAgAAAAAAAAAAAADvAgAAAAAAAPACAAAAAAAAAAAAAPACAAAAAAAA8QIAAAAAAAAAAAAA8QIAAAAAAADyAgAAAAAAAAAAAADyAgAAAAAAAPMCAAAAAAAAAAAAAPMCAAAAAAAA9AIAAAAAAAAAAAAA9AIAAAAAAAD1AgAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA6gIAAAAAAADqAgAAAAAAAAAAAAAAAPC/"
				],
				[
					44,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAPUCAAAAAAAA9wIAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA9QIAAAAAAAD1AgAAAAAAAAAAAAAAAPC/"
				],
				[
					45,
					1,
					"insert_snippet",
					{
						"contents": "'$0'"
					},
					"AQAAAPYCAAAAAAAA+AIAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA9gIAAAAAAAD2AgAAAAAAAAAAAAAAAPC/"
				],
				[
					46,
					1,
					"insert",
					{
						"characters": "fod"
					},
					"AwAAAPcCAAAAAAAA+AIAAAAAAAAAAAAA+AIAAAAAAAD5AgAAAAAAAAAAAAD5AgAAAAAAAPoCAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA9wIAAAAAAAD3AgAAAAAAAAAAAAAAAPC/"
				],
				[
					47,
					1,
					"left_delete",
					null,
					"AQAAAPkCAAAAAAAA+QIAAAAAAAABAAAAZA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA+gIAAAAAAAD6AgAAAAAAAAAAAAAAAPC/"
				],
				[
					48,
					1,
					"insert",
					{
						"characters": "ldseek_binary"
					},
					"DQAAAPkCAAAAAAAA+gIAAAAAAAAAAAAA+gIAAAAAAAD7AgAAAAAAAAAAAAD7AgAAAAAAAPwCAAAAAAAAAAAAAPwCAAAAAAAA/QIAAAAAAAAAAAAA/QIAAAAAAAD+AgAAAAAAAAAAAAD+AgAAAAAAAP8CAAAAAAAAAAAAAP8CAAAAAAAAAAMAAAAAAAAAAAAAAAMAAAAAAAABAwAAAAAAAAAAAAABAwAAAAAAAAIDAAAAAAAAAAAAAAIDAAAAAAAAAwMAAAAAAAAAAAAAAwMAAAAAAAAEAwAAAAAAAAAAAAAEAwAAAAAAAAUDAAAAAAAAAAAAAAUDAAAAAAAABgMAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA+QIAAAAAAAD5AgAAAAAAAAAAAAAAAPC/"
				],
				[
					50,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAAcDAAAAAAAACAMAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAABwMAAAAAAAAHAwAAAAAAAAAAAAAAAPC/"
				],
				[
					51,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAAgDAAAAAAAACQMAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAACAMAAAAAAAAIAwAAAAAAAAAAAAAAAPC/"
				],
				[
					52,
					1,
					"insert_snippet",
					{
						"contents": "'$0'"
					},
					"AQAAAAkDAAAAAAAACwMAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAACQMAAAAAAAAJAwAAAAAAAAAAAAAAAPC/"
				],
				[
					53,
					1,
					"insert",
					{
						"characters": "ofl"
					},
					"AwAAAAoDAAAAAAAACwMAAAAAAAAAAAAACwMAAAAAAAAMAwAAAAAAAAAAAAAMAwAAAAAAAA0DAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAACgMAAAAAAAAKAwAAAAAAAAAAAAAAAPC/"
				],
				[
					54,
					3,
					"left_delete",
					null,
					"AwAAAAwDAAAAAAAADAMAAAAAAAABAAAAbAsDAAAAAAAACwMAAAAAAAABAAAAZgoDAAAAAAAACgMAAAAAAAABAAAAbw",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAADQMAAAAAAAANAwAAAAAAAAAAAAAAAPC/"
				],
				[
					55,
					1,
					"insert",
					{
						"characters": "foldseek"
					},
					"CAAAAAoDAAAAAAAACwMAAAAAAAAAAAAACwMAAAAAAAAMAwAAAAAAAAAAAAAMAwAAAAAAAA0DAAAAAAAAAAAAAA0DAAAAAAAADgMAAAAAAAAAAAAADgMAAAAAAAAPAwAAAAAAAAAAAAAPAwAAAAAAABADAAAAAAAAAAAAABADAAAAAAAAEQMAAAAAAAAAAAAAEQMAAAAAAAASAwAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAACgMAAAAAAAAKAwAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "steps/hhsearch_runner.py",
			"settings":
			{
				"buffer_size": 5663,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			},
			"undo_stack":
			[
				[
					3,
					1,
					"paste",
					null,
					"AgAAAAAAAAAAAAAAtgAAAAAAAAAAAAAAtgAAAAAAAAC2AAAAAAAAABkAAAAjIyBkcGFtL3N0ZXBzL2hoc2VhcmNoLnB5",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAGQAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				],
				[
					6,
					1,
					"insert",
					{
						"characters": "Wrapp"
					},
					"BgAAABsAAAAAAAAAHAAAAAAAAAAAAAAAHAAAAAAAAAAcAAAAAAAAAJcAAABCYXNlIGNsYXNzIGZvciBEUEFNIHBpcGVsaW5lIHN0ZXBzLgoKVGhpcyBtb2R1bGUgZGVmaW5lcyB0aGUgYWJzdHJhY3QgYmFzZSBjbGFzcyBmb3IgYWxsIHBpcGVsaW5lIHN0ZXBzLApwcm92aWRpbmcgY29tbW9uIGZ1bmN0aW9uYWxpdHkgYW5kIGludGVyZmFjZXMuHAAAAAAAAAAdAAAAAAAAAAAAAAAdAAAAAAAAAB4AAAAAAAAAAAAAAB4AAAAAAAAAHwAAAAAAAAAAAAAAHwAAAAAAAAAgAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAsgAAAAAAAAAbAAAAAAAAAAAAAAAAAPC/"
				],
				[
					7,
					2,
					"left_delete",
					null,
					"AgAAAB8AAAAAAAAAHwAAAAAAAAABAAAAcB4AAAAAAAAAHgAAAAAAAAABAAAAcA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAIAAAAAAAAAAgAAAAAAAAAAAAAAAAAPC/"
				],
				[
					8,
					1,
					"insert",
					{
						"characters": "ps"
					},
					"AgAAAB4AAAAAAAAAHwAAAAAAAAAAAAAAHwAAAAAAAAAgAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAHgAAAAAAAAAeAAAAAAAAAAAAAAAAAPC/"
				],
				[
					9,
					1,
					"insert",
					{
						"characters": " HHSearch"
					},
					"CQAAACAAAAAAAAAAIQAAAAAAAAAAAAAAIQAAAAAAAAAiAAAAAAAAAAAAAAAiAAAAAAAAACMAAAAAAAAAAAAAACMAAAAAAAAAJAAAAAAAAAAAAAAAJAAAAAAAAAAlAAAAAAAAAAAAAAAlAAAAAAAAACYAAAAAAAAAAAAAACYAAAAAAAAAJwAAAAAAAAAAAAAAJwAAAAAAAAAoAAAAAAAAAAAAAAAoAAAAAAAAACkAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAIAAAAAAAAAAgAAAAAAAAAAAAAAAAAPC/"
				],
				[
					10,
					1,
					"insert",
					{
						"characters": " for"
					},
					"BAAAACkAAAAAAAAAKgAAAAAAAAAAAAAAKgAAAAAAAAArAAAAAAAAAAAAAAArAAAAAAAAACwAAAAAAAAAAAAAACwAAAAAAAAALQAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAKQAAAAAAAAApAAAAAAAAAAAAAAAAAPC/"
				],
				[
					11,
					1,
					"insert",
					{
						"characters": " domain"
					},
					"BwAAAC0AAAAAAAAALgAAAAAAAAAAAAAALgAAAAAAAAAvAAAAAAAAAAAAAAAvAAAAAAAAADAAAAAAAAAAAAAAADAAAAAAAAAAMQAAAAAAAAAAAAAAMQAAAAAAAAAyAAAAAAAAAAAAAAAyAAAAAAAAADMAAAAAAAAAAAAAADMAAAAAAAAANAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAALQAAAAAAAAAtAAAAAAAAAAAAAAAAAPC/"
				],
				[
					12,
					1,
					"insert",
					{
						"characters": " dect"
					},
					"BQAAADQAAAAAAAAANQAAAAAAAAAAAAAANQAAAAAAAAA2AAAAAAAAAAAAAAA2AAAAAAAAADcAAAAAAAAAAAAAADcAAAAAAAAAOAAAAAAAAAAAAAAAOAAAAAAAAAA5AAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAANAAAAAAAAAA0AAAAAAAAAAAAAAAAAPC/"
				],
				[
					13,
					2,
					"left_delete",
					null,
					"AgAAADgAAAAAAAAAOAAAAAAAAAABAAAAdDcAAAAAAAAANwAAAAAAAAABAAAAYw",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAOQAAAAAAAAA5AAAAAAAAAAAAAAAAAPC/"
				],
				[
					14,
					1,
					"insert",
					{
						"characters": "tection"
					},
					"BwAAADcAAAAAAAAAOAAAAAAAAAAAAAAAOAAAAAAAAAA5AAAAAAAAAAAAAAA5AAAAAAAAADoAAAAAAAAAAAAAADoAAAAAAAAAOwAAAAAAAAAAAAAAOwAAAAAAAAA8AAAAAAAAAAAAAAA8AAAAAAAAAD0AAAAAAAAAAAAAAD0AAAAAAAAAPgAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAANwAAAAAAAAA3AAAAAAAAAAAAAAAAAPC/"
				],
				[
					19,
					1,
					"insert",
					{
						"characters": "\n\nself.h"
					},
					"CwAAAL0CAAAAAAAAvgIAAAAAAAAAAAAAvgIAAAAAAADGAgAAAAAAAAAAAADGAgAAAAAAAMcCAAAAAAAAAAAAAMcCAAAAAAAAzwIAAAAAAAAAAAAAvgIAAAAAAAC+AgAAAAAAAAgAAAAgICAgICAgIMcCAAAAAAAAyAIAAAAAAAAAAAAAyAIAAAAAAADJAgAAAAAAAAAAAADJAgAAAAAAAMoCAAAAAAAAAAAAAMoCAAAAAAAAywIAAAAAAAAAAAAAywIAAAAAAADMAgAAAAAAAAAAAADMAgAAAAAAAM0CAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAvQIAAAAAAAC9AgAAAAAAAAAAAAAAAPC/"
				],
				[
					20,
					1,
					"insert",
					{
						"characters": "hblits_binary"
					},
					"DQAAAM0CAAAAAAAAzgIAAAAAAAAAAAAAzgIAAAAAAADPAgAAAAAAAAAAAADPAgAAAAAAANACAAAAAAAAAAAAANACAAAAAAAA0QIAAAAAAAAAAAAA0QIAAAAAAADSAgAAAAAAAAAAAADSAgAAAAAAANMCAAAAAAAAAAAAANMCAAAAAAAA1AIAAAAAAAAAAAAA1AIAAAAAAADVAgAAAAAAAAAAAADVAgAAAAAAANYCAAAAAAAAAAAAANYCAAAAAAAA1wIAAAAAAAAAAAAA1wIAAAAAAADYAgAAAAAAAAAAAADYAgAAAAAAANkCAAAAAAAAAAAAANkCAAAAAAAA2gIAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAzQIAAAAAAADNAgAAAAAAAAAAAAAAAPC/"
				],
				[
					21,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAANoCAAAAAAAA2wIAAAAAAAAAAAAA2wIAAAAAAADcAgAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA2gIAAAAAAADaAgAAAAAAAAAAAAAAAPC/"
				],
				[
					22,
					1,
					"insert",
					{
						"characters": " config."
					},
					"CAAAANwCAAAAAAAA3QIAAAAAAAAAAAAA3QIAAAAAAADeAgAAAAAAAAAAAADeAgAAAAAAAN8CAAAAAAAAAAAAAN8CAAAAAAAA4AIAAAAAAAAAAAAA4AIAAAAAAADhAgAAAAAAAAAAAADhAgAAAAAAAOICAAAAAAAAAAAAAOICAAAAAAAA4wIAAAAAAAAAAAAA4wIAAAAAAADkAgAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA3AIAAAAAAADcAgAAAAAAAAAAAAAAAPC/"
				],
				[
					23,
					1,
					"insert",
					{
						"characters": "get"
					},
					"AwAAAOQCAAAAAAAA5QIAAAAAAAAAAAAA5QIAAAAAAADmAgAAAAAAAAAAAADmAgAAAAAAAOcCAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA5AIAAAAAAADkAgAAAAAAAAAAAAAAAPC/"
				],
				[
					24,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAOcCAAAAAAAA6QIAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA5wIAAAAAAADnAgAAAAAAAAAAAAAAAPC/"
				],
				[
					25,
					1,
					"insert_snippet",
					{
						"contents": "'$0'"
					},
					"AQAAAOgCAAAAAAAA6gIAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA6AIAAAAAAADoAgAAAAAAAAAAAAAAAPC/"
				],
				[
					26,
					1,
					"insert",
					{
						"characters": "hhblits."
					},
					"CAAAAOkCAAAAAAAA6gIAAAAAAAAAAAAA6gIAAAAAAADrAgAAAAAAAAAAAADrAgAAAAAAAOwCAAAAAAAAAAAAAOwCAAAAAAAA7QIAAAAAAAAAAAAA7QIAAAAAAADuAgAAAAAAAAAAAADuAgAAAAAAAO8CAAAAAAAAAAAAAO8CAAAAAAAA8AIAAAAAAAAAAAAA8AIAAAAAAADxAgAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA6QIAAAAAAADpAgAAAAAAAAAAAAAAAPC/"
				],
				[
					27,
					1,
					"left_delete",
					null,
					"AQAAAPACAAAAAAAA8AIAAAAAAAABAAAALg",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA8QIAAAAAAADxAgAAAAAAAAAAAAAAAPC/"
				],
				[
					28,
					1,
					"insert",
					{
						"characters": "_binary"
					},
					"BwAAAPACAAAAAAAA8QIAAAAAAAAAAAAA8QIAAAAAAADyAgAAAAAAAAAAAADyAgAAAAAAAPMCAAAAAAAAAAAAAPMCAAAAAAAA9AIAAAAAAAAAAAAA9AIAAAAAAAD1AgAAAAAAAAAAAAD1AgAAAAAAAPYCAAAAAAAAAAAAAPYCAAAAAAAA9wIAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA8AIAAAAAAADwAgAAAAAAAAAAAAAAAPC/"
				],
				[
					30,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAPgCAAAAAAAA+QIAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA+AIAAAAAAAD4AgAAAAAAAAAAAAAAAPC/"
				],
				[
					31,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAPkCAAAAAAAA+gIAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA+QIAAAAAAAD5AgAAAAAAAAAAAAAAAPC/"
				],
				[
					32,
					1,
					"insert_snippet",
					{
						"contents": "'$0'"
					},
					"AQAAAPoCAAAAAAAA/AIAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA+gIAAAAAAAD6AgAAAAAAAAAAAAAAAPC/"
				],
				[
					33,
					1,
					"insert",
					{
						"characters": "hhblits"
					},
					"BwAAAPsCAAAAAAAA/AIAAAAAAAAAAAAA/AIAAAAAAAD9AgAAAAAAAAAAAAD9AgAAAAAAAP4CAAAAAAAAAAAAAP4CAAAAAAAA/wIAAAAAAAAAAAAA/wIAAAAAAAAAAwAAAAAAAAAAAAAAAwAAAAAAAAEDAAAAAAAAAAAAAAEDAAAAAAAAAgMAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA+wIAAAAAAAD7AgAAAAAAAAAAAAAAAPC/"
				],
				[
					35,
					1,
					"insert",
					{
						"characters": "\nself.uniref_"
					},
					"DgAAAAQDAAAAAAAABQMAAAAAAAAAAAAABQMAAAAAAAANAwAAAAAAAAAAAAANAwAAAAAAAA4DAAAAAAAAAAAAAA4DAAAAAAAADwMAAAAAAAAAAAAADwMAAAAAAAAQAwAAAAAAAAAAAAAQAwAAAAAAABEDAAAAAAAAAAAAABEDAAAAAAAAEgMAAAAAAAAAAAAAEgMAAAAAAAATAwAAAAAAAAAAAAATAwAAAAAAABQDAAAAAAAAAAAAABQDAAAAAAAAFQMAAAAAAAAAAAAAFQMAAAAAAAAWAwAAAAAAAAAAAAAWAwAAAAAAABcDAAAAAAAAAAAAABcDAAAAAAAAGAMAAAAAAAAAAAAAGAMAAAAAAAAZAwAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAABAMAAAAAAAAEAwAAAAAAAAAAAAAAAPC/"
				],
				[
					36,
					1,
					"insert",
					{
						"characters": "db"
					},
					"AgAAABkDAAAAAAAAGgMAAAAAAAAAAAAAGgMAAAAAAAAbAwAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAGQMAAAAAAAAZAwAAAAAAAAAAAAAAAPC/"
				],
				[
					37,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAABsDAAAAAAAAHAMAAAAAAAAAAAAAHAMAAAAAAAAdAwAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAGwMAAAAAAAAbAwAAAAAAAAAAAAAAAPC/"
				],
				[
					38,
					1,
					"insert",
					{
						"characters": " config.get"
					},
					"CwAAAB0DAAAAAAAAHgMAAAAAAAAAAAAAHgMAAAAAAAAfAwAAAAAAAAAAAAAfAwAAAAAAACADAAAAAAAAAAAAACADAAAAAAAAIQMAAAAAAAAAAAAAIQMAAAAAAAAiAwAAAAAAAAAAAAAiAwAAAAAAACMDAAAAAAAAAAAAACMDAAAAAAAAJAMAAAAAAAAAAAAAJAMAAAAAAAAlAwAAAAAAAAAAAAAlAwAAAAAAACYDAAAAAAAAAAAAACYDAAAAAAAAJwMAAAAAAAAAAAAAJwMAAAAAAAAoAwAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAHQMAAAAAAAAdAwAAAAAAAAAAAAAAAPC/"
				],
				[
					39,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAACgDAAAAAAAAKgMAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAKAMAAAAAAAAoAwAAAAAAAAAAAAAAAPC/"
				],
				[
					40,
					1,
					"insert_snippet",
					{
						"contents": "'$0'"
					},
					"AQAAACkDAAAAAAAAKwMAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAKQMAAAAAAAApAwAAAAAAAAAAAAAAAPC/"
				],
				[
					41,
					1,
					"insert",
					{
						"characters": "unir"
					},
					"BAAAACoDAAAAAAAAKwMAAAAAAAAAAAAAKwMAAAAAAAAsAwAAAAAAAAAAAAAsAwAAAAAAAC0DAAAAAAAAAAAAAC0DAAAAAAAALgMAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAKgMAAAAAAAAqAwAAAAAAAAAAAAAAAPC/"
				],
				[
					42,
					1,
					"insert",
					{
						"characters": "ef_db"
					},
					"BQAAAC4DAAAAAAAALwMAAAAAAAAAAAAALwMAAAAAAAAwAwAAAAAAAAAAAAAwAwAAAAAAADEDAAAAAAAAAAAAADEDAAAAAAAAMgMAAAAAAAAAAAAAMgMAAAAAAAAzAwAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAALgMAAAAAAAAuAwAAAAAAAAAAAAAAAPC/"
				],
				[
					44,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAADQDAAAAAAAANQMAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAANAMAAAAAAAA0AwAAAAAAAAAAAAAAAPC/"
				],
				[
					45,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAADUDAAAAAAAANgMAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAANQMAAAAAAAA1AwAAAAAAAAAAAAAAAPC/"
				],
				[
					46,
					1,
					"insert_snippet",
					{
						"contents": "'$0'"
					},
					"AQAAADYDAAAAAAAAOAMAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAANgMAAAAAAAA2AwAAAAAAAAAAAAAAAPC/"
				],
				[
					47,
					1,
					"insert",
					{
						"characters": "Uni"
					},
					"AwAAADcDAAAAAAAAOAMAAAAAAAAAAAAAOAMAAAAAAAA5AwAAAAAAAAAAAAA5AwAAAAAAADoDAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAANwMAAAAAAAA3AwAAAAAAAAAAAAAAAPC/"
				],
				[
					48,
					1,
					"insert_completion",
					{
						"completion": "UniRef30_2022_02",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "UniRef30_2022_02"
					},
					"AgAAADcDAAAAAAAANwMAAAAAAAADAAAAVW5pNwMAAAAAAABHAwAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAOgMAAAAAAAA6AwAAAAAAAAAAAAAAAPC/"
				],
				[
					58,
					9,
					"left_delete",
					null,
					"CQAAANMHAAAAAAAA0wcAAAAAAAABAAAAItIHAAAAAAAA0gcAAAAAAAABAAAAc9EHAAAAAAAA0QcAAAAAAAABAAAAdNAHAAAAAAAA0AcAAAAAAAABAAAAac8HAAAAAAAAzwcAAAAAAAABAAAAbM4HAAAAAAAAzgcAAAAAAAABAAAAYs0HAAAAAAAAzQcAAAAAAAABAAAAaMwHAAAAAAAAzAcAAAAAAAABAAAAaMsHAAAAAAAAywcAAAAAAAABAAAAIg",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA1AcAAAAAAADUBwAAAAAAAAAAAAAAAPC/"
				],
				[
					59,
					1,
					"insert",
					{
						"characters": "self.hhb"
					},
					"CAAAAMsHAAAAAAAAzAcAAAAAAAAAAAAAzAcAAAAAAADNBwAAAAAAAAAAAADNBwAAAAAAAM4HAAAAAAAAAAAAAM4HAAAAAAAAzwcAAAAAAAAAAAAAzwcAAAAAAADQBwAAAAAAAAAAAADQBwAAAAAAANEHAAAAAAAAAAAAANEHAAAAAAAA0gcAAAAAAAAAAAAA0gcAAAAAAADTBwAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAywcAAAAAAADLBwAAAAAAAAAAAAAAAPC/"
				],
				[
					60,
					1,
					"insert_completion",
					{
						"completion": "hhblits_binary",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "hhblits_binary"
					},
					"AgAAANAHAAAAAAAA0AcAAAAAAAADAAAAaGhi0AcAAAAAAADeBwAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA0wcAAAAAAADTBwAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "steps/iterative_dali_runner.py",
			"settings":
			{
				"buffer_size": 12581,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			},
			"undo_stack":
			[
				[
					3,
					1,
					"insert",
					{
						"characters": "\nself.gemmi"
					},
					"DAAAAM4DAAAAAAAAzwMAAAAAAAAAAAAAzwMAAAAAAADXAwAAAAAAAAAAAADXAwAAAAAAANgDAAAAAAAAAAAAANgDAAAAAAAA2QMAAAAAAAAAAAAA2QMAAAAAAADaAwAAAAAAAAAAAADaAwAAAAAAANsDAAAAAAAAAAAAANsDAAAAAAAA3AMAAAAAAAAAAAAA3AMAAAAAAADdAwAAAAAAAAAAAADdAwAAAAAAAN4DAAAAAAAAAAAAAN4DAAAAAAAA3wMAAAAAAAAAAAAA3wMAAAAAAADgAwAAAAAAAAAAAADgAwAAAAAAAOEDAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAzgMAAAAAAADOAwAAAAAAAAAAAAAAAPC/"
				],
				[
					4,
					1,
					"insert",
					{
						"characters": "_binary"
					},
					"BwAAAOEDAAAAAAAA4gMAAAAAAAAAAAAA4gMAAAAAAADjAwAAAAAAAAAAAADjAwAAAAAAAOQDAAAAAAAAAAAAAOQDAAAAAAAA5QMAAAAAAAAAAAAA5QMAAAAAAADmAwAAAAAAAAAAAADmAwAAAAAAAOcDAAAAAAAAAAAAAOcDAAAAAAAA6AMAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA4QMAAAAAAADhAwAAAAAAAAAAAAAAAPC/"
				],
				[
					5,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAAOgDAAAAAAAA6QMAAAAAAAAAAAAA6QMAAAAAAADqAwAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA6AMAAAAAAADoAwAAAAAAAAAAAAAAAPC/"
				],
				[
					6,
					1,
					"insert",
					{
						"characters": " config.get"
					},
					"CwAAAOoDAAAAAAAA6wMAAAAAAAAAAAAA6wMAAAAAAADsAwAAAAAAAAAAAADsAwAAAAAAAO0DAAAAAAAAAAAAAO0DAAAAAAAA7gMAAAAAAAAAAAAA7gMAAAAAAADvAwAAAAAAAAAAAADvAwAAAAAAAPADAAAAAAAAAAAAAPADAAAAAAAA8QMAAAAAAAAAAAAA8QMAAAAAAADyAwAAAAAAAAAAAADyAwAAAAAAAPMDAAAAAAAAAAAAAPMDAAAAAAAA9AMAAAAAAAAAAAAA9AMAAAAAAAD1AwAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA6gMAAAAAAADqAwAAAAAAAAAAAAAAAPC/"
				],
				[
					7,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAPUDAAAAAAAA9wMAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA9QMAAAAAAAD1AwAAAAAAAAAAAAAAAPC/"
				],
				[
					8,
					1,
					"insert_snippet",
					{
						"contents": "'$0'"
					},
					"AQAAAPYDAAAAAAAA+AMAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA9gMAAAAAAAD2AwAAAAAAAAAAAAAAAPC/"
				],
				[
					9,
					1,
					"insert",
					{
						"characters": "gemmi_"
					},
					"BgAAAPcDAAAAAAAA+AMAAAAAAAAAAAAA+AMAAAAAAAD5AwAAAAAAAAAAAAD5AwAAAAAAAPoDAAAAAAAAAAAAAPoDAAAAAAAA+wMAAAAAAAAAAAAA+wMAAAAAAAD8AwAAAAAAAAAAAAD8AwAAAAAAAP0DAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA9wMAAAAAAAD3AwAAAAAAAAAAAAAAAPC/"
				],
				[
					10,
					1,
					"insert_completion",
					{
						"completion": "gemmi_binary",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "gemmi_binary"
					},
					"AgAAAPcDAAAAAAAA9wMAAAAAAAAGAAAAZ2VtbWlf9wMAAAAAAAADBAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA/QMAAAAAAAD9AwAAAAAAAAAAAAAAAPC/"
				],
				[
					12,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAAQEAAAAAAAABQQAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAABAQAAAAAAAAEBAAAAAAAAAAAAAAAAPC/"
				],
				[
					13,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAAUEAAAAAAAABgQAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAABQQAAAAAAAAFBAAAAAAAAAAAAAAAAPC/"
				],
				[
					14,
					1,
					"insert_snippet",
					{
						"contents": "'$0'"
					},
					"AQAAAAYEAAAAAAAACAQAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAABgQAAAAAAAAGBAAAAAAAAAAAAAAAAPC/"
				],
				[
					15,
					1,
					"insert",
					{
						"characters": "gemmi"
					},
					"BQAAAAcEAAAAAAAACAQAAAAAAAAAAAAACAQAAAAAAAAJBAAAAAAAAAAAAAAJBAAAAAAAAAoEAAAAAAAAAAAAAAoEAAAAAAAACwQAAAAAAAAAAAAACwQAAAAAAAAMBAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAABwQAAAAAAAAHBAAAAAAAAAAAAAAAAPC/"
				],
				[
					21,
					5,
					"left_delete",
					null,
					"BQAAAF4UAAAAAAAAXhQAAAAAAAABAAAAaV0UAAAAAAAAXRQAAAAAAAABAAAAbVwUAAAAAAAAXBQAAAAAAAABAAAAbVsUAAAAAAAAWxQAAAAAAAABAAAAZVoUAAAAAAAAWhQAAAAAAAABAAAAZw",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAXxQAAAAAAABfFAAAAAAAAAAAAAAAAPC/"
				],
				[
					22,
					1,
					"insert",
					{
						"characters": "self.b"
					},
					"BgAAAFoUAAAAAAAAWxQAAAAAAAAAAAAAWxQAAAAAAABcFAAAAAAAAAAAAABcFAAAAAAAAF0UAAAAAAAAAAAAAF0UAAAAAAAAXhQAAAAAAAAAAAAAXhQAAAAAAABfFAAAAAAAAAAAAABfFAAAAAAAAGAUAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAWhQAAAAAAABaFAAAAAAAAAAAAAAAAPC/"
				],
				[
					23,
					6,
					"left_delete",
					null,
					"BgAAAF8UAAAAAAAAXxQAAAAAAAABAAAAYl4UAAAAAAAAXhQAAAAAAAABAAAALl0UAAAAAAAAXRQAAAAAAAABAAAAZlwUAAAAAAAAXBQAAAAAAAABAAAAbFsUAAAAAAAAWxQAAAAAAAABAAAAZVoUAAAAAAAAWhQAAAAAAAABAAAAcw",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAYBQAAAAAAABgFAAAAAAAAAAAAAAAAPC/"
				],
				[
					24,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Delete Left Right.sublime-macro"
					},
					"AgAAAFkUAAAAAAAAWRQAAAAAAAABAAAAIlkUAAAAAAAAWRQAAAAAAAABAAAAIg",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAWhQAAAAAAABaFAAAAAAAAAAAAAAAAPC/"
				],
				[
					27,
					1,
					"insert",
					{
						"characters": "self.gemmi_b"
					},
					"DAAAAFkUAAAAAAAAWhQAAAAAAAAAAAAAWhQAAAAAAABbFAAAAAAAAAAAAABbFAAAAAAAAFwUAAAAAAAAAAAAAFwUAAAAAAAAXRQAAAAAAAAAAAAAXRQAAAAAAABeFAAAAAAAAAAAAABeFAAAAAAAAF8UAAAAAAAAAAAAAF8UAAAAAAAAYBQAAAAAAAAAAAAAYBQAAAAAAABhFAAAAAAAAAAAAABhFAAAAAAAAGIUAAAAAAAAAAAAAGIUAAAAAAAAYxQAAAAAAAAAAAAAYxQAAAAAAABkFAAAAAAAAAAAAABkFAAAAAAAAGUUAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAWRQAAAAAAABZFAAAAAAAAAAAAAAAAPC/"
				],
				[
					28,
					1,
					"insert",
					{
						"characters": "inr"
					},
					"AwAAAGUUAAAAAAAAZhQAAAAAAAAAAAAAZhQAAAAAAABnFAAAAAAAAAAAAABnFAAAAAAAAGgUAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAZRQAAAAAAABlFAAAAAAAAAAAAAAAAPC/"
				],
				[
					29,
					1,
					"left_delete",
					null,
					"AQAAAGcUAAAAAAAAZxQAAAAAAAABAAAAcg",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAaBQAAAAAAABoFAAAAAAAAAAAAAAAAPC/"
				],
				[
					30,
					1,
					"insert",
					{
						"characters": "ary"
					},
					"AwAAAGcUAAAAAAAAaBQAAAAAAAAAAAAAaBQAAAAAAABpFAAAAAAAAAAAAABpFAAAAAAAAGoUAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAZxQAAAAAAABnFAAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "steps/parse_domains.py",
			"settings":
			{
				"buffer_size": 15417,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "steps/sequence_to_ecod_mapper.py",
			"settings":
			{
				"buffer_size": 13288,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			},
			"undo_stack":
			[
				[
					1,
					1,
					"insert",
					{
						"characters": "r"
					},
					"AQAAAAAAAAAAAAAAAQAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				],
				[
					4,
					1,
					"insert",
					{
						"characters": "Sequence"
					},
					"CAAAAFYAAAAAAAAAVwAAAAAAAAAAAAAAVwAAAAAAAABYAAAAAAAAAAAAAABYAAAAAAAAAFkAAAAAAAAAAAAAAFkAAAAAAAAAWgAAAAAAAAAAAAAAWgAAAAAAAABbAAAAAAAAAAAAAABbAAAAAAAAAFwAAAAAAAAAAAAAAFwAAAAAAAAAXQAAAAAAAAAAAAAAXQAAAAAAAABeAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAVgAAAAAAAABWAAAAAAAAAAAAAAAAAPC/"
				],
				[
					5,
					1,
					"insert",
					{
						"characters": "To"
					},
					"AgAAAF4AAAAAAAAAXwAAAAAAAAAAAAAAXwAAAAAAAABgAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAXgAAAAAAAABeAAAAAAAAAAAAAAAAAPC/"
				],
				[
					12,
					1,
					"paste",
					null,
					"AgAAAAAAAAAAAAAAtgAAAAAAAAAAAAAAtgAAAAAAAAC2AAAAAAAAABYAAAByIyMgZHBhbS9zdGVwcy9lY29kLnB5",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAFgAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				],
				[
					15,
					2,
					"left_delete",
					null,
					"AgAAABwAAAAAAAAAHAAAAAAAAACWAAAAYXNlIGNsYXNzIGZvciBEUEFNIHBpcGVsaW5lIHN0ZXBzLgoKVGhpcyBtb2R1bGUgZGVmaW5lcyB0aGUgYWJzdHJhY3QgYmFzZSBjbGFzcyBmb3IgYWxsIHBpcGVsaW5lIHN0ZXBzLApwcm92aWRpbmcgY29tbW9uIGZ1bmN0aW9uYWxpdHkgYW5kIGludGVyZmFjZXMuGwAAAAAAAAAbAAAAAAAAAAEAAABC",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAsgAAAAAAAAAcAAAAAAAAAAAAAAAAAPC/"
				],
				[
					16,
					1,
					"insert",
					{
						"characters": "For"
					},
					"AwAAABsAAAAAAAAAHAAAAAAAAAAAAAAAHAAAAAAAAAAdAAAAAAAAAAAAAAAdAAAAAAAAAB4AAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAGwAAAAAAAAAbAAAAAAAAAAAAAAAAAPC/"
				],
				[
					17,
					1,
					"insert",
					{
						"characters": " mapping"
					},
					"CAAAAB4AAAAAAAAAHwAAAAAAAAAAAAAAHwAAAAAAAAAgAAAAAAAAAAAAAAAgAAAAAAAAACEAAAAAAAAAAAAAACEAAAAAAAAAIgAAAAAAAAAAAAAAIgAAAAAAAAAjAAAAAAAAAAAAAAAjAAAAAAAAACQAAAAAAAAAAAAAACQAAAAAAAAAJQAAAAAAAAAAAAAAJQAAAAAAAAAmAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAHgAAAAAAAAAeAAAAAAAAAAAAAAAAAPC/"
				],
				[
					18,
					1,
					"insert",
					{
						"characters": " HHS"
					},
					"BAAAACYAAAAAAAAAJwAAAAAAAAAAAAAAJwAAAAAAAAAoAAAAAAAAAAAAAAAoAAAAAAAAACkAAAAAAAAAAAAAACkAAAAAAAAAKgAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAJgAAAAAAAAAmAAAAAAAAAAAAAAAAAPC/"
				],
				[
					19,
					1,
					"left_delete",
					null,
					"AQAAACkAAAAAAAAAKQAAAAAAAAABAAAAUw",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAKgAAAAAAAAAqAAAAAAAAAAAAAAAAAPC/"
				],
				[
					20,
					1,
					"insert",
					{
						"characters": "search"
					},
					"BgAAACkAAAAAAAAAKgAAAAAAAAAAAAAAKgAAAAAAAAArAAAAAAAAAAAAAAArAAAAAAAAACwAAAAAAAAAAAAAACwAAAAAAAAALQAAAAAAAAAAAAAALQAAAAAAAAAuAAAAAAAAAAAAAAAuAAAAAAAAAC8AAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAKQAAAAAAAAApAAAAAAAAAAAAAAAAAPC/"
				],
				[
					21,
					1,
					"insert",
					{
						"characters": " results"
					},
					"CAAAAC8AAAAAAAAAMAAAAAAAAAAAAAAAMAAAAAAAAAAxAAAAAAAAAAAAAAAxAAAAAAAAADIAAAAAAAAAAAAAADIAAAAAAAAAMwAAAAAAAAAAAAAAMwAAAAAAAAA0AAAAAAAAAAAAAAA0AAAAAAAAADUAAAAAAAAAAAAAADUAAAAAAAAANgAAAAAAAAAAAAAANgAAAAAAAAA3AAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAALwAAAAAAAAAvAAAAAAAAAAAAAAAAAPC/"
				],
				[
					22,
					1,
					"insert",
					{
						"characters": " to"
					},
					"AwAAADcAAAAAAAAAOAAAAAAAAAAAAAAAOAAAAAAAAAA5AAAAAAAAAAAAAAA5AAAAAAAAADoAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAANwAAAAAAAAA3AAAAAAAAAAAAAAAAAPC/"
				],
				[
					23,
					1,
					"insert",
					{
						"characters": " ECOD"
					},
					"BQAAADoAAAAAAAAAOwAAAAAAAAAAAAAAOwAAAAAAAAA8AAAAAAAAAAAAAAA8AAAAAAAAAD0AAAAAAAAAAAAAAD0AAAAAAAAAPgAAAAAAAAAAAAAAPgAAAAAAAAA/AAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAOgAAAAAAAAA6AAAAAAAAAAAAAAAAAPC/"
				],
				[
					24,
					1,
					"insert",
					{
						"characters": " domains"
					},
					"CAAAAD8AAAAAAAAAQAAAAAAAAAAAAAAAQAAAAAAAAABBAAAAAAAAAAAAAABBAAAAAAAAAEIAAAAAAAAAAAAAAEIAAAAAAAAAQwAAAAAAAAAAAAAAQwAAAAAAAABEAAAAAAAAAAAAAABEAAAAAAAAAEUAAAAAAAAAAAAAAEUAAAAAAAAARgAAAAAAAAAAAAAARgAAAAAAAABHAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAPwAAAAAAAAA/AAAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "steps/domain_to_ecod_classifier.py",
			"settings":
			{
				"buffer_size": 17430,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			},
			"undo_stack":
			[
				[
					3,
					1,
					"insert",
					{
						"characters": "Doamin"
					},
					"BwAAAOEAAAAAAAAA4gAAAAAAAAAAAAAA4gAAAAAAAADiAAAAAAAAAAoAAABFQ09ETWFwcGVy4gAAAAAAAADjAAAAAAAAAAAAAADjAAAAAAAAAOQAAAAAAAAAAAAAAOQAAAAAAAAA5QAAAAAAAAAAAAAA5QAAAAAAAADmAAAAAAAAAAAAAADmAAAAAAAAAOcAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA4QAAAAAAAADrAAAAAAAAAAAAAAAAAPC/"
				],
				[
					4,
					4,
					"left_delete",
					null,
					"BAAAAOYAAAAAAAAA5gAAAAAAAAABAAAAbuUAAAAAAAAA5QAAAAAAAAABAAAAaeQAAAAAAAAA5AAAAAAAAAABAAAAbeMAAAAAAAAA4wAAAAAAAAABAAAAYQ",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA5wAAAAAAAADnAAAAAAAAAAAAAAAAAPC/"
				],
				[
					5,
					1,
					"insert",
					{
						"characters": "mainToEcodC"
					},
					"CwAAAOMAAAAAAAAA5AAAAAAAAAAAAAAA5AAAAAAAAADlAAAAAAAAAAAAAADlAAAAAAAAAOYAAAAAAAAAAAAAAOYAAAAAAAAA5wAAAAAAAAAAAAAA5wAAAAAAAADoAAAAAAAAAAAAAADoAAAAAAAAAOkAAAAAAAAAAAAAAOkAAAAAAAAA6gAAAAAAAAAAAAAA6gAAAAAAAADrAAAAAAAAAAAAAADrAAAAAAAAAOwAAAAAAAAAAAAAAOwAAAAAAAAA7QAAAAAAAAAAAAAA7QAAAAAAAADuAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA4wAAAAAAAADjAAAAAAAAAAAAAAAAAPC/"
				],
				[
					6,
					1,
					"insert",
					{
						"characters": "lassifier"
					},
					"CQAAAO4AAAAAAAAA7wAAAAAAAAAAAAAA7wAAAAAAAADwAAAAAAAAAAAAAADwAAAAAAAAAPEAAAAAAAAAAAAAAPEAAAAAAAAA8gAAAAAAAAAAAAAA8gAAAAAAAADzAAAAAAAAAAAAAADzAAAAAAAAAPQAAAAAAAAAAAAAAPQAAAAAAAAA9QAAAAAAAAAAAAAA9QAAAAAAAAD2AAAAAAAAAAAAAAD2AAAAAAAAAPcAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA7gAAAAAAAADuAAAAAAAAAAAAAAAAAPC/"
				],
				[
					11,
					1,
					"insert",
					{
						"characters": "COD"
					},
					"BAAAAOoAAAAAAAAA6wAAAAAAAAAAAAAA6wAAAAAAAADrAAAAAAAAAAMAAABjb2TrAAAAAAAAAOwAAAAAAAAAAAAAAOwAAAAAAAAA7QAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA6gAAAAAAAADtAAAAAAAAAAAAAAAAAPC/"
				],
				[
					20,
					1,
					"paste",
					null,
					"AgAAAAAAAAAAAAAAtgAAAAAAAAAAAAAAtgAAAAAAAAC2AAAAAAAAABgAAAAjIyBkcGFtL3N0ZXBzL21hcHBpbmcucHk",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAGAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				],
				[
					23,
					1,
					"insert",
					{
						"characters": "M"
					},
					"AgAAABsAAAAAAAAAHAAAAAAAAAAAAAAAHAAAAAAAAAAcAAAAAAAAAJcAAABCYXNlIGNsYXNzIGZvciBEUEFNIHBpcGVsaW5lIHN0ZXBzLgoKVGhpcyBtb2R1bGUgZGVmaW5lcyB0aGUgYWJzdHJhY3QgYmFzZSBjbGFzcyBmb3IgYWxsIHBpcGVsaW5lIHN0ZXBzLApwcm92aWRpbmcgY29tbW9uIGZ1bmN0aW9uYWxpdHkgYW5kIGludGVyZmFjZXMu",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAsgAAAAAAAAAbAAAAAAAAAAAAAAAAAPC/"
				],
				[
					24,
					1,
					"left_delete",
					null,
					"AQAAABsAAAAAAAAAGwAAAAAAAAABAAAATQ",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAHAAAAAAAAAAcAAAAAAAAAAAAAAAAAPC/"
				],
				[
					25,
					1,
					"insert",
					{
						"characters": "For"
					},
					"AwAAABsAAAAAAAAAHAAAAAAAAAAAAAAAHAAAAAAAAAAdAAAAAAAAAAAAAAAdAAAAAAAAAB4AAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAGwAAAAAAAAAbAAAAAAAAAAAAAAAAAPC/"
				],
				[
					26,
					1,
					"insert",
					{
						"characters": " domain"
					},
					"BwAAAB4AAAAAAAAAHwAAAAAAAAAAAAAAHwAAAAAAAAAgAAAAAAAAAAAAAAAgAAAAAAAAACEAAAAAAAAAAAAAACEAAAAAAAAAIgAAAAAAAAAAAAAAIgAAAAAAAAAjAAAAAAAAAAAAAAAjAAAAAAAAACQAAAAAAAAAAAAAACQAAAAAAAAAJQAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAHgAAAAAAAAAeAAAAAAAAAAAAAAAAAPC/"
				],
				[
					27,
					1,
					"insert",
					{
						"characters": " assignment"
					},
					"CwAAACUAAAAAAAAAJgAAAAAAAAAAAAAAJgAAAAAAAAAnAAAAAAAAAAAAAAAnAAAAAAAAACgAAAAAAAAAAAAAACgAAAAAAAAAKQAAAAAAAAAAAAAAKQAAAAAAAAAqAAAAAAAAAAAAAAAqAAAAAAAAACsAAAAAAAAAAAAAACsAAAAAAAAALAAAAAAAAAAAAAAALAAAAAAAAAAtAAAAAAAAAAAAAAAtAAAAAAAAAC4AAAAAAAAAAAAAAC4AAAAAAAAALwAAAAAAAAAAAAAALwAAAAAAAAAwAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAJQAAAAAAAAAlAAAAAAAAAAAAAAAAAPC/"
				],
				[
					28,
					1,
					"insert",
					{
						"characters": " to"
					},
					"AwAAADAAAAAAAAAAMQAAAAAAAAAAAAAAMQAAAAAAAAAyAAAAAAAAAAAAAAAyAAAAAAAAADMAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAMAAAAAAAAAAwAAAAAAAAAAAAAAAAAPC/"
				],
				[
					29,
					1,
					"insert",
					{
						"characters": " ECOD"
					},
					"BQAAADMAAAAAAAAANAAAAAAAAAAAAAAANAAAAAAAAAA1AAAAAAAAAAAAAAA1AAAAAAAAADYAAAAAAAAAAAAAADYAAAAAAAAANwAAAAAAAAAAAAAANwAAAAAAAAA4AAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAMwAAAAAAAAAzAAAAAAAAAAAAAAAAAPC/"
				],
				[
					30,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAADgAAAAAAAAAOQAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAOAAAAAAAAAA4AAAAAAAAAAAAAAAAAPC/"
				],
				[
					32,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAABsAAAAAAAAAHAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAGwAAAAAAAAAbAAAAAAAAAAAAAAAAAAAA"
				],
				[
					34,
					1,
					"left_delete",
					null,
					"AQAAABoAAAAAAAAAGgAAAAAAAAABAAAACg",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAGwAAAAAAAAAbAAAAAAAAAAAAAAAAAAAA"
				]
			]
		},
		{
			"file": "steps/pipeline_step_base.py",
			"settings":
			{
				"buffer_size": 6800,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			},
			"undo_stack":
			[
				[
					3,
					1,
					"insert",
					{
						"characters": "Pipeline"
					},
					"CAAAALYBAAAAAAAAtwEAAAAAAAAAAAAAtwEAAAAAAAC4AQAAAAAAAAAAAAC4AQAAAAAAALkBAAAAAAAAAAAAALkBAAAAAAAAugEAAAAAAAAAAAAAugEAAAAAAAC7AQAAAAAAAAAAAAC7AQAAAAAAALwBAAAAAAAAAAAAALwBAAAAAAAAvQEAAAAAAAAAAAAAvQEAAAAAAAC+AQAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAtgEAAAAAAAC2AQAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "pipeline/controller.py",
			"settings":
			{
				"buffer_size": 38968,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			},
			"undo_stack":
			[
				[
					5,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAA8DAAAAAAAAEAMAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAADwMAAAAAAAAPAwAAAAAAAAAAAAAAAPC/"
				],
				[
					6,
					1,
					"paste",
					null,
					"AQAAABADAAAAAAAASwMAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAEAMAAAAAAAAQAwAAAAAAAAAAAAAAAPC/"
				],
				[
					11,
					1,
					"insert",
					{
						"characters": "r"
					},
					"AQAAAJIOAAAAAAAAkw4AAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAkg4AAAAAAACSDgAAAAAAAAAAAAAAAPC/"
				],
				[
					12,
					1,
					"left_delete",
					null,
					"AQAAAJIOAAAAAAAAkg4AAAAAAAABAAAAcg",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAkw4AAAAAAACTDgAAAAAAAAAAAAAAAPC/"
				],
				[
					13,
					1,
					"insert",
					{
						"characters": "\n\t"
					},
					"AwAAAJIOAAAAAAAAkw4AAAAAAAAAAAAAkw4AAAAAAACfDgAAAAAAAAAAAACfDgAAAAAAAKMOAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAkg4AAAAAAACSDgAAAAAAAAAAAAAAAPC/"
				],
				[
					14,
					1,
					"left_delete",
					null,
					"AQAAAJ8OAAAAAAAAnw4AAAAAAAAEAAAAICAgIA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAow4AAAAAAACjDgAAAAAAAAAAAAAAAPC/"
				],
				[
					15,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAJ8OAAAAAAAAoA4AAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAnw4AAAAAAACfDgAAAAAAAAAAAAAAAPC/"
				],
				[
					16,
					1,
					"insert_snippet",
					{
						"contents": "'$0'"
					},
					"AQAAAKAOAAAAAAAAog4AAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAoA4AAAAAAACgDgAAAAAAAAAAAAAAAPC/"
				],
				[
					17,
					1,
					"insert",
					{
						"characters": "g"
					},
					"AQAAAKEOAAAAAAAAog4AAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAoQ4AAAAAAAChDgAAAAAAAAAAAAAAAPC/"
				],
				[
					18,
					1,
					"left_delete",
					null,
					"AQAAAKEOAAAAAAAAoQ4AAAAAAAABAAAAZw",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAog4AAAAAAACiDgAAAAAAAAAAAAAAAPC/"
				],
				[
					19,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Delete Left Right.sublime-macro"
					},
					"AgAAAKAOAAAAAAAAoA4AAAAAAAABAAAAJ6AOAAAAAAAAoA4AAAAAAAABAAAAJw",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAoQ4AAAAAAAChDgAAAAAAAAAAAAAAAPC/"
				],
				[
					20,
					1,
					"insert_snippet",
					{
						"contents": "'$0'"
					},
					"AQAAAKAOAAAAAAAAog4AAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAoA4AAAAAAACgDgAAAAAAAAAAAAAAAPC/"
				],
				[
					21,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Delete Left Right.sublime-macro"
					},
					"AgAAAKAOAAAAAAAAoA4AAAAAAAABAAAAJ6AOAAAAAAAAoA4AAAAAAAABAAAAJw",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAoQ4AAAAAAAChDgAAAAAAAAAAAAAAAPC/"
				],
				[
					22,
					1,
					"left_delete",
					null,
					"AQAAAJ8OAAAAAAAAnw4AAAAAAAABAAAAIA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAoA4AAAAAAACgDgAAAAAAAAAAAAAAAPC/"
				],
				[
					23,
					1,
					"insert_snippet",
					{
						"contents": "'$0'"
					},
					"AQAAAJ8OAAAAAAAAoQ4AAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAnw4AAAAAAACfDgAAAAAAAAAAAAAAAPC/"
				],
				[
					24,
					1,
					"insert",
					{
						"characters": "get_good_domain"
					},
					"DwAAAKAOAAAAAAAAoQ4AAAAAAAAAAAAAoQ4AAAAAAACiDgAAAAAAAAAAAACiDgAAAAAAAKMOAAAAAAAAAAAAAKMOAAAAAAAApA4AAAAAAAAAAAAApA4AAAAAAAClDgAAAAAAAAAAAAClDgAAAAAAAKYOAAAAAAAAAAAAAKYOAAAAAAAApw4AAAAAAAAAAAAApw4AAAAAAACoDgAAAAAAAAAAAACoDgAAAAAAAKkOAAAAAAAAAAAAAKkOAAAAAAAAqg4AAAAAAAAAAAAAqg4AAAAAAACrDgAAAAAAAAAAAACrDgAAAAAAAKwOAAAAAAAAAAAAAKwOAAAAAAAArQ4AAAAAAAAAAAAArQ4AAAAAAACuDgAAAAAAAAAAAACuDgAAAAAAAK8OAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAoA4AAAAAAACgDgAAAAAAAAAAAAAAAPC/"
				],
				[
					26,
					1,
					"insert",
					{
						"characters": ":"
					},
					"AQAAALAOAAAAAAAAsQ4AAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAsA4AAAAAAACwDgAAAAAAAAAAAAAAAPC/"
				],
				[
					27,
					1,
					"insert",
					{
						"characters": " Dpomain"
					},
					"CAAAALEOAAAAAAAAsg4AAAAAAAAAAAAAsg4AAAAAAACzDgAAAAAAAAAAAACzDgAAAAAAALQOAAAAAAAAAAAAALQOAAAAAAAAtQ4AAAAAAAAAAAAAtQ4AAAAAAAC2DgAAAAAAAAAAAAC2DgAAAAAAALcOAAAAAAAAAAAAALcOAAAAAAAAuA4AAAAAAAAAAAAAuA4AAAAAAAC5DgAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAsQ4AAAAAAACxDgAAAAAAAAAAAAAAAPC/"
				],
				[
					28,
					6,
					"left_delete",
					null,
					"BgAAALgOAAAAAAAAuA4AAAAAAAABAAAAbrcOAAAAAAAAtw4AAAAAAAABAAAAabYOAAAAAAAAtg4AAAAAAAABAAAAYbUOAAAAAAAAtQ4AAAAAAAABAAAAbbQOAAAAAAAAtA4AAAAAAAABAAAAb7MOAAAAAAAAsw4AAAAAAAABAAAAcA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAuQ4AAAAAAAC5DgAAAAAAAAAAAAAAAPC/"
				],
				[
					29,
					1,
					"insert",
					{
						"characters": "omqinQual"
					},
					"CQAAALMOAAAAAAAAtA4AAAAAAAAAAAAAtA4AAAAAAAC1DgAAAAAAAAAAAAC1DgAAAAAAALYOAAAAAAAAAAAAALYOAAAAAAAAtw4AAAAAAAAAAAAAtw4AAAAAAAC4DgAAAAAAAAAAAAC4DgAAAAAAALkOAAAAAAAAAAAAALkOAAAAAAAAug4AAAAAAAAAAAAAug4AAAAAAAC7DgAAAAAAAAAAAAC7DgAAAAAAALwOAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAsw4AAAAAAACzDgAAAAAAAAAAAAAAAPC/"
				],
				[
					30,
					6,
					"left_delete",
					null,
					"BgAAALsOAAAAAAAAuw4AAAAAAAABAAAAbLoOAAAAAAAAug4AAAAAAAABAAAAYbkOAAAAAAAAuQ4AAAAAAAABAAAAdbgOAAAAAAAAuA4AAAAAAAABAAAAUbcOAAAAAAAAtw4AAAAAAAABAAAAbrYOAAAAAAAAtg4AAAAAAAABAAAAaQ",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAvA4AAAAAAAC8DgAAAAAAAAAAAAAAAPC/"
				],
				[
					31,
					1,
					"insert",
					{
						"characters": "a"
					},
					"AQAAALYOAAAAAAAAtw4AAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAtg4AAAAAAAC2DgAAAAAAAAAAAAAAAPC/"
				],
				[
					32,
					1,
					"left_delete",
					null,
					"AQAAALYOAAAAAAAAtg4AAAAAAAABAAAAYQ",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAtw4AAAAAAAC3DgAAAAAAAAAAAAAAAPC/"
				],
				[
					33,
					1,
					"insert",
					{
						"characters": "in"
					},
					"AgAAALYOAAAAAAAAtw4AAAAAAAAAAAAAtw4AAAAAAAC4DgAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAtg4AAAAAAAC2DgAAAAAAAAAAAAAAAPC/"
				],
				[
					34,
					3,
					"left_delete",
					null,
					"AwAAALcOAAAAAAAAtw4AAAAAAAABAAAAbrYOAAAAAAAAtg4AAAAAAAABAAAAabUOAAAAAAAAtQ4AAAAAAAABAAAAcQ",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAuA4AAAAAAAC4DgAAAAAAAAAAAAAAAPC/"
				],
				[
					35,
					1,
					"insert",
					{
						"characters": "ai"
					},
					"AgAAALUOAAAAAAAAtg4AAAAAAAAAAAAAtg4AAAAAAAC3DgAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAtQ4AAAAAAAC1DgAAAAAAAAAAAAAAAPC/"
				],
				[
					36,
					1,
					"insert_completion",
					{
						"completion": "DomainQualityFilter",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "DomainQualityFilter"
					},
					"AgAAALIOAAAAAAAAsg4AAAAAAAAFAAAARG9tYWmyDgAAAAAAAMUOAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAtw4AAAAAAAC3DgAAAAAAAAAAAAAAAPC/"
				],
				[
					37,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAMUOAAAAAAAAxw4AAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAxQ4AAAAAAADFDgAAAAAAAAAAAAAAAPC/"
				],
				[
					38,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAMYOAAAAAAAAyA4AAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAxg4AAAAAAADGDgAAAAAAAAAAAAAAAPC/"
				],
				[
					39,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Add Line in Braces.sublime-macro"
					},
					"CAAAAMcOAAAAAAAAyA4AAAAAAAAAAAAAyA4AAAAAAADUDgAAAAAAAAAAAADUDgAAAAAAANUOAAAAAAAAAAAAANUOAAAAAAAA4Q4AAAAAAAAAAAAAyA4AAAAAAADIDgAAAAAAAAwAAAAgICAgICAgICAgICDJDgAAAAAAAMkOAAAAAAAADAAAACAgICAgICAgICAgIMkOAAAAAAAA2Q4AAAAAAAAAAAAAyA4AAAAAAADYDgAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAxw4AAAAAAADHDgAAAAAAAAAAAAAAAPC/"
				],
				[
					40,
					1,
					"insert",
					{
						"characters": "data"
					},
					"BAAAANgOAAAAAAAA2Q4AAAAAAAAAAAAA2Q4AAAAAAADaDgAAAAAAAAAAAADaDgAAAAAAANsOAAAAAAAAAAAAANsOAAAAAAAA3A4AAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA2A4AAAAAAADYDgAAAAAAAAAAAAAAAPC/"
				],
				[
					41,
					4,
					"left_delete",
					null,
					"BAAAANsOAAAAAAAA2w4AAAAAAAABAAAAYdoOAAAAAAAA2g4AAAAAAAABAAAAdNkOAAAAAAAA2Q4AAAAAAAABAAAAYdgOAAAAAAAA2A4AAAAAAAABAAAAZA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA3A4AAAAAAADcDgAAAAAAAAAAAAAAAPC/"
				],
				[
					42,
					1,
					"insert",
					{
						"characters": "d"
					},
					"AQAAANgOAAAAAAAA2Q4AAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA2A4AAAAAAADYDgAAAAAAAAAAAAAAAPC/"
				],
				[
					43,
					1,
					"left_delete",
					null,
					"AQAAANgOAAAAAAAA2A4AAAAAAAABAAAAZA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA2Q4AAAAAAADZDgAAAAAAAAAAAAAAAPC/"
				],
				[
					44,
					1,
					"insert",
					{
						"characters": "d"
					},
					"AQAAANgOAAAAAAAA2Q4AAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA2A4AAAAAAADYDgAAAAAAAAAAAAAAAPC/"
				],
				[
					45,
					1,
					"left_delete",
					null,
					"AQAAANgOAAAAAAAA2A4AAAAAAAABAAAAZA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA2Q4AAAAAAADZDgAAAAAAAAAAAAAAAPC/"
				],
				[
					46,
					1,
					"insert_snippet",
					{
						"contents": "'$0'"
					},
					"AQAAANgOAAAAAAAA2g4AAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA2A4AAAAAAADYDgAAAAAAAAAAAAAAAPC/"
				],
				[
					47,
					1,
					"insert",
					{
						"characters": "data_dir"
					},
					"CAAAANkOAAAAAAAA2g4AAAAAAAAAAAAA2g4AAAAAAADbDgAAAAAAAAAAAADbDgAAAAAAANwOAAAAAAAAAAAAANwOAAAAAAAA3Q4AAAAAAAAAAAAA3Q4AAAAAAADeDgAAAAAAAAAAAADeDgAAAAAAAN8OAAAAAAAAAAAAAN8OAAAAAAAA4A4AAAAAAAAAAAAA4A4AAAAAAADhDgAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA2Q4AAAAAAADZDgAAAAAAAAAAAAAAAPC/"
				],
				[
					49,
					1,
					"insert",
					{
						"characters": ":"
					},
					"AQAAAOIOAAAAAAAA4w4AAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA4g4AAAAAAADiDgAAAAAAAAAAAAAAAPC/"
				],
				[
					50,
					1,
					"insert",
					{
						"characters": " data_dir,"
					},
					"CgAAAOMOAAAAAAAA5A4AAAAAAAAAAAAA5A4AAAAAAADlDgAAAAAAAAAAAADlDgAAAAAAAOYOAAAAAAAAAAAAAOYOAAAAAAAA5w4AAAAAAAAAAAAA5w4AAAAAAADoDgAAAAAAAAAAAADoDgAAAAAAAOkOAAAAAAAAAAAAAOkOAAAAAAAA6g4AAAAAAAAAAAAA6g4AAAAAAADrDgAAAAAAAAAAAADrDgAAAAAAAOwOAAAAAAAAAAAAAOwOAAAAAAAA7Q4AAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA4w4AAAAAAADjDgAAAAAAAAAAAAAAAPC/"
				],
				[
					51,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAO0OAAAAAAAA7g4AAAAAAAAAAAAA7g4AAAAAAAD+DgAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA7Q4AAAAAAADtDgAAAAAAAAAAAAAAAPC/"
				],
				[
					52,
					1,
					"insert_snippet",
					{
						"contents": "'$0'"
					},
					"AQAAAP4OAAAAAAAAAA8AAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA/g4AAAAAAAD+DgAAAAAAAAAAAAAAAPC/"
				],
				[
					53,
					1,
					"insert",
					{
						"characters": "min_domain_size"
					},
					"DwAAAP8OAAAAAAAAAA8AAAAAAAAAAAAAAA8AAAAAAAABDwAAAAAAAAAAAAABDwAAAAAAAAIPAAAAAAAAAAAAAAIPAAAAAAAAAw8AAAAAAAAAAAAAAw8AAAAAAAAEDwAAAAAAAAAAAAAEDwAAAAAAAAUPAAAAAAAAAAAAAAUPAAAAAAAABg8AAAAAAAAAAAAABg8AAAAAAAAHDwAAAAAAAAAAAAAHDwAAAAAAAAgPAAAAAAAAAAAAAAgPAAAAAAAACQ8AAAAAAAAAAAAACQ8AAAAAAAAKDwAAAAAAAAAAAAAKDwAAAAAAAAsPAAAAAAAAAAAAAAsPAAAAAAAADA8AAAAAAAAAAAAADA8AAAAAAAANDwAAAAAAAAAAAAANDwAAAAAAAA4PAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA/w4AAAAAAAD/DgAAAAAAAAAAAAAAAPC/"
				],
				[
					55,
					1,
					"insert",
					{
						"characters": ":"
					},
					"AQAAAA8PAAAAAAAAEA8AAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAADw8AAAAAAAAPDwAAAAAAAAAAAAAAAPC/"
				],
				[
					56,
					1,
					"insert",
					{
						"characters": " pipeline"
					},
					"CQAAABAPAAAAAAAAEQ8AAAAAAAAAAAAAEQ8AAAAAAAASDwAAAAAAAAAAAAASDwAAAAAAABMPAAAAAAAAAAAAABMPAAAAAAAAFA8AAAAAAAAAAAAAFA8AAAAAAAAVDwAAAAAAAAAAAAAVDwAAAAAAABYPAAAAAAAAAAAAABYPAAAAAAAAFw8AAAAAAAAAAAAAFw8AAAAAAAAYDwAAAAAAAAAAAAAYDwAAAAAAABkPAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAEA8AAAAAAAAQDwAAAAAAAAAAAAAAAPC/"
				],
				[
					57,
					1,
					"insert",
					{
						"characters": "_config."
					},
					"CAAAABkPAAAAAAAAGg8AAAAAAAAAAAAAGg8AAAAAAAAbDwAAAAAAAAAAAAAbDwAAAAAAABwPAAAAAAAAAAAAABwPAAAAAAAAHQ8AAAAAAAAAAAAAHQ8AAAAAAAAeDwAAAAAAAAAAAAAeDwAAAAAAAB8PAAAAAAAAAAAAAB8PAAAAAAAAIA8AAAAAAAAAAAAAIA8AAAAAAAAhDwAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAGQ8AAAAAAAAZDwAAAAAAAAAAAAAAAPC/"
				],
				[
					58,
					1,
					"insert",
					{
						"characters": "get"
					},
					"AwAAACEPAAAAAAAAIg8AAAAAAAAAAAAAIg8AAAAAAAAjDwAAAAAAAAAAAAAjDwAAAAAAACQPAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAIQ8AAAAAAAAhDwAAAAAAAAAAAAAAAPC/"
				],
				[
					59,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAACQPAAAAAAAAJg8AAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAJA8AAAAAAAAkDwAAAAAAAAAAAAAAAPC/"
				],
				[
					60,
					1,
					"insert_snippet",
					{
						"contents": "'$0'"
					},
					"AQAAACUPAAAAAAAAJw8AAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAJQ8AAAAAAAAlDwAAAAAAAAAAAAAAAPC/"
				],
				[
					61,
					1,
					"insert",
					{
						"characters": "min_domain_size"
					},
					"DwAAACYPAAAAAAAAJw8AAAAAAAAAAAAAJw8AAAAAAAAoDwAAAAAAAAAAAAAoDwAAAAAAACkPAAAAAAAAAAAAACkPAAAAAAAAKg8AAAAAAAAAAAAAKg8AAAAAAAArDwAAAAAAAAAAAAArDwAAAAAAACwPAAAAAAAAAAAAACwPAAAAAAAALQ8AAAAAAAAAAAAALQ8AAAAAAAAuDwAAAAAAAAAAAAAuDwAAAAAAAC8PAAAAAAAAAAAAAC8PAAAAAAAAMA8AAAAAAAAAAAAAMA8AAAAAAAAxDwAAAAAAAAAAAAAxDwAAAAAAADIPAAAAAAAAAAAAADIPAAAAAAAAMw8AAAAAAAAAAAAAMw8AAAAAAAA0DwAAAAAAAAAAAAA0DwAAAAAAADUPAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAJg8AAAAAAAAmDwAAAAAAAAAAAAAAAPC/"
				],
				[
					63,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAADYPAAAAAAAANw8AAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAANg8AAAAAAAA2DwAAAAAAAAAAAAAAAPC/"
				],
				[
					64,
					1,
					"insert",
					{
						"characters": " 25"
					},
					"AwAAADcPAAAAAAAAOA8AAAAAAAAAAAAAOA8AAAAAAAA5DwAAAAAAAAAAAAA5DwAAAAAAADoPAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAANw8AAAAAAAA3DwAAAAAAAAAAAAAAAPC/"
				],
				[
					66,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAADsPAAAAAAAAPA8AAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAOw8AAAAAAAA7DwAAAAAAAAAAAAAAAPC/"
				],
				[
					67,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAADwPAAAAAAAAPQ8AAAAAAAAAAAAAPQ8AAAAAAABNDwAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAPA8AAAAAAAA8DwAAAAAAAAAAAAAAAPC/"
				],
				[
					68,
					1,
					"insert_snippet",
					{
						"contents": "'$0'"
					},
					"AQAAAE0PAAAAAAAATw8AAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAATQ8AAAAAAABNDwAAAAAAAAAAAAAAAPC/"
				],
				[
					69,
					1,
					"insert",
					{
						"characters": "min_segment_siz"
					},
					"DwAAAE4PAAAAAAAATw8AAAAAAAAAAAAATw8AAAAAAABQDwAAAAAAAAAAAABQDwAAAAAAAFEPAAAAAAAAAAAAAFEPAAAAAAAAUg8AAAAAAAAAAAAAUg8AAAAAAABTDwAAAAAAAAAAAABTDwAAAAAAAFQPAAAAAAAAAAAAAFQPAAAAAAAAVQ8AAAAAAAAAAAAAVQ8AAAAAAABWDwAAAAAAAAAAAABWDwAAAAAAAFcPAAAAAAAAAAAAAFcPAAAAAAAAWA8AAAAAAAAAAAAAWA8AAAAAAABZDwAAAAAAAAAAAABZDwAAAAAAAFoPAAAAAAAAAAAAAFoPAAAAAAAAWw8AAAAAAAAAAAAAWw8AAAAAAABcDwAAAAAAAAAAAABcDwAAAAAAAF0PAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAATg8AAAAAAABODwAAAAAAAAAAAAAAAPC/"
				],
				[
					70,
					1,
					"insert",
					{
						"characters": "e"
					},
					"AQAAAF0PAAAAAAAAXg8AAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAXQ8AAAAAAABdDwAAAAAAAAAAAAAAAPC/"
				],
				[
					72,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAF8PAAAAAAAAYA8AAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAXw8AAAAAAABfDwAAAAAAAAAAAAAAAPC/"
				],
				[
					73,
					1,
					"insert",
					{
						"characters": " p"
					},
					"AgAAAGAPAAAAAAAAYQ8AAAAAAAAAAAAAYQ8AAAAAAABiDwAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAYA8AAAAAAABgDwAAAAAAAAAAAAAAAPC/"
				],
				[
					74,
					3,
					"left_delete",
					null,
					"AwAAAGEPAAAAAAAAYQ8AAAAAAAABAAAAcGAPAAAAAAAAYA8AAAAAAAABAAAAIF8PAAAAAAAAXw8AAAAAAAABAAAALA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAYg8AAAAAAABiDwAAAAAAAAAAAAAAAPC/"
				],
				[
					75,
					1,
					"insert",
					{
						"characters": ":"
					},
					"AQAAAF8PAAAAAAAAYA8AAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAXw8AAAAAAABfDwAAAAAAAAAAAAAAAPC/"
				],
				[
					76,
					1,
					"insert",
					{
						"characters": " pie"
					},
					"BAAAAGAPAAAAAAAAYQ8AAAAAAAAAAAAAYQ8AAAAAAABiDwAAAAAAAAAAAABiDwAAAAAAAGMPAAAAAAAAAAAAAGMPAAAAAAAAZA8AAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAYA8AAAAAAABgDwAAAAAAAAAAAAAAAPC/"
				],
				[
					77,
					1,
					"left_delete",
					null,
					"AQAAAGMPAAAAAAAAYw8AAAAAAAABAAAAZQ",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAZA8AAAAAAABkDwAAAAAAAAAAAAAAAPC/"
				],
				[
					78,
					1,
					"insert",
					{
						"characters": "peline"
					},
					"BgAAAGMPAAAAAAAAZA8AAAAAAAAAAAAAZA8AAAAAAABlDwAAAAAAAAAAAABlDwAAAAAAAGYPAAAAAAAAAAAAAGYPAAAAAAAAZw8AAAAAAAAAAAAAZw8AAAAAAABoDwAAAAAAAAAAAABoDwAAAAAAAGkPAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAYw8AAAAAAABjDwAAAAAAAAAAAAAAAPC/"
				],
				[
					79,
					1,
					"insert",
					{
						"characters": ".co"
					},
					"AwAAAGkPAAAAAAAAag8AAAAAAAAAAAAAag8AAAAAAABrDwAAAAAAAAAAAABrDwAAAAAAAGwPAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAaQ8AAAAAAABpDwAAAAAAAAAAAAAAAPC/"
				],
				[
					80,
					3,
					"left_delete",
					null,
					"AwAAAGsPAAAAAAAAaw8AAAAAAAABAAAAb2oPAAAAAAAAag8AAAAAAAABAAAAY2kPAAAAAAAAaQ8AAAAAAAABAAAALg",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAbA8AAAAAAABsDwAAAAAAAAAAAAAAAPC/"
				],
				[
					81,
					1,
					"insert",
					{
						"characters": "_cionf"
					},
					"BgAAAGkPAAAAAAAAag8AAAAAAAAAAAAAag8AAAAAAABrDwAAAAAAAAAAAABrDwAAAAAAAGwPAAAAAAAAAAAAAGwPAAAAAAAAbQ8AAAAAAAAAAAAAbQ8AAAAAAABuDwAAAAAAAAAAAABuDwAAAAAAAG8PAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAaQ8AAAAAAABpDwAAAAAAAAAAAAAAAPC/"
				],
				[
					82,
					4,
					"left_delete",
					null,
					"BAAAAG4PAAAAAAAAbg8AAAAAAAABAAAAZm0PAAAAAAAAbQ8AAAAAAAABAAAAbmwPAAAAAAAAbA8AAAAAAAABAAAAb2sPAAAAAAAAaw8AAAAAAAABAAAAaQ",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAbw8AAAAAAABvDwAAAAAAAAAAAAAAAPC/"
				],
				[
					83,
					1,
					"insert",
					{
						"characters": "of"
					},
					"AgAAAGsPAAAAAAAAbA8AAAAAAAAAAAAAbA8AAAAAAABtDwAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAaw8AAAAAAABrDwAAAAAAAAAAAAAAAPC/"
				],
				[
					84,
					1,
					"left_delete",
					null,
					"AQAAAGwPAAAAAAAAbA8AAAAAAAABAAAAZg",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAbQ8AAAAAAABtDwAAAAAAAAAAAAAAAPC/"
				],
				[
					85,
					1,
					"insert",
					{
						"characters": "nfig.get"
					},
					"CAAAAGwPAAAAAAAAbQ8AAAAAAAAAAAAAbQ8AAAAAAABuDwAAAAAAAAAAAABuDwAAAAAAAG8PAAAAAAAAAAAAAG8PAAAAAAAAcA8AAAAAAAAAAAAAcA8AAAAAAABxDwAAAAAAAAAAAABxDwAAAAAAAHIPAAAAAAAAAAAAAHIPAAAAAAAAcw8AAAAAAAAAAAAAcw8AAAAAAAB0DwAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAbA8AAAAAAABsDwAAAAAAAAAAAAAAAPC/"
				],
				[
					86,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAHQPAAAAAAAAdg8AAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAdA8AAAAAAAB0DwAAAAAAAAAAAAAAAPC/"
				],
				[
					87,
					1,
					"insert_snippet",
					{
						"contents": "'$0'"
					},
					"AQAAAHUPAAAAAAAAdw8AAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAdQ8AAAAAAAB1DwAAAAAAAAAAAAAAAPC/"
				],
				[
					88,
					1,
					"insert",
					{
						"characters": "min_segment_si"
					},
					"DgAAAHYPAAAAAAAAdw8AAAAAAAAAAAAAdw8AAAAAAAB4DwAAAAAAAAAAAAB4DwAAAAAAAHkPAAAAAAAAAAAAAHkPAAAAAAAAeg8AAAAAAAAAAAAAeg8AAAAAAAB7DwAAAAAAAAAAAAB7DwAAAAAAAHwPAAAAAAAAAAAAAHwPAAAAAAAAfQ8AAAAAAAAAAAAAfQ8AAAAAAAB+DwAAAAAAAAAAAAB+DwAAAAAAAH8PAAAAAAAAAAAAAH8PAAAAAAAAgA8AAAAAAAAAAAAAgA8AAAAAAACBDwAAAAAAAAAAAACBDwAAAAAAAIIPAAAAAAAAAAAAAIIPAAAAAAAAgw8AAAAAAAAAAAAAgw8AAAAAAACEDwAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAdg8AAAAAAAB2DwAAAAAAAAAAAAAAAPC/"
				],
				[
					89,
					1,
					"insert",
					{
						"characters": "ze"
					},
					"AgAAAIQPAAAAAAAAhQ8AAAAAAAAAAAAAhQ8AAAAAAACGDwAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAhA8AAAAAAACEDwAAAAAAAAAAAAAAAPC/"
				],
				[
					91,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAIcPAAAAAAAAiA8AAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAhw8AAAAAAACHDwAAAAAAAAAAAAAAAPC/"
				],
				[
					92,
					1,
					"insert",
					{
						"characters": " 5"
					},
					"AgAAAIgPAAAAAAAAiQ8AAAAAAAAAAAAAiQ8AAAAAAACKDwAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAiA8AAAAAAACIDwAAAAAAAAAAAAAAAPC/"
				],
				[
					94,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAIsPAAAAAAAAjA8AAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAiw8AAAAAAACLDwAAAAAAAAAAAAAAAPC/"
				],
				[
					95,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAIwPAAAAAAAAjQ8AAAAAAAAAAAAAjQ8AAAAAAACdDwAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAjA8AAAAAAACMDwAAAAAAAAAAAAAAAPC/"
				],
				[
					96,
					1,
					"insert_snippet",
					{
						"contents": "'$0'"
					},
					"AQAAAJ0PAAAAAAAAnw8AAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAnQ8AAAAAAACdDwAAAAAAAAAAAAAAAPC/"
				],
				[
					97,
					1,
					"insert",
					{
						"characters": "max_sg"
					},
					"BgAAAJ4PAAAAAAAAnw8AAAAAAAAAAAAAnw8AAAAAAACgDwAAAAAAAAAAAACgDwAAAAAAAKEPAAAAAAAAAAAAAKEPAAAAAAAAog8AAAAAAAAAAAAAog8AAAAAAACjDwAAAAAAAAAAAACjDwAAAAAAAKQPAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAng8AAAAAAACeDwAAAAAAAAAAAAAAAPC/"
				],
				[
					98,
					1,
					"left_delete",
					null,
					"AQAAAKMPAAAAAAAAow8AAAAAAAABAAAAZw",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAApA8AAAAAAACkDwAAAAAAAAAAAAAAAPC/"
				],
				[
					99,
					1,
					"insert",
					{
						"characters": "egment_ga"
					},
					"CQAAAKMPAAAAAAAApA8AAAAAAAAAAAAApA8AAAAAAAClDwAAAAAAAAAAAAClDwAAAAAAAKYPAAAAAAAAAAAAAKYPAAAAAAAApw8AAAAAAAAAAAAApw8AAAAAAACoDwAAAAAAAAAAAACoDwAAAAAAAKkPAAAAAAAAAAAAAKkPAAAAAAAAqg8AAAAAAAAAAAAAqg8AAAAAAACrDwAAAAAAAAAAAACrDwAAAAAAAKwPAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAow8AAAAAAACjDwAAAAAAAAAAAAAAAPC/"
				],
				[
					100,
					1,
					"insert",
					{
						"characters": "p"
					},
					"AQAAAKwPAAAAAAAArQ8AAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAArA8AAAAAAACsDwAAAAAAAAAAAAAAAPC/"
				],
				[
					102,
					1,
					"insert",
					{
						"characters": ":"
					},
					"AQAAAK4PAAAAAAAArw8AAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAArg8AAAAAAACuDwAAAAAAAAAAAAAAAPC/"
				],
				[
					103,
					1,
					"insert",
					{
						"characters": " pid"
					},
					"BAAAAK8PAAAAAAAAsA8AAAAAAAAAAAAAsA8AAAAAAACxDwAAAAAAAAAAAACxDwAAAAAAALIPAAAAAAAAAAAAALIPAAAAAAAAsw8AAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAArw8AAAAAAACvDwAAAAAAAAAAAAAAAPC/"
				],
				[
					104,
					1,
					"insert",
					{
						"characters": "p"
					},
					"AQAAALMPAAAAAAAAtA8AAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAsw8AAAAAAACzDwAAAAAAAAAAAAAAAPC/"
				],
				[
					105,
					2,
					"left_delete",
					null,
					"AgAAALMPAAAAAAAAsw8AAAAAAAABAAAAcLIPAAAAAAAAsg8AAAAAAAABAAAAZA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAtA8AAAAAAAC0DwAAAAAAAAAAAAAAAPC/"
				],
				[
					106,
					1,
					"insert",
					{
						"characters": "pdlin"
					},
					"BQAAALIPAAAAAAAAsw8AAAAAAAAAAAAAsw8AAAAAAAC0DwAAAAAAAAAAAAC0DwAAAAAAALUPAAAAAAAAAAAAALUPAAAAAAAAtg8AAAAAAAAAAAAAtg8AAAAAAAC3DwAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAsg8AAAAAAACyDwAAAAAAAAAAAAAAAPC/"
				],
				[
					107,
					4,
					"left_delete",
					null,
					"BAAAALYPAAAAAAAAtg8AAAAAAAABAAAAbrUPAAAAAAAAtQ8AAAAAAAABAAAAabQPAAAAAAAAtA8AAAAAAAABAAAAbLMPAAAAAAAAsw8AAAAAAAABAAAAZA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAtw8AAAAAAAC3DwAAAAAAAAAAAAAAAPC/"
				],
				[
					108,
					1,
					"insert",
					{
						"characters": "dl"
					},
					"AgAAALMPAAAAAAAAtA8AAAAAAAAAAAAAtA8AAAAAAAC1DwAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAsw8AAAAAAACzDwAAAAAAAAAAAAAAAPC/"
				],
				[
					109,
					2,
					"left_delete",
					null,
					"AgAAALQPAAAAAAAAtA8AAAAAAAABAAAAbLMPAAAAAAAAsw8AAAAAAAABAAAAZA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAtQ8AAAAAAAC1DwAAAAAAAAAAAAAAAPC/"
				],
				[
					110,
					1,
					"insert",
					{
						"characters": "eline_"
					},
					"BgAAALMPAAAAAAAAtA8AAAAAAAAAAAAAtA8AAAAAAAC1DwAAAAAAAAAAAAC1DwAAAAAAALYPAAAAAAAAAAAAALYPAAAAAAAAtw8AAAAAAAAAAAAAtw8AAAAAAAC4DwAAAAAAAAAAAAC4DwAAAAAAALkPAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAsw8AAAAAAACzDwAAAAAAAAAAAAAAAPC/"
				],
				[
					111,
					1,
					"insert",
					{
						"characters": "config.get"
					},
					"CgAAALkPAAAAAAAAug8AAAAAAAAAAAAAug8AAAAAAAC7DwAAAAAAAAAAAAC7DwAAAAAAALwPAAAAAAAAAAAAALwPAAAAAAAAvQ8AAAAAAAAAAAAAvQ8AAAAAAAC+DwAAAAAAAAAAAAC+DwAAAAAAAL8PAAAAAAAAAAAAAL8PAAAAAAAAwA8AAAAAAAAAAAAAwA8AAAAAAADBDwAAAAAAAAAAAADBDwAAAAAAAMIPAAAAAAAAAAAAAMIPAAAAAAAAww8AAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAuQ8AAAAAAAC5DwAAAAAAAAAAAAAAAPC/"
				],
				[
					112,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAMMPAAAAAAAAxQ8AAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAww8AAAAAAADDDwAAAAAAAAAAAAAAAPC/"
				],
				[
					113,
					1,
					"insert_snippet",
					{
						"contents": "'$0'"
					},
					"AQAAAMQPAAAAAAAAxg8AAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAxA8AAAAAAADEDwAAAAAAAAAAAAAAAPC/"
				],
				[
					114,
					1,
					"insert",
					{
						"characters": "max_segment_gap"
					},
					"DwAAAMUPAAAAAAAAxg8AAAAAAAAAAAAAxg8AAAAAAADHDwAAAAAAAAAAAADHDwAAAAAAAMgPAAAAAAAAAAAAAMgPAAAAAAAAyQ8AAAAAAAAAAAAAyQ8AAAAAAADKDwAAAAAAAAAAAADKDwAAAAAAAMsPAAAAAAAAAAAAAMsPAAAAAAAAzA8AAAAAAAAAAAAAzA8AAAAAAADNDwAAAAAAAAAAAADNDwAAAAAAAM4PAAAAAAAAAAAAAM4PAAAAAAAAzw8AAAAAAAAAAAAAzw8AAAAAAADQDwAAAAAAAAAAAADQDwAAAAAAANEPAAAAAAAAAAAAANEPAAAAAAAA0g8AAAAAAAAAAAAA0g8AAAAAAADTDwAAAAAAAAAAAADTDwAAAAAAANQPAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAxQ8AAAAAAADFDwAAAAAAAAAAAAAAAPC/"
				],
				[
					116,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAANUPAAAAAAAA1g8AAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA1Q8AAAAAAADVDwAAAAAAAAAAAAAAAPC/"
				],
				[
					117,
					1,
					"insert",
					{
						"characters": " 10"
					},
					"AwAAANYPAAAAAAAA1w8AAAAAAAAAAAAA1w8AAAAAAADYDwAAAAAAAAAAAADYDwAAAAAAANkPAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA1g8AAAAAAADWDwAAAAAAAAAAAAAAAPC/"
				],
				[
					120,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"BAAAAO0PAAAAAAAA7g8AAAAAAAAAAAAA7g8AAAAAAAD+DwAAAAAAAAAAAADuDwAAAAAAAO4PAAAAAAAAEAAAACAgICAgICAgICAgICAgICDuDwAAAAAAAPoPAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA7Q8AAAAAAADtDwAAAAAAAAAAAAAAKIVA"
				],
				[
					123,
					1,
					"left_delete",
					null,
					"AgAAAOcPAAAAAAAA5w8AAAAAAAAEAAAAICAgIOoPAAAAAAAA6g8AAAAAAAAMAAAAICAgICAgICAgICAg",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA6w8AAAAAAADrDwAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "steps/dali_results_analyzer.py",
			"settings":
			{
				"buffer_size": 16272,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			},
			"undo_stack":
			[
				[
					3,
					1,
					"paste",
					null,
					"AgAAAAAAAAAAAAAAtgAAAAAAAAAAAAAAtgAAAAAAAAC2AAAAAAAAAB4AAAAjIyBkcGFtL3N0ZXBzL2FuYWx5emVfZGFsaS5weQo",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAHgAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				],
				[
					9,
					1,
					"insert",
					{
						"characters": "Step"
					},
					"BQAAABsAAAAAAAAAHAAAAAAAAAAAAAAAHAAAAAAAAAAcAAAAAAAAACMAAABCYXNlIGNsYXNzIGZvciBEUEFNIHBpcGVsaW5lIHN0ZXBzLhwAAAAAAAAAHQAAAAAAAAAAAAAAHQAAAAAAAAAeAAAAAAAAAAAAAAAeAAAAAAAAAB8AAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAPgAAAAAAAAAbAAAAAAAAAAAAAAAAAPC/"
				],
				[
					10,
					1,
					"insert",
					{
						"characters": " module"
					},
					"BwAAAB8AAAAAAAAAIAAAAAAAAAAAAAAAIAAAAAAAAAAhAAAAAAAAAAAAAAAhAAAAAAAAACIAAAAAAAAAAAAAACIAAAAAAAAAIwAAAAAAAAAAAAAAIwAAAAAAAAAkAAAAAAAAAAAAAAAkAAAAAAAAACUAAAAAAAAAAAAAACUAAAAAAAAAJgAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAHwAAAAAAAAAfAAAAAAAAAAAAAAAAAPC/"
				],
				[
					11,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAACYAAAAAAAAAJwAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAJgAAAAAAAAAmAAAAAAAAAAAAAAAAAPC/"
				],
				[
					12,
					1,
					"insert",
					{
						"characters": "for"
					},
					"AwAAACcAAAAAAAAAKAAAAAAAAAAAAAAAKAAAAAAAAAApAAAAAAAAAAAAAAApAAAAAAAAACoAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAJwAAAAAAAAAnAAAAAAAAAAAAAAAAAPC/"
				],
				[
					13,
					1,
					"insert",
					{
						"characters": " processing"
					},
					"CwAAACoAAAAAAAAAKwAAAAAAAAAAAAAAKwAAAAAAAAAsAAAAAAAAAAAAAAAsAAAAAAAAAC0AAAAAAAAAAAAAAC0AAAAAAAAALgAAAAAAAAAAAAAALgAAAAAAAAAvAAAAAAAAAAAAAAAvAAAAAAAAADAAAAAAAAAAAAAAADAAAAAAAAAAMQAAAAAAAAAAAAAAMQAAAAAAAAAyAAAAAAAAAAAAAAAyAAAAAAAAADMAAAAAAAAAAAAAADMAAAAAAAAANAAAAAAAAAAAAAAANAAAAAAAAAA1AAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAKgAAAAAAAAAqAAAAAAAAAAAAAAAAAPC/"
				],
				[
					14,
					1,
					"insert",
					{
						"characters": " dali"
					},
					"BQAAADUAAAAAAAAANgAAAAAAAAAAAAAANgAAAAAAAAA3AAAAAAAAAAAAAAA3AAAAAAAAADgAAAAAAAAAAAAAADgAAAAAAAAAOQAAAAAAAAAAAAAAOQAAAAAAAAA6AAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAANQAAAAAAAAA1AAAAAAAAAAAAAAAAAPC/"
				],
				[
					15,
					1,
					"insert",
					{
						"characters": " search"
					},
					"BwAAADoAAAAAAAAAOwAAAAAAAAAAAAAAOwAAAAAAAAA8AAAAAAAAAAAAAAA8AAAAAAAAAD0AAAAAAAAAAAAAAD0AAAAAAAAAPgAAAAAAAAAAAAAAPgAAAAAAAAA/AAAAAAAAAAAAAAA/AAAAAAAAAEAAAAAAAAAAAAAAAEAAAAAAAAAAQQAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAOgAAAAAAAAA6AAAAAAAAAAAAAAAAAPC/"
				],
				[
					16,
					1,
					"insert",
					{
						"characters": " results"
					},
					"CAAAAEEAAAAAAAAAQgAAAAAAAAAAAAAAQgAAAAAAAABDAAAAAAAAAAAAAABDAAAAAAAAAEQAAAAAAAAAAAAAAEQAAAAAAAAARQAAAAAAAAAAAAAARQAAAAAAAABGAAAAAAAAAAAAAABGAAAAAAAAAEcAAAAAAAAAAAAAAEcAAAAAAAAASAAAAAAAAAAAAAAASAAAAAAAAABJAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAQQAAAAAAAABBAAAAAAAAAAAAAAAAAPC/"
				],
				[
					20,
					1,
					"insert",
					{
						"characters": "This"
					},
					"BQAAAEsAAAAAAAAATAAAAAAAAAAAAAAATAAAAAAAAABMAAAAAAAAAHIAAABUaGlzIG1vZHVsZSBkZWZpbmVzIHRoZSBhYnN0cmFjdCBiYXNlIGNsYXNzIGZvciBhbGwgcGlwZWxpbmUgc3RlcHMsCnByb3ZpZGluZyBjb21tb24gZnVuY3Rpb25hbGl0eSBhbmQgaW50ZXJmYWNlcy5MAAAAAAAAAE0AAAAAAAAAAAAAAE0AAAAAAAAATgAAAAAAAAAAAAAATgAAAAAAAABPAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAvQAAAAAAAABLAAAAAAAAAAAAAAAAAAAA"
				],
				[
					21,
					1,
					"insert",
					{
						"characters": " module"
					},
					"BwAAAE8AAAAAAAAAUAAAAAAAAAAAAAAAUAAAAAAAAABRAAAAAAAAAAAAAABRAAAAAAAAAFIAAAAAAAAAAAAAAFIAAAAAAAAAUwAAAAAAAAAAAAAAUwAAAAAAAABUAAAAAAAAAAAAAABUAAAAAAAAAFUAAAAAAAAAAAAAAFUAAAAAAAAAVgAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAATwAAAAAAAABPAAAAAAAAAAAAAAAAAPC/"
				],
				[
					22,
					1,
					"insert",
					{
						"characters": " defines"
					},
					"CAAAAFYAAAAAAAAAVwAAAAAAAAAAAAAAVwAAAAAAAABYAAAAAAAAAAAAAABYAAAAAAAAAFkAAAAAAAAAAAAAAFkAAAAAAAAAWgAAAAAAAAAAAAAAWgAAAAAAAABbAAAAAAAAAAAAAABbAAAAAAAAAFwAAAAAAAAAAAAAAFwAAAAAAAAAXQAAAAAAAAAAAAAAXQAAAAAAAABeAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAVgAAAAAAAABWAAAAAAAAAAAAAAAAAPC/"
				],
				[
					23,
					1,
					"insert",
					{
						"characters": " the"
					},
					"BAAAAF4AAAAAAAAAXwAAAAAAAAAAAAAAXwAAAAAAAABgAAAAAAAAAAAAAABgAAAAAAAAAGEAAAAAAAAAAAAAAGEAAAAAAAAAYgAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAXgAAAAAAAABeAAAAAAAAAAAAAAAAAPC/"
				],
				[
					24,
					1,
					"insert",
					{
						"characters": " paramt"
					},
					"BwAAAGIAAAAAAAAAYwAAAAAAAAAAAAAAYwAAAAAAAABkAAAAAAAAAAAAAABkAAAAAAAAAGUAAAAAAAAAAAAAAGUAAAAAAAAAZgAAAAAAAAAAAAAAZgAAAAAAAABnAAAAAAAAAAAAAABnAAAAAAAAAGgAAAAAAAAAAAAAAGgAAAAAAAAAaQAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAYgAAAAAAAABiAAAAAAAAAAAAAAAAAPC/"
				],
				[
					25,
					1,
					"left_delete",
					null,
					"AQAAAGgAAAAAAAAAaAAAAAAAAAABAAAAdA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAaQAAAAAAAABpAAAAAAAAAAAAAAAAAPC/"
				],
				[
					26,
					1,
					"insert",
					{
						"characters": "eters"
					},
					"BQAAAGgAAAAAAAAAaQAAAAAAAAAAAAAAaQAAAAAAAABqAAAAAAAAAAAAAABqAAAAAAAAAGsAAAAAAAAAAAAAAGsAAAAAAAAAbAAAAAAAAAAAAAAAbAAAAAAAAABtAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAaAAAAAAAAABoAAAAAAAAAAAAAAAAAPC/"
				],
				[
					27,
					1,
					"insert",
					{
						"characters": " and"
					},
					"BAAAAG0AAAAAAAAAbgAAAAAAAAAAAAAAbgAAAAAAAABvAAAAAAAAAAAAAABvAAAAAAAAAHAAAAAAAAAAAAAAAHAAAAAAAAAAcQAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAbQAAAAAAAABtAAAAAAAAAAAAAAAAAPC/"
				],
				[
					28,
					1,
					"insert",
					{
						"characters": " caont"
					},
					"BgAAAHEAAAAAAAAAcgAAAAAAAAAAAAAAcgAAAAAAAABzAAAAAAAAAAAAAABzAAAAAAAAAHQAAAAAAAAAAAAAAHQAAAAAAAAAdQAAAAAAAAAAAAAAdQAAAAAAAAB2AAAAAAAAAAAAAAB2AAAAAAAAAHcAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAcQAAAAAAAABxAAAAAAAAAAAAAAAAAPC/"
				],
				[
					29,
					4,
					"left_delete",
					null,
					"BAAAAHYAAAAAAAAAdgAAAAAAAAABAAAAdHUAAAAAAAAAdQAAAAAAAAABAAAAbnQAAAAAAAAAdAAAAAAAAAABAAAAb3MAAAAAAAAAcwAAAAAAAAABAAAAYQ",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAdwAAAAAAAAB3AAAAAAAAAAAAAAAAAPC/"
				],
				[
					30,
					1,
					"insert",
					{
						"characters": "ontains"
					},
					"BwAAAHMAAAAAAAAAdAAAAAAAAAAAAAAAdAAAAAAAAAB1AAAAAAAAAAAAAAB1AAAAAAAAAHYAAAAAAAAAAAAAAHYAAAAAAAAAdwAAAAAAAAAAAAAAdwAAAAAAAAB4AAAAAAAAAAAAAAB4AAAAAAAAAHkAAAAAAAAAAAAAAHkAAAAAAAAAegAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAcwAAAAAAAABzAAAAAAAAAAAAAAAAAPC/"
				],
				[
					31,
					1,
					"insert",
					{
						"characters": " parsing"
					},
					"CAAAAHoAAAAAAAAAewAAAAAAAAAAAAAAewAAAAAAAAB8AAAAAAAAAAAAAAB8AAAAAAAAAH0AAAAAAAAAAAAAAH0AAAAAAAAAfgAAAAAAAAAAAAAAfgAAAAAAAAB/AAAAAAAAAAAAAAB/AAAAAAAAAIAAAAAAAAAAAAAAAIAAAAAAAAAAgQAAAAAAAAAAAAAAgQAAAAAAAACCAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAegAAAAAAAAB6AAAAAAAAAAAAAAAAAPC/"
				],
				[
					32,
					1,
					"insert",
					{
						"characters": " routines"
					},
					"CQAAAIIAAAAAAAAAgwAAAAAAAAAAAAAAgwAAAAAAAACEAAAAAAAAAAAAAACEAAAAAAAAAIUAAAAAAAAAAAAAAIUAAAAAAAAAhgAAAAAAAAAAAAAAhgAAAAAAAACHAAAAAAAAAAAAAACHAAAAAAAAAIgAAAAAAAAAAAAAAIgAAAAAAAAAiQAAAAAAAAAAAAAAiQAAAAAAAACKAAAAAAAAAAAAAACKAAAAAAAAAIsAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAggAAAAAAAACCAAAAAAAAAAAAAAAAAPC/"
				],
				[
					33,
					1,
					"insert",
					{
						"characters": " for"
					},
					"BAAAAIsAAAAAAAAAjAAAAAAAAAAAAAAAjAAAAAAAAACNAAAAAAAAAAAAAACNAAAAAAAAAI4AAAAAAAAAAAAAAI4AAAAAAAAAjwAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAiwAAAAAAAACLAAAAAAAAAAAAAAAAAPC/"
				],
				[
					34,
					1,
					"insert",
					{
						"characters": " reading"
					},
					"CAAAAI8AAAAAAAAAkAAAAAAAAAAAAAAAkAAAAAAAAACRAAAAAAAAAAAAAACRAAAAAAAAAJIAAAAAAAAAAAAAAJIAAAAAAAAAkwAAAAAAAAAAAAAAkwAAAAAAAACUAAAAAAAAAAAAAACUAAAAAAAAAJUAAAAAAAAAAAAAAJUAAAAAAAAAlgAAAAAAAAAAAAAAlgAAAAAAAACXAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAjwAAAAAAAACPAAAAAAAAAAAAAAAAAPC/"
				],
				[
					35,
					1,
					"insert",
					{
						"characters": " DALO"
					},
					"BQAAAJcAAAAAAAAAmAAAAAAAAAAAAAAAmAAAAAAAAACZAAAAAAAAAAAAAACZAAAAAAAAAJoAAAAAAAAAAAAAAJoAAAAAAAAAmwAAAAAAAAAAAAAAmwAAAAAAAACcAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAlwAAAAAAAACXAAAAAAAAAAAAAAAAAPC/"
				],
				[
					36,
					1,
					"left_delete",
					null,
					"AQAAAJsAAAAAAAAAmwAAAAAAAAABAAAATw",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAnAAAAAAAAACcAAAAAAAAAAAAAAAAAPC/"
				],
				[
					37,
					1,
					"insert",
					{
						"characters": "I"
					},
					"AQAAAJsAAAAAAAAAnAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAmwAAAAAAAACbAAAAAAAAAAAAAAAAAPC/"
				],
				[
					38,
					1,
					"insert",
					{
						"characters": " re"
					},
					"AwAAAJwAAAAAAAAAnQAAAAAAAAAAAAAAnQAAAAAAAACeAAAAAAAAAAAAAACeAAAAAAAAAJ8AAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAnAAAAAAAAACcAAAAAAAAAAAAAAAAAPC/"
				],
				[
					39,
					2,
					"left_delete",
					null,
					"AgAAAJ4AAAAAAAAAngAAAAAAAAABAAAAZZ0AAAAAAAAAnQAAAAAAAAABAAAAcg",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAnwAAAAAAAACfAAAAAAAAAAAAAAAAAPC/"
				],
				[
					40,
					1,
					"insert",
					{
						"characters": "result"
					},
					"BgAAAJ0AAAAAAAAAngAAAAAAAAAAAAAAngAAAAAAAACfAAAAAAAAAAAAAACfAAAAAAAAAKAAAAAAAAAAAAAAAKAAAAAAAAAAoQAAAAAAAAAAAAAAoQAAAAAAAACiAAAAAAAAAAAAAACiAAAAAAAAAKMAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAnQAAAAAAAACdAAAAAAAAAAAAAAAAAPC/"
				],
				[
					41,
					1,
					"insert",
					{
						"characters": " files"
					},
					"BgAAAKMAAAAAAAAApAAAAAAAAAAAAAAApAAAAAAAAAClAAAAAAAAAAAAAAClAAAAAAAAAKYAAAAAAAAAAAAAAKYAAAAAAAAApwAAAAAAAAAAAAAApwAAAAAAAACoAAAAAAAAAAAAAACoAAAAAAAAAKkAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAowAAAAAAAACjAAAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "steps/domain_detector.py",
			"settings":
			{
				"buffer_size": 23664,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			},
			"undo_stack":
			[
				[
					3,
					1,
					"paste",
					null,
					"AgAAAAAAAAAAAAAAtgAAAAAAAAAAAAAAtgAAAAAAAAC2AAAAAAAAABgAAAAjIyBkcGFtL3N0ZXBzL2RvbWFpbnMucHk",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAGAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				],
				[
					6,
					1,
					"insert",
					{
						"characters": "Do"
					},
					"AwAAABsAAAAAAAAAHAAAAAAAAAAAAAAAHAAAAAAAAAAcAAAAAAAAACMAAABCYXNlIGNsYXNzIGZvciBEUEFNIHBpcGVsaW5lIHN0ZXBzLhwAAAAAAAAAHQAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAPgAAAAAAAAAbAAAAAAAAAAAAAAAAAPC/"
				],
				[
					7,
					2,
					"left_delete",
					null,
					"AgAAABwAAAAAAAAAHAAAAAAAAAABAAAAbxsAAAAAAAAAGwAAAAAAAAABAAAARA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAHQAAAAAAAAAdAAAAAAAAAAAAAAAAAPC/"
				],
				[
					8,
					1,
					"insert",
					{
						"characters": "DPAM"
					},
					"BAAAABsAAAAAAAAAHAAAAAAAAAAAAAAAHAAAAAAAAAAdAAAAAAAAAAAAAAAdAAAAAAAAAB4AAAAAAAAAAAAAAB4AAAAAAAAAHwAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAGwAAAAAAAAAbAAAAAAAAAAAAAAAAAPC/"
				],
				[
					9,
					1,
					"insert",
					{
						"characters": " domain"
					},
					"BwAAAB8AAAAAAAAAIAAAAAAAAAAAAAAAIAAAAAAAAAAhAAAAAAAAAAAAAAAhAAAAAAAAACIAAAAAAAAAAAAAACIAAAAAAAAAIwAAAAAAAAAAAAAAIwAAAAAAAAAkAAAAAAAAAAAAAAAkAAAAAAAAACUAAAAAAAAAAAAAACUAAAAAAAAAJgAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAHwAAAAAAAAAfAAAAAAAAAAAAAAAAAPC/"
				],
				[
					10,
					1,
					"insert",
					{
						"characters": " detect"
					},
					"BwAAACYAAAAAAAAAJwAAAAAAAAAAAAAAJwAAAAAAAAAoAAAAAAAAAAAAAAAoAAAAAAAAACkAAAAAAAAAAAAAACkAAAAAAAAAKgAAAAAAAAAAAAAAKgAAAAAAAAArAAAAAAAAAAAAAAArAAAAAAAAACwAAAAAAAAAAAAAACwAAAAAAAAALQAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAJgAAAAAAAAAmAAAAAAAAAAAAAAAAAPC/"
				],
				[
					11,
					1,
					"insert",
					{
						"characters": "or"
					},
					"AgAAAC0AAAAAAAAALgAAAAAAAAAAAAAALgAAAAAAAAAvAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAALQAAAAAAAAAtAAAAAAAAAAAAAAAAAPC/"
				],
				[
					14,
					1,
					"insert",
					{
						"characters": "This"
					},
					"BQAAADEAAAAAAAAAMgAAAAAAAAAAAAAAMgAAAAAAAAAyAAAAAAAAAHIAAABUaGlzIG1vZHVsZSBkZWZpbmVzIHRoZSBhYnN0cmFjdCBiYXNlIGNsYXNzIGZvciBhbGwgcGlwZWxpbmUgc3RlcHMsCnByb3ZpZGluZyBjb21tb24gZnVuY3Rpb25hbGl0eSBhbmQgaW50ZXJmYWNlcy4yAAAAAAAAADMAAAAAAAAAAAAAADMAAAAAAAAANAAAAAAAAAAAAAAANAAAAAAAAAA1AAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAowAAAAAAAAAxAAAAAAAAAAAAAAAAAPC/"
				],
				[
					15,
					1,
					"insert",
					{
						"characters": " module"
					},
					"BwAAADUAAAAAAAAANgAAAAAAAAAAAAAANgAAAAAAAAA3AAAAAAAAAAAAAAA3AAAAAAAAADgAAAAAAAAAAAAAADgAAAAAAAAAOQAAAAAAAAAAAAAAOQAAAAAAAAA6AAAAAAAAAAAAAAA6AAAAAAAAADsAAAAAAAAAAAAAADsAAAAAAAAAPAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAANQAAAAAAAAA1AAAAAAAAAAAAAAAAAPC/"
				],
				[
					16,
					1,
					"insert",
					{
						"characters": " reads"
					},
					"BgAAADwAAAAAAAAAPQAAAAAAAAAAAAAAPQAAAAAAAAA+AAAAAAAAAAAAAAA+AAAAAAAAAD8AAAAAAAAAAAAAAD8AAAAAAAAAQAAAAAAAAAAAAAAAQAAAAAAAAABBAAAAAAAAAAAAAABBAAAAAAAAAEIAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAPAAAAAAAAAA8AAAAAAAAAAAAAAAAAPC/"
				],
				[
					17,
					1,
					"insert",
					{
						"characters": " alignment"
					},
					"CgAAAEIAAAAAAAAAQwAAAAAAAAAAAAAAQwAAAAAAAABEAAAAAAAAAAAAAABEAAAAAAAAAEUAAAAAAAAAAAAAAEUAAAAAAAAARgAAAAAAAAAAAAAARgAAAAAAAABHAAAAAAAAAAAAAABHAAAAAAAAAEgAAAAAAAAAAAAAAEgAAAAAAAAASQAAAAAAAAAAAAAASQAAAAAAAABKAAAAAAAAAAAAAABKAAAAAAAAAEsAAAAAAAAAAAAAAEsAAAAAAAAATAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAQgAAAAAAAABCAAAAAAAAAAAAAAAAAPC/"
				],
				[
					18,
					1,
					"insert",
					{
						"characters": " data"
					},
					"BQAAAEwAAAAAAAAATQAAAAAAAAAAAAAATQAAAAAAAABOAAAAAAAAAAAAAABOAAAAAAAAAE8AAAAAAAAAAAAAAE8AAAAAAAAAUAAAAAAAAAAAAAAAUAAAAAAAAABRAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAATAAAAAAAAABMAAAAAAAAAAAAAAAAAPC/"
				],
				[
					19,
					1,
					"insert",
					{
						"characters": " nd"
					},
					"AwAAAFEAAAAAAAAAUgAAAAAAAAAAAAAAUgAAAAAAAABTAAAAAAAAAAAAAABTAAAAAAAAAFQAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAUQAAAAAAAABRAAAAAAAAAAAAAAAAAPC/"
				],
				[
					20,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAFQAAAAAAAAAVQAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAVAAAAAAAAABUAAAAAAAAAAAAAAAAAPC/"
				],
				[
					21,
					3,
					"left_delete",
					null,
					"AwAAAFQAAAAAAAAAVAAAAAAAAAABAAAAIFMAAAAAAAAAUwAAAAAAAAABAAAAZFIAAAAAAAAAUgAAAAAAAAABAAAAbg",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAVQAAAAAAAABVAAAAAAAAAAAAAAAAAPC/"
				],
				[
					22,
					1,
					"insert",
					{
						"characters": "and"
					},
					"AwAAAFIAAAAAAAAAUwAAAAAAAAAAAAAAUwAAAAAAAABUAAAAAAAAAAAAAABUAAAAAAAAAFUAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAUgAAAAAAAABSAAAAAAAAAAAAAAAAAPC/"
				],
				[
					23,
					1,
					"insert",
					{
						"characters": " provides"
					},
					"CQAAAFUAAAAAAAAAVgAAAAAAAAAAAAAAVgAAAAAAAABXAAAAAAAAAAAAAABXAAAAAAAAAFgAAAAAAAAAAAAAAFgAAAAAAAAAWQAAAAAAAAAAAAAAWQAAAAAAAABaAAAAAAAAAAAAAABaAAAAAAAAAFsAAAAAAAAAAAAAAFsAAAAAAAAAXAAAAAAAAAAAAAAAXAAAAAAAAABdAAAAAAAAAAAAAABdAAAAAAAAAF4AAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAVQAAAAAAAABVAAAAAAAAAAAAAAAAAPC/"
				],
				[
					24,
					1,
					"insert",
					{
						"characters": " the"
					},
					"BAAAAF4AAAAAAAAAXwAAAAAAAAAAAAAAXwAAAAAAAABgAAAAAAAAAAAAAABgAAAAAAAAAGEAAAAAAAAAAAAAAGEAAAAAAAAAYgAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAXgAAAAAAAABeAAAAAAAAAAAAAAAAAPC/"
				],
				[
					25,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAGIAAAAAAAAAYwAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAYgAAAAAAAABiAAAAAAAAAAAAAAAAAPC/"
				],
				[
					26,
					1,
					"insert",
					{
						"characters": "domain"
					},
					"BgAAAGMAAAAAAAAAZAAAAAAAAAAAAAAAZAAAAAAAAABlAAAAAAAAAAAAAABlAAAAAAAAAGYAAAAAAAAAAAAAAGYAAAAAAAAAZwAAAAAAAAAAAAAAZwAAAAAAAABoAAAAAAAAAAAAAABoAAAAAAAAAGkAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAYwAAAAAAAABjAAAAAAAAAAAAAAAAAPC/"
				],
				[
					27,
					1,
					"insert",
					{
						"characters": " efinit"
					},
					"BwAAAGkAAAAAAAAAagAAAAAAAAAAAAAAagAAAAAAAABrAAAAAAAAAAAAAABrAAAAAAAAAGwAAAAAAAAAAAAAAGwAAAAAAAAAbQAAAAAAAAAAAAAAbQAAAAAAAABuAAAAAAAAAAAAAABuAAAAAAAAAG8AAAAAAAAAAAAAAG8AAAAAAAAAcAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAaQAAAAAAAABpAAAAAAAAAAAAAAAAAPC/"
				],
				[
					28,
					6,
					"left_delete",
					null,
					"BgAAAG8AAAAAAAAAbwAAAAAAAAABAAAAdG4AAAAAAAAAbgAAAAAAAAABAAAAaW0AAAAAAAAAbQAAAAAAAAABAAAAbmwAAAAAAAAAbAAAAAAAAAABAAAAaWsAAAAAAAAAawAAAAAAAAABAAAAZmoAAAAAAAAAagAAAAAAAAABAAAAZQ",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAcAAAAAAAAABwAAAAAAAAAAAAAAAAAPC/"
				],
				[
					29,
					1,
					"insert",
					{
						"characters": "definitions"
					},
					"CwAAAGoAAAAAAAAAawAAAAAAAAAAAAAAawAAAAAAAABsAAAAAAAAAAAAAABsAAAAAAAAAG0AAAAAAAAAAAAAAG0AAAAAAAAAbgAAAAAAAAAAAAAAbgAAAAAAAABvAAAAAAAAAAAAAABvAAAAAAAAAHAAAAAAAAAAAAAAAHAAAAAAAAAAcQAAAAAAAAAAAAAAcQAAAAAAAAByAAAAAAAAAAAAAAByAAAAAAAAAHMAAAAAAAAAAAAAAHMAAAAAAAAAdAAAAAAAAAAAAAAAdAAAAAAAAAB1AAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAagAAAAAAAABqAAAAAAAAAAAAAAAAAPC/"
				],
				[
					30,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAHUAAAAAAAAAdgAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAdQAAAAAAAAB1AAAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "steps/foldseek_results_filter.py",
			"settings":
			{
				"buffer_size": 5062,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			},
			"undo_stack":
			[
				[
					3,
					1,
					"paste",
					null,
					"AgAAAAAAAAAAAAAAtgAAAAAAAAAAAAAAtgAAAAAAAAC2AAAAAAAAACEAAAAjIyBkcGFtL3N0ZXBzL2ZpbHRlcl9mb2xkc2Vlay5weQo",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAIQAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				],
				[
					6,
					1,
					"insert",
					{
						"characters": "Pp"
					},
					"AwAAABsAAAAAAAAAHAAAAAAAAAAAAAAAHAAAAAAAAAAcAAAAAAAAACMAAABCYXNlIGNsYXNzIGZvciBEUEFNIHBpcGVsaW5lIHN0ZXBzLhwAAAAAAAAAHQAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAPgAAAAAAAAAbAAAAAAAAAAAAAAAAAPC/"
				],
				[
					7,
					2,
					"left_delete",
					null,
					"AgAAABwAAAAAAAAAHAAAAAAAAAABAAAAcBsAAAAAAAAAGwAAAAAAAAABAAAAUA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAHQAAAAAAAAAdAAAAAAAAAAAAAAAAAPC/"
				],
				[
					8,
					1,
					"insert",
					{
						"characters": "The"
					},
					"AwAAABsAAAAAAAAAHAAAAAAAAAAAAAAAHAAAAAAAAAAdAAAAAAAAAAAAAAAdAAAAAAAAAB4AAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAGwAAAAAAAAAbAAAAAAAAAAAAAAAAAPC/"
				],
				[
					9,
					1,
					"insert",
					{
						"characters": " module"
					},
					"BwAAAB4AAAAAAAAAHwAAAAAAAAAAAAAAHwAAAAAAAAAgAAAAAAAAAAAAAAAgAAAAAAAAACEAAAAAAAAAAAAAACEAAAAAAAAAIgAAAAAAAAAAAAAAIgAAAAAAAAAjAAAAAAAAAAAAAAAjAAAAAAAAACQAAAAAAAAAAAAAACQAAAAAAAAAJQAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAHgAAAAAAAAAeAAAAAAAAAAAAAAAAAPC/"
				],
				[
					10,
					1,
					"insert",
					{
						"characters": " does"
					},
					"BQAAACUAAAAAAAAAJgAAAAAAAAAAAAAAJgAAAAAAAAAnAAAAAAAAAAAAAAAnAAAAAAAAACgAAAAAAAAAAAAAACgAAAAAAAAAKQAAAAAAAAAAAAAAKQAAAAAAAAAqAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAJQAAAAAAAAAlAAAAAAAAAAAAAAAAAPC/"
				],
				[
					11,
					1,
					"insert",
					{
						"characters": " post-procerssi"
					},
					"DwAAACoAAAAAAAAAKwAAAAAAAAAAAAAAKwAAAAAAAAAsAAAAAAAAAAAAAAAsAAAAAAAAAC0AAAAAAAAAAAAAAC0AAAAAAAAALgAAAAAAAAAAAAAALgAAAAAAAAAvAAAAAAAAAAAAAAAvAAAAAAAAADAAAAAAAAAAAAAAADAAAAAAAAAAMQAAAAAAAAAAAAAAMQAAAAAAAAAyAAAAAAAAAAAAAAAyAAAAAAAAADMAAAAAAAAAAAAAADMAAAAAAAAANAAAAAAAAAAAAAAANAAAAAAAAAA1AAAAAAAAAAAAAAA1AAAAAAAAADYAAAAAAAAAAAAAADYAAAAAAAAANwAAAAAAAAAAAAAANwAAAAAAAAA4AAAAAAAAAAAAAAA4AAAAAAAAADkAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAKgAAAAAAAAAqAAAAAAAAAAAAAAAAAPC/"
				],
				[
					12,
					4,
					"left_delete",
					null,
					"BAAAADgAAAAAAAAAOAAAAAAAAAABAAAAaTcAAAAAAAAANwAAAAAAAAABAAAAczYAAAAAAAAANgAAAAAAAAABAAAAczUAAAAAAAAANQAAAAAAAAABAAAAcg",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAOQAAAAAAAAA5AAAAAAAAAAAAAAAAAPC/"
				],
				[
					13,
					1,
					"insert",
					{
						"characters": "ssing"
					},
					"BQAAADUAAAAAAAAANgAAAAAAAAAAAAAANgAAAAAAAAA3AAAAAAAAAAAAAAA3AAAAAAAAADgAAAAAAAAAAAAAADgAAAAAAAAAOQAAAAAAAAAAAAAAOQAAAAAAAAA6AAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAANQAAAAAAAAA1AAAAAAAAAAAAAAAAAPC/"
				],
				[
					14,
					1,
					"insert",
					{
						"characters": " on"
					},
					"AwAAADoAAAAAAAAAOwAAAAAAAAAAAAAAOwAAAAAAAAA8AAAAAAAAAAAAAAA8AAAAAAAAAD0AAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAOgAAAAAAAAA6AAAAAAAAAAAAAAAAAPC/"
				],
				[
					15,
					1,
					"insert",
					{
						"characters": " Fokd"
					},
					"BQAAAD0AAAAAAAAAPgAAAAAAAAAAAAAAPgAAAAAAAAA/AAAAAAAAAAAAAAA/AAAAAAAAAEAAAAAAAAAAAAAAAEAAAAAAAAAAQQAAAAAAAAAAAAAAQQAAAAAAAABCAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAPQAAAAAAAAA9AAAAAAAAAAAAAAAAAPC/"
				],
				[
					16,
					2,
					"left_delete",
					null,
					"AgAAAEEAAAAAAAAAQQAAAAAAAAABAAAAZEAAAAAAAAAAQAAAAAAAAAABAAAAaw",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAQgAAAAAAAABCAAAAAAAAAAAAAAAAAPC/"
				],
				[
					17,
					1,
					"insert",
					{
						"characters": "ldSeek"
					},
					"BgAAAEAAAAAAAAAAQQAAAAAAAAAAAAAAQQAAAAAAAABCAAAAAAAAAAAAAABCAAAAAAAAAEMAAAAAAAAAAAAAAEMAAAAAAAAARAAAAAAAAAAAAAAARAAAAAAAAABFAAAAAAAAAAAAAABFAAAAAAAAAEYAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAQAAAAAAAAABAAAAAAAAAAAAAAAAAAPC/"
				],
				[
					18,
					1,
					"insert",
					{
						"characters": " results"
					},
					"CAAAAEYAAAAAAAAARwAAAAAAAAAAAAAARwAAAAAAAABIAAAAAAAAAAAAAABIAAAAAAAAAEkAAAAAAAAAAAAAAEkAAAAAAAAASgAAAAAAAAAAAAAASgAAAAAAAABLAAAAAAAAAAAAAABLAAAAAAAAAEwAAAAAAAAAAAAAAEwAAAAAAAAATQAAAAAAAAAAAAAATQAAAAAAAABOAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAARgAAAAAAAABGAAAAAAAAAAAAAAAAAPC/"
				],
				[
					21,
					1,
					"insert",
					{
						"characters": "\\"
					},
					"AgAAAFAAAAAAAAAAUQAAAAAAAAAAAAAAUQAAAAAAAABRAAAAAAAAAHIAAABUaGlzIG1vZHVsZSBkZWZpbmVzIHRoZSBhYnN0cmFjdCBiYXNlIGNsYXNzIGZvciBhbGwgcGlwZWxpbmUgc3RlcHMsCnByb3ZpZGluZyBjb21tb24gZnVuY3Rpb25hbGl0eSBhbmQgaW50ZXJmYWNlcy4",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAwgAAAAAAAABQAAAAAAAAAAAAAAAAAPC/"
				],
				[
					22,
					2,
					"left_delete",
					null,
					"AgAAAFAAAAAAAAAAUAAAAAAAAAABAAAAXE8AAAAAAAAATwAAAAAAAAABAAAACg",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAUQAAAAAAAABRAAAAAAAAAAAAAAAAAPC/"
				],
				[
					25,
					1,
					"insert",
					{
						"characters": "Results"
					},
					"BwAAAJoAAAAAAAAAmwAAAAAAAAAAAAAAmwAAAAAAAACcAAAAAAAAAAAAAACcAAAAAAAAAJ0AAAAAAAAAAAAAAJ0AAAAAAAAAngAAAAAAAAAAAAAAngAAAAAAAACfAAAAAAAAAAAAAACfAAAAAAAAAKAAAAAAAAAAAAAAAKAAAAAAAAAAoQAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAmgAAAAAAAACaAAAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"contents": "#!/usr/bin/env python3\n\"\"\"\nRuns DSSP, assigns secondary structure\n\n\"\"\"\n\nimport os\nimport subprocess\nimport logging\nimport tempfile\nimport shutil\nimport json\nfrom datetime import datetime\nfrom typing import Dict, List, Any\n\nclass SecondaryStructureAssigner:\n    \"\"\"Assigns secondary structure elements using DSSP\"\"\"\n    \n    def __init__(self, config: Dict[str, Any]):\n        \"\"\"\n        Initialize DSSP runner with configuration\n        \n        Args:\n            config: Configuration containing paths and parameters\n        \"\"\"\n        self.config = config\n        self.logger = logging.getLogger(\"dpam.steps.sse\")\n        self.data_dir = config.get('data_dir', '/data')\n        self.dssp_binary = config.get('dssp_binary', 'mkdssp')\n        self.min_helix_length = config.get('min_helix_length', 3)\n        self.min_strand_length = config.get('min_strand_length', 2)\n    \n    def run(self, structure_id: str, structure_path: str, domain_support_path: str, output_dir: str) -> Dict[str, Any]:\n        \"\"\"\n        Run secondary structure assignment\n        \n        Args:\n            structure_id: Structure identifier\n            structure_path: Path to input structure file (PDB/mmCIF)\n            domain_support_path: Path to domain support file\n            output_dir: Directory for output files\n            \n        Returns:\n            Dict with results including paths to output files and status\n        \"\"\"\n        start_time = datetime.now()\n        self.logger.info(f\"Starting secondary structure assignment for structure {structure_id}\")\n        \n        prefix = f\"struct_{structure_id}\"\n        \n        try:\n            # Create output directory\n            os.makedirs(output_dir, exist_ok=True)\n            \n            # Create temporary working directory\n            with tempfile.TemporaryDirectory() as temp_dir:\n                # Prepare structure for DSSP\n                local_structure_path = os.path.join(temp_dir, f\"{prefix}.pdb\")\n                self._prepare_structure(structure_path, local_structure_path)\n                \n                # Run DSSP\n                dssp_output_path = os.path.join(temp_dir, f\"{prefix}.dssp\")\n                self._run_dssp(local_structure_path, dssp_output_path)\n                \n                # Parse DSSP output\n                ss_data = self._parse_dssp_output(dssp_output_path)\n                \n                # Load domain data\n                domains = self._load_domains(domain_support_path)\n                \n                # Calculate SSE for each domain\n                domains_with_sse = self._calculate_domain_sse(domains, ss_data)\n                \n                # Write results\n                results_path = os.path.join(output_dir, f\"{prefix}_sse.json\")\n                summary_path = os.path.join(output_dir, f\"{prefix}_sse_summary.tsv\")\n                \n                self._write_results(domains_with_sse, ss_data, results_path, summary_path)\n                \n                # Copy DSSP output to results directory\n                final_dssp_path = os.path.join(output_dir, f\"{prefix}.dssp\")\n                shutil.copy(dssp_output_path, final_dssp_path)\n            e\n            # Return success and output paths\n            end_time = datetime.now()\n            duration = (end_time - start_time).total_seconds()\n            \n            return {\n                \"status\": \"COMPLETED\",\n                \"structure_id\": structure_id,\n                \"output_files\": {\n                    \"sse_json\": results_path,\n                    \"sse_summary\": summary_path,\n                    \"dssp_output\": final_dssp_path\n                },\n                \"metrics\": {\n                    \"duration_seconds\": duration,\n                    \"domains_processed\": len(domains),\n                    \"residues_processed\": len(ss_data)\n                }\n            }\n            \n        except Exception as e:\n            self.logger.error(f\"Error assigning secondary structure for {structure_id}: {str(e)}\")\n            return {\n                \"status\": \"FAILED\",\n                \"structure_id\": structure_id,\n                \"error_message\": str(e)\n            }\n    \n    def _prepare_structure(self, input_path: str, output_path: str) -> None:\n        \"\"\"Convert structure to PDB format if needed\"\"\"\n        # If the input is already PDB, just copy it\n        if input_path.endswith('.pdb'):\n            shutil.copy(input_path, output_path)\n            return\n        \n        # For mmCIF, use gemmi to convert\n        try:\n            # Using gemmi for conversion\n            cmd = [self.gemmi_binary, \"convert\", \"--to\", \"pdb\", input_path, output_path]\n            subprocess.run(cmd, check=True, capture_output=True)\n        except subprocess.CalledProcessError as e:\n            self.logger.error(f\"Error converting structure: {e.stderr}\")\n            raise RuntimeError(f\"Failed to convert structure to PDB: {e.stderr}\")\n    \n    def _run_dssp(self, input_path: str, output_path: str) -> None:\n        \"\"\"Run DSSP on the input structure\"\"\"\n        try:\n            cmd = [self.dssp_binary, \"-i\", input_path, \"-o\", output_path]\n            result = subprocess.run(\n                cmd, \n                check=True, \n                stdout=subprocess.PIPE, \n                stderr=subprocess.PIPE,\n                text=True\n            )\n            self.logger.debug(f\"DSSP output: {result.stdout}\")\n        except subprocess.CalledProcessError as e:\n            self.logger.error(f\"DSSP failed: {e.stderr}\")\n            raise RuntimeError(f\"DSSP failed: {e.stderr}\")\n    \n    def _parse_dssp_output(self, dssp_path: str) -> Dict[int, Dict[str, Any]]:\n        \"\"\"Parse DSSP output file\"\"\"\n        ss_data = {}\n        \n        try:\n            with open(dssp_path, 'r') as f:\n                lines = f.readlines()\n                \n            # Find the start of the residue data (line with #)\n            data_start = 0\n            for i, line in enumerate(lines):\n                if line.startswith(\"  #  RESIDUE\"):\n                    data_start = i + 1\n                    break\n            \n            # Parse residue data\n            for line in lines[data_start:]:\n                if len(line) < 17:  # Skip short lines\n                    continue\n                    \n                try:\n                    resnum = int(line[5:10].strip())\n                    resname = line[10:14].strip()\n                    chain = line[11:12].strip()\n                    ss = line[16:17].strip()\n                    \n                    # Convert DSSP SS codes to simplified categories\n                    ss_type = self._simplify_ss_code(ss)\n                    \n                    # Additional data (if needed)\n                    acc = float(line[35:38].strip()) if line[35:38].strip() else 0.0\n                    phi = float(line[103:109].strip()) if line[103:109].strip() else 0.0\n                    psi = float(line[109:115].strip()) if line[109:115].strip() else 0.0\n                    \n                    ss_data[resnum] = {\n                        'residue_num': resnum,\n                        'residue_name': resname,\n                        'chain': chain,\n                        'ss_code': ss,\n                        'ss_type': ss_type,\n                        'accessibility': acc,\n                        'phi': phi,\n                        'psi': psi\n                    }\n                    \n                except (ValueError, IndexError) as e:\n                    self.logger.warning(f\"Error parsing DSSP line: {line}: {e}\")\n                    continue\n            \n            return ss_data\n            \n        except Exception as e:\n            self.logger.error(f\"Error parsing DSSP output: {e}\")\n            raise\n    \n    def _simplify_ss_code(self, ss_code: str) -> str:\n        \"\"\"Convert DSSP SS codes to simplified types (H, E, L)\"\"\"\n        if not ss_code:\n            return \"L\"  # Default to loop\n            \n        if ss_code in [\"H\", \"G\", \"I\"]:  # Helix types\n            return \"H\"\n        elif ss_code in [\"E\", \"B\"]:  # Strand types\n            return \"E\"\n        else:  # Everything else is loop\n            return \"L\"\n    \n    def _load_domains(self, domain_support_path: str) -> List[Dict[str, Any]]:\n        \"\"\"Load domain definitions from support file\"\"\"\n        with open(domain_support_path, 'r') as f:\n            data = json.load(f)\n        \n        return data.get('domains', [])\n    \n    def _calculate_domain_sse(self, domains: List[Dict[str, Any]], ss_data: Dict[int, Dict[str, Any]]) -> List[Dict[str, Any]]:\n        \"\"\"Calculate SSE composition for each domain\"\"\"\n        result_domains = []\n        \n        for domain in domains:\n            start = domain.get('start', 0)\n            end = domain.get('end', 0)\n            \n            # Count SSE types in domain\n            h_count = 0\n            e_count = 0\n            l_count = 0\n            \n            # Collect SSE segments\n            current_segment = {'type': None, 'start': 0, 'end': 0}\n            segments = []\n            \n            # Process residues in domain\n            for resnum in range(start, end + 1):\n                if resnum not in ss_data:\n                    continue\n                \n                ss_type = ss_data[resnum]['ss_type']\n                \n                # Count by type\n                if ss_type == 'H':\n                    h_count += 1\n                elif ss_type == 'E':\n                    e_count += 1\n                elif ss_type == 'L':\n                    l_count += 1\n                \n                # Track segments\n                if current_segment['type'] != ss_type:\n                    # End previous segment if it exists\n                    if current_segment['type'] is not None:\n                        current_segment['end'] = resnum - 1\n                        \n                        # Add segment if it meets length requirements\n                        if (current_segment['type'] == 'H' and \n                            current_segment['end'] - current_segment['start'] + 1 >= self.min_helix_length) or \\\n                           (current_segment['type'] == 'E' and \n                            current_segment['end'] - current_segment['start'] + 1 >= self.min_strand_length) or \\\n                           (current_segment['type'] == 'L'):\n                            segments.append(current_segment.copy())\n                    \n                    # Start new segment\n                    current_segment = {'type': ss_type, 'start': resnum, 'end': resnum}\n                else:\n                    # Continue current segment\n                    current_segment['end'] = resnum\n            \n            # Add final segment\n            if current_segment['type'] is not None:\n                segments.append(current_segment)\n            \n            # Calculate domain length with SS assignment\n            domain_len = h_count + e_count + l_count\n            \n            # Skip if no SS data for domain\n            if domain_len == 0:\n                domain_copy = domain.copy()\n                domain_copy['ss_composition'] = None\n                result_domains.append(domain_copy)\n                continue\n            \n            # Calculate SS composition percentages\n            h_percent = h_count / domain_len * 100 if domain_len > 0 else 0\n            e_percent = e_count / domain_len * 100 if domain_len > 0 else 0\n            l_percent = l_count / domain_len * 100 if domain_len > 0 else 0\n            \n            # Determine domain class (alpha, beta, alpha/beta, etc.)\n            domain_class = self._determine_domain_class(h_percent, e_percent)\n            \n            # Update domain with SS information\n            domain_copy = domain.copy()\n            domain_copy.update({\n                'ss_composition': {\n                    'helix_count': h_count,\n                    'strand_count': e_count,\n                    'loop_count': l_count,\n                    'helix_percent': h_percent,\n                    'strand_percent': e_percent,\n                    'loop_percent': l_percent,\n                    'domain_class': domain_class\n                },\n                'ss_segments': segments\n            })\n            \n            result_domains.append(domain_copy)\n        \n        return result_domains\n    \n    def _determine_domain_class(self, h_percent: float, e_percent: float) -> str:\n        \"\"\"Determine domain class based on secondary structure composition\"\"\"\n        if h_percent >= 40 and e_percent < 20:\n            return \"alpha\"\n        elif e_percent >= 40 and h_percent < 20:\n            return \"beta\"\n        elif h_percent >= 20 and e_percent >= 20:\n            return \"alpha/beta\"\n        else:\n            return \"irregular\"\n    \n    def _write_results(self, domains: List[Dict[str, Any]], ss_data: Dict[int, Dict[str, Any]], \n                      results_path: str, summary_path: str) -> None:\n        \"\"\"Write results to output files\"\"\"\n        # Write full JSON results\n        with open(results_path, 'w') as f:\n            json.dump({\n                'domains': domains,\n                'ss_data': ss_data\n            }, f, indent=2)\n        \n        # Write summary TSV\n        with open(summary_path, 'w') as f:\n            f.write(\"domain_id\\tstart\\tend\\tsize\\thelix_percent\\tstrand_percent\\tloop_percent\\tdomain_class\\tsupport_score\\n\")\n            \n            for domain in domains:\n                domain_id = domain.get('domain_id', 'unknown')\n                start = domain.get('start', 0)\n                end = domain.get('end', 0)\n                size = domain.get('size', 0)\n                \n                ss_comp = domain.get('ss_composition', {})\n                if ss_comp:\n                    h_percent = ss_comp.get('helix_percent', 0)\n                    e_percent = ss_comp.get('strand_percent', 0)\n                    l_percent = ss_comp.get('loop_percent', 0)\n                    domain_class = ss_comp.get('domain_class', 'unknown')\n                else:\n                    h_percent = 0\n                    e_percent = 0\n                    l_percent = 0\n                    domain_class = 'unknown'\n                \n                support = domain.get('overall_support', 0)\n                \n                f.write(f\"{domain_id}\\t{start}\\t{end}\\t{size}\\t\"\n                       f\"{h_percent:.1f}\\t{e_percent:.1f}\\t{l_percent:.1f}\\t\"\n                       f\"{domain_class}\\t{support:.3f}\\n\")",
			"file": "steps/secondary_structure_assigner.py",
			"file_size": 14807,
			"file_write_time": 133870632691250037,
			"settings":
			{
				"buffer_size": 14452,
				"line_ending": "Windows"
			},
			"undo_stack":
			[
				[
					10,
					1,
					"paste",
					null,
					"AgAAAAAAAAAAAAAAtgAAAAAAAAAAAAAAtgAAAAAAAAC2AAAAAAAAABQAAAAjIyBkcGFtL3N0ZXBzL3NzZS5weQ",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAFAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				],
				[
					13,
					1,
					"insert",
					{
						"characters": "Runs"
					},
					"BQAAABsAAAAAAAAAHAAAAAAAAAAAAAAAHAAAAAAAAAAcAAAAAAAAACMAAABCYXNlIGNsYXNzIGZvciBEUEFNIHBpcGVsaW5lIHN0ZXBzLhwAAAAAAAAAHQAAAAAAAAAAAAAAHQAAAAAAAAAeAAAAAAAAAAAAAAAeAAAAAAAAAB8AAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAPgAAAAAAAAAbAAAAAAAAAAAAAAAAAPC/"
				],
				[
					14,
					1,
					"insert",
					{
						"characters": " DSSP,"
					},
					"BgAAAB8AAAAAAAAAIAAAAAAAAAAAAAAAIAAAAAAAAAAhAAAAAAAAAAAAAAAhAAAAAAAAACIAAAAAAAAAAAAAACIAAAAAAAAAIwAAAAAAAAAAAAAAIwAAAAAAAAAkAAAAAAAAAAAAAAAkAAAAAAAAACUAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAHwAAAAAAAAAfAAAAAAAAAAAAAAAAAPC/"
				],
				[
					15,
					1,
					"insert",
					{
						"characters": " assigns"
					},
					"CAAAACUAAAAAAAAAJgAAAAAAAAAAAAAAJgAAAAAAAAAnAAAAAAAAAAAAAAAnAAAAAAAAACgAAAAAAAAAAAAAACgAAAAAAAAAKQAAAAAAAAAAAAAAKQAAAAAAAAAqAAAAAAAAAAAAAAAqAAAAAAAAACsAAAAAAAAAAAAAACsAAAAAAAAALAAAAAAAAAAAAAAALAAAAAAAAAAtAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAJQAAAAAAAAAlAAAAAAAAAAAAAAAAAPC/"
				],
				[
					16,
					1,
					"insert",
					{
						"characters": " secondary"
					},
					"CgAAAC0AAAAAAAAALgAAAAAAAAAAAAAALgAAAAAAAAAvAAAAAAAAAAAAAAAvAAAAAAAAADAAAAAAAAAAAAAAADAAAAAAAAAAMQAAAAAAAAAAAAAAMQAAAAAAAAAyAAAAAAAAAAAAAAAyAAAAAAAAADMAAAAAAAAAAAAAADMAAAAAAAAANAAAAAAAAAAAAAAANAAAAAAAAAA1AAAAAAAAAAAAAAA1AAAAAAAAADYAAAAAAAAAAAAAADYAAAAAAAAANwAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAALQAAAAAAAAAtAAAAAAAAAAAAAAAAAPC/"
				],
				[
					17,
					1,
					"insert",
					{
						"characters": " structure"
					},
					"CgAAADcAAAAAAAAAOAAAAAAAAAAAAAAAOAAAAAAAAAA5AAAAAAAAAAAAAAA5AAAAAAAAADoAAAAAAAAAAAAAADoAAAAAAAAAOwAAAAAAAAAAAAAAOwAAAAAAAAA8AAAAAAAAAAAAAAA8AAAAAAAAAD0AAAAAAAAAAAAAAD0AAAAAAAAAPgAAAAAAAAAAAAAAPgAAAAAAAAA/AAAAAAAAAAAAAAA/AAAAAAAAAEAAAAAAAAAAAAAAAEAAAAAAAAAAQQAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAANwAAAAAAAAA3AAAAAAAAAAAAAAAAAPC/"
				],
				[
					20,
					2,
					"left_delete",
					null,
					"AgAAAEMAAAAAAAAAQwAAAAAAAAByAAAAVGhpcyBtb2R1bGUgZGVmaW5lcyB0aGUgYWJzdHJhY3QgYmFzZSBjbGFzcyBmb3IgYWxsIHBpcGVsaW5lIHN0ZXBzLApwcm92aWRpbmcgY29tbW9uIGZ1bmN0aW9uYWxpdHkgYW5kIGludGVyZmFjZXMuQgAAAAAAAABCAAAAAAAAAAEAAAAK",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAtQAAAAAAAABDAAAAAAAAAAAAAAAAAPC/"
				],
				[
					45,
					1,
					"insert",
					{
						"characters": "self.gemmi"
					},
					"CwAAANYRAAAAAAAA1xEAAAAAAAAAAAAA1xEAAAAAAADXEQAAAAAAAAcAAAAiZ2VtbWki1xEAAAAAAADYEQAAAAAAAAAAAADYEQAAAAAAANkRAAAAAAAAAAAAANkRAAAAAAAA2hEAAAAAAAAAAAAA2hEAAAAAAADbEQAAAAAAAAAAAADbEQAAAAAAANwRAAAAAAAAAAAAANwRAAAAAAAA3REAAAAAAAAAAAAA3REAAAAAAADeEQAAAAAAAAAAAADeEQAAAAAAAN8RAAAAAAAAAAAAAN8RAAAAAAAA4BEAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA3REAAAAAAADWEQAAAAAAAAAAAAAAAPC/"
				],
				[
					46,
					1,
					"insert",
					{
						"characters": "_binary"
					},
					"BwAAAOARAAAAAAAA4REAAAAAAAAAAAAA4REAAAAAAADiEQAAAAAAAAAAAADiEQAAAAAAAOMRAAAAAAAAAAAAAOMRAAAAAAAA5BEAAAAAAAAAAAAA5BEAAAAAAADlEQAAAAAAAAAAAADlEQAAAAAAAOYRAAAAAAAAAAAAAOYRAAAAAAAA5xEAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA4BEAAAAAAADgEQAAAAAAAAAAAAAAAPC/"
				],
				[
					1,
					1,
					"insert",
					{
						"characters": "e"
					},
					"AQAAAFUMAAAAAAAAVgwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABVDAAAAAAAAFUMAAAAAAAAAAAAAAAA8L8"
				]
			]
		},
		{
			"file": "__init__.py",
			"settings":
			{
				"buffer_size": 3141,
				"line_ending": "Windows"
			}
		},
		{
			"file": "steps/domain_support_calculator.py",
			"settings":
			{
				"buffer_size": 16969,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			},
			"undo_stack":
			[
				[
					3,
					1,
					"paste",
					null,
					"AgAAAAAAAAAAAAAAtgAAAAAAAAAAAAAAtgAAAAAAAAC2AAAAAAAAABkAAAAjIyBkcGFtL3N0ZXBzL3N1cHBvcnQucHkK",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAGQAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				],
				[
					6,
					1,
					"insert",
					{
						"characters": "Calculates"
					},
					"CwAAABsAAAAAAAAAHAAAAAAAAAAAAAAAHAAAAAAAAAAcAAAAAAAAAJcAAABCYXNlIGNsYXNzIGZvciBEUEFNIHBpcGVsaW5lIHN0ZXBzLgoKVGhpcyBtb2R1bGUgZGVmaW5lcyB0aGUgYWJzdHJhY3QgYmFzZSBjbGFzcyBmb3IgYWxsIHBpcGVsaW5lIHN0ZXBzLApwcm92aWRpbmcgY29tbW9uIGZ1bmN0aW9uYWxpdHkgYW5kIGludGVyZmFjZXMuHAAAAAAAAAAdAAAAAAAAAAAAAAAdAAAAAAAAAB4AAAAAAAAAAAAAAB4AAAAAAAAAHwAAAAAAAAAAAAAAHwAAAAAAAAAgAAAAAAAAAAAAAAAgAAAAAAAAACEAAAAAAAAAAAAAACEAAAAAAAAAIgAAAAAAAAAAAAAAIgAAAAAAAAAjAAAAAAAAAAAAAAAjAAAAAAAAACQAAAAAAAAAAAAAACQAAAAAAAAAJQAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAsgAAAAAAAAAbAAAAAAAAAAAAAAAAAPC/"
				],
				[
					7,
					1,
					"insert",
					{
						"characters": " support"
					},
					"CAAAACUAAAAAAAAAJgAAAAAAAAAAAAAAJgAAAAAAAAAnAAAAAAAAAAAAAAAnAAAAAAAAACgAAAAAAAAAAAAAACgAAAAAAAAAKQAAAAAAAAAAAAAAKQAAAAAAAAAqAAAAAAAAAAAAAAAqAAAAAAAAACsAAAAAAAAAAAAAACsAAAAAAAAALAAAAAAAAAAAAAAALAAAAAAAAAAtAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAJQAAAAAAAAAlAAAAAAAAAAAAAAAAAPC/"
				],
				[
					8,
					1,
					"insert",
					{
						"characters": " for"
					},
					"BAAAAC0AAAAAAAAALgAAAAAAAAAAAAAALgAAAAAAAAAvAAAAAAAAAAAAAAAvAAAAAAAAADAAAAAAAAAAAAAAADAAAAAAAAAAMQAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAALQAAAAAAAAAtAAAAAAAAAAAAAAAAAPC/"
				],
				[
					9,
					1,
					"insert",
					{
						"characters": " domains"
					},
					"CAAAADEAAAAAAAAAMgAAAAAAAAAAAAAAMgAAAAAAAAAzAAAAAAAAAAAAAAAzAAAAAAAAADQAAAAAAAAAAAAAADQAAAAAAAAANQAAAAAAAAAAAAAANQAAAAAAAAA2AAAAAAAAAAAAAAA2AAAAAAAAADcAAAAAAAAAAAAAADcAAAAAAAAAOAAAAAAAAAAAAAAAOAAAAAAAAAA5AAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAMQAAAAAAAAAxAAAAAAAAAAAAAAAAAPC/"
				],
				[
					10,
					1,
					"insert",
					{
						"characters": " using"
					},
					"BgAAADkAAAAAAAAAOgAAAAAAAAAAAAAAOgAAAAAAAAA7AAAAAAAAAAAAAAA7AAAAAAAAADwAAAAAAAAAAAAAADwAAAAAAAAAPQAAAAAAAAAAAAAAPQAAAAAAAAA+AAAAAAAAAAAAAAA+AAAAAAAAAD8AAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAOQAAAAAAAAA5AAAAAAAAAAAAAAAAAPC/"
				],
				[
					11,
					1,
					"insert",
					{
						"characters": " mltiple"
					},
					"CAAAAD8AAAAAAAAAQAAAAAAAAAAAAAAAQAAAAAAAAABBAAAAAAAAAAAAAABBAAAAAAAAAEIAAAAAAAAAAAAAAEIAAAAAAAAAQwAAAAAAAAAAAAAAQwAAAAAAAABEAAAAAAAAAAAAAABEAAAAAAAAAEUAAAAAAAAAAAAAAEUAAAAAAAAARgAAAAAAAAAAAAAARgAAAAAAAABHAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAPwAAAAAAAAA/AAAAAAAAAAAAAAAAAPC/"
				],
				[
					12,
					1,
					"insert",
					{
						"characters": " ev"
					},
					"AwAAAEcAAAAAAAAASAAAAAAAAAAAAAAASAAAAAAAAABJAAAAAAAAAAAAAABJAAAAAAAAAEoAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAARwAAAAAAAABHAAAAAAAAAAAAAAAAAPC/"
				],
				[
					13,
					9,
					"left_delete",
					null,
					"CQAAAEkAAAAAAAAASQAAAAAAAAABAAAAdkgAAAAAAAAASAAAAAAAAAABAAAAZUcAAAAAAAAARwAAAAAAAAABAAAAIEYAAAAAAAAARgAAAAAAAAABAAAAZUUAAAAAAAAARQAAAAAAAAABAAAAbEQAAAAAAAAARAAAAAAAAAABAAAAcEMAAAAAAAAAQwAAAAAAAAABAAAAaUIAAAAAAAAAQgAAAAAAAAABAAAAdEEAAAAAAAAAQQAAAAAAAAABAAAAbA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAASgAAAAAAAABKAAAAAAAAAAAAAAAAAPC/"
				],
				[
					14,
					1,
					"insert",
					{
						"characters": "ultiplde"
					},
					"CAAAAEEAAAAAAAAAQgAAAAAAAAAAAAAAQgAAAAAAAABDAAAAAAAAAAAAAABDAAAAAAAAAEQAAAAAAAAAAAAAAEQAAAAAAAAARQAAAAAAAAAAAAAARQAAAAAAAABGAAAAAAAAAAAAAABGAAAAAAAAAEcAAAAAAAAAAAAAAEcAAAAAAAAASAAAAAAAAAAAAAAASAAAAAAAAABJAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAQQAAAAAAAABBAAAAAAAAAAAAAAAAAPC/"
				],
				[
					15,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAEkAAAAAAAAASgAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAASQAAAAAAAABJAAAAAAAAAAAAAAAAAPC/"
				],
				[
					16,
					4,
					"left_delete",
					null,
					"BAAAAEkAAAAAAAAASQAAAAAAAAABAAAAIEgAAAAAAAAASAAAAAAAAAABAAAAZUcAAAAAAAAARwAAAAAAAAABAAAAZEYAAAAAAAAARgAAAAAAAAABAAAAbA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAASgAAAAAAAABKAAAAAAAAAAAAAAAAAPC/"
				],
				[
					17,
					1,
					"insert",
					{
						"characters": "pe"
					},
					"AgAAAEYAAAAAAAAARwAAAAAAAAAAAAAARwAAAAAAAABIAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAARgAAAAAAAABGAAAAAAAAAAAAAAAAAPC/"
				],
				[
					18,
					2,
					"left_delete",
					null,
					"AgAAAEcAAAAAAAAARwAAAAAAAAABAAAAZUYAAAAAAAAARgAAAAAAAAABAAAAcA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAASAAAAAAAAABIAAAAAAAAAAAAAAAAAPC/"
				],
				[
					19,
					1,
					"insert",
					{
						"characters": "le"
					},
					"AgAAAEYAAAAAAAAARwAAAAAAAAAAAAAARwAAAAAAAABIAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAARgAAAAAAAABGAAAAAAAAAAAAAAAAAPC/"
				],
				[
					20,
					1,
					"insert",
					{
						"characters": " evidence"
					},
					"CQAAAEgAAAAAAAAASQAAAAAAAAAAAAAASQAAAAAAAABKAAAAAAAAAAAAAABKAAAAAAAAAEsAAAAAAAAAAAAAAEsAAAAAAAAATAAAAAAAAAAAAAAATAAAAAAAAABNAAAAAAAAAAAAAABNAAAAAAAAAE4AAAAAAAAAAAAAAE4AAAAAAAAATwAAAAAAAAAAAAAATwAAAAAAAABQAAAAAAAAAAAAAABQAAAAAAAAAFEAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAASAAAAAAAAABIAAAAAAAAAAAAAAAAAPC/"
				],
				[
					21,
					1,
					"insert",
					{
						"characters": " sources"
					},
					"CAAAAFEAAAAAAAAAUgAAAAAAAAAAAAAAUgAAAAAAAABTAAAAAAAAAAAAAABTAAAAAAAAAFQAAAAAAAAAAAAAAFQAAAAAAAAAVQAAAAAAAAAAAAAAVQAAAAAAAABWAAAAAAAAAAAAAABWAAAAAAAAAFcAAAAAAAAAAAAAAFcAAAAAAAAAWAAAAAAAAAAAAAAAWAAAAAAAAABZAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAUQAAAAAAAABRAAAAAAAAAAAAAAAAAPC/"
				],
				[
					22,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAFkAAAAAAAAAWgAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAWQAAAAAAAABZAAAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "steps/disorder_predictor.py",
			"settings":
			{
				"buffer_size": 21942,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			},
			"undo_stack":
			[
				[
					3,
					1,
					"paste",
					null,
					"AgAAAAAAAAAAAAAAtgAAAAAAAAAAAAAAtgAAAAAAAAC2AAAAAAAAABkAAAAjIyBkcGFtL3N0ZXBzL2Rpc29yZGVyLnB5",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAGQAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				],
				[
					6,
					1,
					"insert",
					{
						"characters": "Predicts"
					},
					"CQAAABsAAAAAAAAAHAAAAAAAAAAAAAAAHAAAAAAAAAAcAAAAAAAAAJcAAABCYXNlIGNsYXNzIGZvciBEUEFNIHBpcGVsaW5lIHN0ZXBzLgoKVGhpcyBtb2R1bGUgZGVmaW5lcyB0aGUgYWJzdHJhY3QgYmFzZSBjbGFzcyBmb3IgYWxsIHBpcGVsaW5lIHN0ZXBzLApwcm92aWRpbmcgY29tbW9uIGZ1bmN0aW9uYWxpdHkgYW5kIGludGVyZmFjZXMuHAAAAAAAAAAdAAAAAAAAAAAAAAAdAAAAAAAAAB4AAAAAAAAAAAAAAB4AAAAAAAAAHwAAAAAAAAAAAAAAHwAAAAAAAAAgAAAAAAAAAAAAAAAgAAAAAAAAACEAAAAAAAAAAAAAACEAAAAAAAAAIgAAAAAAAAAAAAAAIgAAAAAAAAAjAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAsgAAAAAAAAAbAAAAAAAAAAAAAAAAAPC/"
				],
				[
					7,
					1,
					"left_delete",
					null,
					"AQAAACIAAAAAAAAAIgAAAAAAAAABAAAAcw",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAIwAAAAAAAAAjAAAAAAAAAAAAAAAAAPC/"
				],
				[
					8,
					1,
					"insert",
					{
						"characters": "s"
					},
					"AQAAACIAAAAAAAAAIwAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAIgAAAAAAAAAiAAAAAAAAAAAAAAAAAPC/"
				],
				[
					9,
					1,
					"insert",
					{
						"characters": " id"
					},
					"AwAAACMAAAAAAAAAJAAAAAAAAAAAAAAAJAAAAAAAAAAlAAAAAAAAAAAAAAAlAAAAAAAAACYAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAIwAAAAAAAAAjAAAAAAAAAAAAAAAAAPC/"
				],
				[
					10,
					2,
					"left_delete",
					null,
					"AgAAACUAAAAAAAAAJQAAAAAAAAABAAAAZCQAAAAAAAAAJAAAAAAAAAABAAAAaQ",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAJgAAAAAAAAAmAAAAAAAAAAAAAAAAAPC/"
				],
				[
					11,
					1,
					"insert",
					{
						"characters": "disordered"
					},
					"CgAAACQAAAAAAAAAJQAAAAAAAAAAAAAAJQAAAAAAAAAmAAAAAAAAAAAAAAAmAAAAAAAAACcAAAAAAAAAAAAAACcAAAAAAAAAKAAAAAAAAAAAAAAAKAAAAAAAAAApAAAAAAAAAAAAAAApAAAAAAAAACoAAAAAAAAAAAAAACoAAAAAAAAAKwAAAAAAAAAAAAAAKwAAAAAAAAAsAAAAAAAAAAAAAAAsAAAAAAAAAC0AAAAAAAAAAAAAAC0AAAAAAAAALgAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAJAAAAAAAAAAkAAAAAAAAAAAAAAAAAPC/"
				],
				[
					12,
					1,
					"insert",
					{
						"characters": " regions"
					},
					"CAAAAC4AAAAAAAAALwAAAAAAAAAAAAAALwAAAAAAAAAwAAAAAAAAAAAAAAAwAAAAAAAAADEAAAAAAAAAAAAAADEAAAAAAAAAMgAAAAAAAAAAAAAAMgAAAAAAAAAzAAAAAAAAAAAAAAAzAAAAAAAAADQAAAAAAAAAAAAAADQAAAAAAAAANQAAAAAAAAAAAAAANQAAAAAAAAA2AAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAALgAAAAAAAAAuAAAAAAAAAAAAAAAAAPC/"
				],
				[
					13,
					1,
					"insert",
					{
						"characters": " using"
					},
					"BgAAADYAAAAAAAAANwAAAAAAAAAAAAAANwAAAAAAAAA4AAAAAAAAAAAAAAA4AAAAAAAAADkAAAAAAAAAAAAAADkAAAAAAAAAOgAAAAAAAAAAAAAAOgAAAAAAAAA7AAAAAAAAAAAAAAA7AAAAAAAAADwAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAANgAAAAAAAAA2AAAAAAAAAAAAAAAAAPC/"
				],
				[
					14,
					1,
					"insert",
					{
						"characters": " pLDDT"
					},
					"BgAAADwAAAAAAAAAPQAAAAAAAAAAAAAAPQAAAAAAAAA+AAAAAAAAAAAAAAA+AAAAAAAAAD8AAAAAAAAAAAAAAD8AAAAAAAAAQAAAAAAAAAAAAAAAQAAAAAAAAABBAAAAAAAAAAAAAABBAAAAAAAAAEIAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAPAAAAAAAAAA8AAAAAAAAAAAAAAAAAPC/"
				],
				[
					15,
					1,
					"insert",
					{
						"characters": " scores"
					},
					"BwAAAEIAAAAAAAAAQwAAAAAAAAAAAAAAQwAAAAAAAABEAAAAAAAAAAAAAABEAAAAAAAAAEUAAAAAAAAAAAAAAEUAAAAAAAAARgAAAAAAAAAAAAAARgAAAAAAAABHAAAAAAAAAAAAAABHAAAAAAAAAEgAAAAAAAAAAAAAAEgAAAAAAAAASQAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAQgAAAAAAAABCAAAAAAAAAAAAAAAAAPC/"
				],
				[
					16,
					1,
					"insert",
					{
						"characters": " from"
					},
					"BQAAAEkAAAAAAAAASgAAAAAAAAAAAAAASgAAAAAAAABLAAAAAAAAAAAAAABLAAAAAAAAAEwAAAAAAAAAAAAAAEwAAAAAAAAATQAAAAAAAAAAAAAATQAAAAAAAABOAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAASQAAAAAAAABJAAAAAAAAAAAAAAAAAPC/"
				],
				[
					17,
					1,
					"insert",
					{
						"characters": " AlphaFold"
					},
					"CgAAAE4AAAAAAAAATwAAAAAAAAAAAAAATwAAAAAAAABQAAAAAAAAAAAAAABQAAAAAAAAAFEAAAAAAAAAAAAAAFEAAAAAAAAAUgAAAAAAAAAAAAAAUgAAAAAAAABTAAAAAAAAAAAAAABTAAAAAAAAAFQAAAAAAAAAAAAAAFQAAAAAAAAAVQAAAAAAAAAAAAAAVQAAAAAAAABWAAAAAAAAAAAAAABWAAAAAAAAAFcAAAAAAAAAAAAAAFcAAAAAAAAAWAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAATgAAAAAAAABOAAAAAAAAAAAAAAAAAPC/"
				],
				[
					18,
					1,
					"insert",
					{
						"characters": " models"
					},
					"BwAAAFgAAAAAAAAAWQAAAAAAAAAAAAAAWQAAAAAAAABaAAAAAAAAAAAAAABaAAAAAAAAAFsAAAAAAAAAAAAAAFsAAAAAAAAAXAAAAAAAAAAAAAAAXAAAAAAAAABdAAAAAAAAAAAAAABdAAAAAAAAAF4AAAAAAAAAAAAAAF4AAAAAAAAAXwAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAWAAAAAAAAABYAAAAAAAAAAAAAAAAAPC/"
				],
				[
					19,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAF8AAAAAAAAAYAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAXwAAAAAAAABfAAAAAAAAAAAAAAAAAPC/"
				],
				[
					21,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAABsAAAAAAAAAHAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAGwAAAAAAAAAbAAAAAAAAAAAAAAAAAAAA"
				],
				[
					24,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAABsAAAAAAAAAHAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAGwAAAAAAAAAbAAAAAAAAAAAAAAAAAPC/"
				],
				[
					26,
					1,
					"insert",
					{
						"characters": "Disod"
					},
					"BQAAABsAAAAAAAAAHAAAAAAAAAAAAAAAHAAAAAAAAAAdAAAAAAAAAAAAAAAdAAAAAAAAAB4AAAAAAAAAAAAAAB4AAAAAAAAAHwAAAAAAAAAAAAAAHwAAAAAAAAAgAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAGwAAAAAAAAAbAAAAAAAAAAAAAAAAAAAA"
				],
				[
					27,
					1,
					"left_delete",
					null,
					"AQAAAB8AAAAAAAAAHwAAAAAAAAABAAAAZA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAIAAAAAAAAAAgAAAAAAAAAAAAAAAAAPC/"
				],
				[
					28,
					1,
					"insert",
					{
						"characters": "rder"
					},
					"BAAAAB8AAAAAAAAAIAAAAAAAAAAAAAAAIAAAAAAAAAAhAAAAAAAAAAAAAAAhAAAAAAAAACIAAAAAAAAAAAAAACIAAAAAAAAAIwAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAHwAAAAAAAAAfAAAAAAAAAAAAAAAAAPC/"
				],
				[
					29,
					1,
					"insert",
					{
						"characters": " predit"
					},
					"BwAAACMAAAAAAAAAJAAAAAAAAAAAAAAAJAAAAAAAAAAlAAAAAAAAAAAAAAAlAAAAAAAAACYAAAAAAAAAAAAAACYAAAAAAAAAJwAAAAAAAAAAAAAAJwAAAAAAAAAoAAAAAAAAAAAAAAAoAAAAAAAAACkAAAAAAAAAAAAAACkAAAAAAAAAKgAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAIwAAAAAAAAAjAAAAAAAAAAAAAAAAAPC/"
				],
				[
					30,
					1,
					"left_delete",
					null,
					"AQAAACkAAAAAAAAAKQAAAAAAAAABAAAAdA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAKgAAAAAAAAAqAAAAAAAAAAAAAAAAAPC/"
				],
				[
					31,
					1,
					"insert",
					{
						"characters": "ctor"
					},
					"BAAAACkAAAAAAAAAKgAAAAAAAAAAAAAAKgAAAAAAAAArAAAAAAAAAAAAAAArAAAAAAAAACwAAAAAAAAAAAAAACwAAAAAAAAALQAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAKQAAAAAAAAApAAAAAAAAAAAAAAAAAPC/"
				],
				[
					53,
					1,
					"left_delete",
					null,
					"",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAtlUAAAAAAAANqwAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"contents": "Searching 39 files for \"ecod_length_path\" (regex)\n\nC:\\Users\\rschae\\OneDrive - University of Texas Southwestern\\Documents\\GitHub\\DPAM\\claude_dpam\\steps\\sequence_to_ecod_mapper.py:\n  208          ecod2len = {}\n  209          \n  210:         ecod_length_path = os.path.join(self.data_dir, 'ECOD_length')\n  211:         with open(ecod_length_path, 'r') as fp:\n  212              for line in fp:\n  213                  words = line.split()\n\n2 matches in 1 file\n",
			"settings":
			{
				"buffer_size": 456,
				"line_ending": "Windows",
				"name": "Find Results",
				"scratch": true
			}
		},
		{
			"file": "steps/dali_candidates_collector.py",
			"settings":
			{
				"buffer_size": 3728,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			},
			"undo_stack":
			[
				[
					3,
					1,
					"paste",
					null,
					"AgAAAAAAAAAAAAAAtgAAAAAAAAAAAAAAtgAAAAAAAAC2AAAAAAAAACAAAAAjIyBkcGFtL3N0ZXBzL2RhbGlfY2FuZGlkYXRlcy5weQ",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				],
				[
					6,
					1,
					"insert",
					{
						"characters": "I"
					},
					"AgAAABsAAAAAAAAAHAAAAAAAAAAAAAAAHAAAAAAAAAAcAAAAAAAAACMAAABCYXNlIGNsYXNzIGZvciBEUEFNIHBpcGVsaW5lIHN0ZXBzLg",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAPgAAAAAAAAAbAAAAAAAAAAAAAAAAAPC/"
				],
				[
					7,
					1,
					"left_delete",
					null,
					"AQAAABsAAAAAAAAAGwAAAAAAAAABAAAASQ",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAHAAAAAAAAAAcAAAAAAAAAAAAAAAAAPC/"
				],
				[
					8,
					1,
					"insert",
					{
						"characters": "Upstea"
					},
					"BgAAABsAAAAAAAAAHAAAAAAAAAAAAAAAHAAAAAAAAAAdAAAAAAAAAAAAAAAdAAAAAAAAAB4AAAAAAAAAAAAAAB4AAAAAAAAAHwAAAAAAAAAAAAAAHwAAAAAAAAAgAAAAAAAAAAAAAAAgAAAAAAAAACEAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAGwAAAAAAAAAbAAAAAAAAAAAAAAAAAPC/"
				],
				[
					9,
					2,
					"left_delete",
					null,
					"AgAAACAAAAAAAAAAIAAAAAAAAAABAAAAYR8AAAAAAAAAHwAAAAAAAAABAAAAZQ",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAIQAAAAAAAAAhAAAAAAAAAAAAAAAAAPC/"
				],
				[
					10,
					1,
					"insert",
					{
						"characters": "ream"
					},
					"BAAAAB8AAAAAAAAAIAAAAAAAAAAAAAAAIAAAAAAAAAAhAAAAAAAAAAAAAAAhAAAAAAAAACIAAAAAAAAAAAAAACIAAAAAAAAAIwAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAHwAAAAAAAAAfAAAAAAAAAAAAAAAAAPC/"
				],
				[
					11,
					1,
					"insert",
					{
						"characters": " module"
					},
					"BwAAACMAAAAAAAAAJAAAAAAAAAAAAAAAJAAAAAAAAAAlAAAAAAAAAAAAAAAlAAAAAAAAACYAAAAAAAAAAAAAACYAAAAAAAAAJwAAAAAAAAAAAAAAJwAAAAAAAAAoAAAAAAAAAAAAAAAoAAAAAAAAACkAAAAAAAAAAAAAACkAAAAAAAAAKgAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAIwAAAAAAAAAjAAAAAAAAAAAAAAAAAPC/"
				],
				[
					12,
					1,
					"insert",
					{
						"characters": " for"
					},
					"BAAAACoAAAAAAAAAKwAAAAAAAAAAAAAAKwAAAAAAAAAsAAAAAAAAAAAAAAAsAAAAAAAAAC0AAAAAAAAAAAAAAC0AAAAAAAAALgAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAKgAAAAAAAAAqAAAAAAAAAAAAAAAAAPC/"
				],
				[
					13,
					1,
					"insert",
					{
						"characters": " defining"
					},
					"CQAAAC4AAAAAAAAALwAAAAAAAAAAAAAALwAAAAAAAAAwAAAAAAAAAAAAAAAwAAAAAAAAADEAAAAAAAAAAAAAADEAAAAAAAAAMgAAAAAAAAAAAAAAMgAAAAAAAAAzAAAAAAAAAAAAAAAzAAAAAAAAADQAAAAAAAAAAAAAADQAAAAAAAAANQAAAAAAAAAAAAAANQAAAAAAAAA2AAAAAAAAAAAAAAA2AAAAAAAAADcAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAALgAAAAAAAAAuAAAAAAAAAAAAAAAAAPC/"
				],
				[
					14,
					1,
					"insert",
					{
						"characters": " DALI"
					},
					"BQAAADcAAAAAAAAAOAAAAAAAAAAAAAAAOAAAAAAAAAA5AAAAAAAAAAAAAAA5AAAAAAAAADoAAAAAAAAAAAAAADoAAAAAAAAAOwAAAAAAAAAAAAAAOwAAAAAAAAA8AAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAANwAAAAAAAAA3AAAAAAAAAAAAAAAAAPC/"
				],
				[
					15,
					1,
					"insert",
					{
						"characters": " search"
					},
					"BwAAADwAAAAAAAAAPQAAAAAAAAAAAAAAPQAAAAAAAAA+AAAAAAAAAAAAAAA+AAAAAAAAAD8AAAAAAAAAAAAAAD8AAAAAAAAAQAAAAAAAAAAAAAAAQAAAAAAAAABBAAAAAAAAAAAAAABBAAAAAAAAAEIAAAAAAAAAAAAAAEIAAAAAAAAAQwAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAPAAAAAAAAAA8AAAAAAAAAAAAAAAAAPC/"
				],
				[
					16,
					1,
					"insert",
					{
						"characters": " candidates"
					},
					"CwAAAEMAAAAAAAAARAAAAAAAAAAAAAAARAAAAAAAAABFAAAAAAAAAAAAAABFAAAAAAAAAEYAAAAAAAAAAAAAAEYAAAAAAAAARwAAAAAAAAAAAAAARwAAAAAAAABIAAAAAAAAAAAAAABIAAAAAAAAAEkAAAAAAAAAAAAAAEkAAAAAAAAASgAAAAAAAAAAAAAASgAAAAAAAABLAAAAAAAAAAAAAABLAAAAAAAAAEwAAAAAAAAAAAAAAEwAAAAAAAAATQAAAAAAAAAAAAAATQAAAAAAAABOAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAQwAAAAAAAABDAAAAAAAAAAAAAAAAAPC/"
				],
				[
					17,
					1,
					"insert",
					{
						"characters": " based"
					},
					"BgAAAE4AAAAAAAAATwAAAAAAAAAAAAAATwAAAAAAAABQAAAAAAAAAAAAAABQAAAAAAAAAFEAAAAAAAAAAAAAAFEAAAAAAAAAUgAAAAAAAAAAAAAAUgAAAAAAAABTAAAAAAAAAAAAAABTAAAAAAAAAFQAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAATgAAAAAAAABOAAAAAAAAAAAAAAAAAPC/"
				],
				[
					18,
					1,
					"insert",
					{
						"characters": " on"
					},
					"AwAAAFQAAAAAAAAAVQAAAAAAAAAAAAAAVQAAAAAAAABWAAAAAAAAAAAAAABWAAAAAAAAAFcAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAVAAAAAAAAABUAAAAAAAAAAAAAAAAAPC/"
				],
				[
					19,
					1,
					"insert",
					{
						"characters": " o"
					},
					"AgAAAFcAAAAAAAAAWAAAAAAAAAAAAAAAWAAAAAAAAABZAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAVwAAAAAAAABXAAAAAAAAAAAAAAAAAPC/"
				],
				[
					20,
					3,
					"left_delete",
					null,
					"AwAAAFgAAAAAAAAAWAAAAAAAAAABAAAAb1cAAAAAAAAAVwAAAAAAAAABAAAAIFYAAAAAAAAAVgAAAAAAAAABAAAAbg",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAWQAAAAAAAABZAAAAAAAAAAAAAAAAAPC/"
				],
				[
					21,
					1,
					"insert",
					{
						"characters": "n"
					},
					"AQAAAFYAAAAAAAAAVwAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAVgAAAAAAAABWAAAAAAAAAAAAAAAAAPC/"
				],
				[
					22,
					1,
					"insert",
					{
						"characters": " fast"
					},
					"BQAAAFcAAAAAAAAAWAAAAAAAAAAAAAAAWAAAAAAAAABZAAAAAAAAAAAAAABZAAAAAAAAAFoAAAAAAAAAAAAAAFoAAAAAAAAAWwAAAAAAAAAAAAAAWwAAAAAAAABcAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAVwAAAAAAAABXAAAAAAAAAAAAAAAAAPC/"
				],
				[
					23,
					1,
					"insert",
					{
						"characters": " search"
					},
					"BwAAAFwAAAAAAAAAXQAAAAAAAAAAAAAAXQAAAAAAAABeAAAAAAAAAAAAAABeAAAAAAAAAF8AAAAAAAAAAAAAAF8AAAAAAAAAYAAAAAAAAAAAAAAAYAAAAAAAAABhAAAAAAAAAAAAAABhAAAAAAAAAGIAAAAAAAAAAAAAAGIAAAAAAAAAYwAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAXAAAAAAAAABcAAAAAAAAAAAAAAAAAPC/"
				],
				[
					28,
					2,
					"left_delete",
					null,
					"AgAAAHoAAAAAAAAAegAAAAAAAABdAAAAaGUgYWJzdHJhY3QgYmFzZSBjbGFzcyBmb3IgYWxsIHBpcGVsaW5lIHN0ZXBzLApwcm92aWRpbmcgY29tbW9uIGZ1bmN0aW9uYWxpdHkgYW5kIGludGVyZmFjZXMueQAAAAAAAAB5AAAAAAAAAAEAAAB0",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA1wAAAAAAAAB6AAAAAAAAAAAAAAAAAPC/"
				],
				[
					29,
					1,
					"insert",
					{
						"characters": "the"
					},
					"AwAAAHkAAAAAAAAAegAAAAAAAAAAAAAAegAAAAAAAAB7AAAAAAAAAAAAAAB7AAAAAAAAAHwAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAeQAAAAAAAAB5AAAAAAAAAAAAAAAAAPC/"
				],
				[
					30,
					1,
					"insert",
					{
						"characters": " a"
					},
					"AgAAAHwAAAAAAAAAfQAAAAAAAAAAAAAAfQAAAAAAAAB+AAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAfAAAAAAAAAB8AAAAAAAAAAAAAAAAAPC/"
				],
				[
					31,
					1,
					"left_delete",
					null,
					"AQAAAH0AAAAAAAAAfQAAAAAAAAABAAAAYQ",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAfgAAAAAAAAB+AAAAAAAAAAAAAAAAAPC/"
				],
				[
					32,
					1,
					"insert",
					{
						"characters": "candidate"
					},
					"CQAAAH0AAAAAAAAAfgAAAAAAAAAAAAAAfgAAAAAAAAB/AAAAAAAAAAAAAAB/AAAAAAAAAIAAAAAAAAAAAAAAAIAAAAAAAAAAgQAAAAAAAAAAAAAAgQAAAAAAAACCAAAAAAAAAAAAAACCAAAAAAAAAIMAAAAAAAAAAAAAAIMAAAAAAAAAhAAAAAAAAAAAAAAAhAAAAAAAAACFAAAAAAAAAAAAAACFAAAAAAAAAIYAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAfQAAAAAAAAB9AAAAAAAAAAAAAAAAAPC/"
				],
				[
					33,
					1,
					"insert",
					{
						"characters": " collector"
					},
					"CgAAAIYAAAAAAAAAhwAAAAAAAAAAAAAAhwAAAAAAAACIAAAAAAAAAAAAAACIAAAAAAAAAIkAAAAAAAAAAAAAAIkAAAAAAAAAigAAAAAAAAAAAAAAigAAAAAAAACLAAAAAAAAAAAAAACLAAAAAAAAAIwAAAAAAAAAAAAAAIwAAAAAAAAAjQAAAAAAAAAAAAAAjQAAAAAAAACOAAAAAAAAAAAAAACOAAAAAAAAAI8AAAAAAAAAAAAAAI8AAAAAAAAAkAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAhgAAAAAAAACGAAAAAAAAAAAAAAAAAPC/"
				],
				[
					34,
					1,
					"insert",
					{
						"characters": " class,"
					},
					"BwAAAJAAAAAAAAAAkQAAAAAAAAAAAAAAkQAAAAAAAACSAAAAAAAAAAAAAACSAAAAAAAAAJMAAAAAAAAAAAAAAJMAAAAAAAAAlAAAAAAAAAAAAAAAlAAAAAAAAACVAAAAAAAAAAAAAACVAAAAAAAAAJYAAAAAAAAAAAAAAJYAAAAAAAAAlwAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAkAAAAAAAAACQAAAAAAAAAAAAAAAAAPC/"
				],
				[
					35,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAJcAAAAAAAAAmAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAlwAAAAAAAACXAAAAAAAAAAAAAAAAAPC/"
				],
				[
					36,
					1,
					"insert",
					{
						"characters": "it"
					},
					"AgAAAJgAAAAAAAAAmQAAAAAAAAAAAAAAmQAAAAAAAACaAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAmAAAAAAAAACYAAAAAAAAAAAAAAAAAPC/"
				],
				[
					37,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAJoAAAAAAAAAmwAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAmgAAAAAAAACaAAAAAAAAAAAAAAAAAPC/"
				],
				[
					38,
					1,
					"insert",
					{
						"characters": "is"
					},
					"AgAAAJsAAAAAAAAAnAAAAAAAAAAAAAAAnAAAAAAAAACdAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAmwAAAAAAAACbAAAAAAAAAAAAAAAAAPC/"
				],
				[
					39,
					1,
					"insert",
					{
						"characters": " upsteram"
					},
					"CQAAAJ0AAAAAAAAAngAAAAAAAAAAAAAAngAAAAAAAACfAAAAAAAAAAAAAACfAAAAAAAAAKAAAAAAAAAAAAAAAKAAAAAAAAAAoQAAAAAAAAAAAAAAoQAAAAAAAACiAAAAAAAAAAAAAACiAAAAAAAAAKMAAAAAAAAAAAAAAKMAAAAAAAAApAAAAAAAAAAAAAAApAAAAAAAAAClAAAAAAAAAAAAAAClAAAAAAAAAKYAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAnQAAAAAAAACdAAAAAAAAAAAAAAAAAPC/"
				],
				[
					40,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAKYAAAAAAAAApwAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAApgAAAAAAAACmAAAAAAAAAAAAAAAAAPC/"
				],
				[
					41,
					5,
					"left_delete",
					null,
					"BQAAAKYAAAAAAAAApgAAAAAAAAABAAAAIKUAAAAAAAAApQAAAAAAAAABAAAAbaQAAAAAAAAApAAAAAAAAAABAAAAYaMAAAAAAAAAowAAAAAAAAABAAAAcqIAAAAAAAAAogAAAAAAAAABAAAAZQ",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAApwAAAAAAAACnAAAAAAAAAAAAAAAAAPC/"
				],
				[
					42,
					1,
					"insert",
					{
						"characters": "ream"
					},
					"BAAAAKIAAAAAAAAAowAAAAAAAAAAAAAAowAAAAAAAACkAAAAAAAAAAAAAACkAAAAAAAAAKUAAAAAAAAAAAAAAKUAAAAAAAAApgAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAogAAAAAAAACiAAAAAAAAAAAAAAAAAPC/"
				],
				[
					43,
					1,
					"insert",
					{
						"characters": " of"
					},
					"AwAAAKYAAAAAAAAApwAAAAAAAAAAAAAApwAAAAAAAACoAAAAAAAAAAAAAACoAAAAAAAAAKkAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAApgAAAAAAAACmAAAAAAAAAAAAAAAAAPC/"
				],
				[
					44,
					1,
					"insert",
					{
						"characters": " dal"
					},
					"BAAAAKkAAAAAAAAAqgAAAAAAAAAAAAAAqgAAAAAAAACrAAAAAAAAAAAAAACrAAAAAAAAAKwAAAAAAAAAAAAAAKwAAAAAAAAArQAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAqQAAAAAAAACpAAAAAAAAAAAAAAAAAPC/"
				],
				[
					45,
					3,
					"left_delete",
					null,
					"AwAAAKwAAAAAAAAArAAAAAAAAAABAAAAbKsAAAAAAAAAqwAAAAAAAAABAAAAYaoAAAAAAAAAqgAAAAAAAAABAAAAZA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAArQAAAAAAAACtAAAAAAAAAAAAAAAAAPC/"
				],
				[
					46,
					1,
					"insert",
					{
						"characters": "iterative_dali"
					},
					"DgAAAKoAAAAAAAAAqwAAAAAAAAAAAAAAqwAAAAAAAACsAAAAAAAAAAAAAACsAAAAAAAAAK0AAAAAAAAAAAAAAK0AAAAAAAAArgAAAAAAAAAAAAAArgAAAAAAAACvAAAAAAAAAAAAAACvAAAAAAAAALAAAAAAAAAAAAAAALAAAAAAAAAAsQAAAAAAAAAAAAAAsQAAAAAAAACyAAAAAAAAAAAAAACyAAAAAAAAALMAAAAAAAAAAAAAALMAAAAAAAAAtAAAAAAAAAAAAAAAtAAAAAAAAAC1AAAAAAAAAAAAAAC1AAAAAAAAALYAAAAAAAAAAAAAALYAAAAAAAAAtwAAAAAAAAAAAAAAtwAAAAAAAAC4AAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAqgAAAAAAAACqAAAAAAAAAAAAAAAAAPC/"
				]
			]
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"babe",
				"Set Syntax: JavaScript (Babel)"
			]
		],
		"width": 0.0
	},
	"console":
	{
		"height": 0.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/C/Users/rschae/OneDrive - University of Texas Southwestern/Documents/GitHub/DPAM/claude_dpam"
	],
	"file_history":
	[
		"/C/Users/rschae/OneDrive - University of Texas Southwestern/Documents/GitHub/DPAM/claude_dpam/steps/hhsearch.py",
		"/C/Users/rschae/OneDrive - University of Texas Southwestern/Documents/GitHub/DPAM/claude_dpam/grid/worker.py",
		"/C/Users/rschae/OneDrive - University of Texas Southwestern/Documents/GitHub/DPAM/claude_dpam/batch/preparation.py",
		"/C/Users/rschae/OneDrive - University of Texas Southwestern/Documents/GitHub/DPAM/claude_dpam/pipeline/errors.py",
		"/C/Users/rschae/OneDrive - University of Texas Southwestern/Documents/GitHub/DPAM/claude_dpam/config.py",
		"/C/Users/rschae/OneDrive - University of Texas Southwestern/Documents/GitHub/DPAM/claude_dpam/__init__.py",
		"/C/Users/rschae/OneDrive - University of Texas Southwestern/Documents/GitHub/DPAM/claude_dpam/database.py",
		"/C/Users/rschae/OneDrive - University of Texas Southwestern/Documents/GitHub/DPAM/claude_dpam/exceptions.py",
		"/C/Users/rschae/OneDrive - University of Texas Southwestern/Documents/GitHub/DPAM/claude_dpam/pipeline/quality.py",
		"/C/Users/rschae/OneDrive - University of Texas Southwestern/Documents/GitHub/DPAM/claude_dpam/api/routes.py",
		"/C/Users/rschae/OneDrive - University of Texas Southwestern/Documents/GitHub/DPAM/claude_dpam/steps/disorder.py",
		"/C/Users/rschae/OneDrive - University of Texas Southwestern/Documents/GitHub/DPAM/claude_dpam/schema/init.sql",
		"/C/Users/rschae/OneDrive - University of Texas Southwestern/Documents/GitHub/DPAM/claude_dpam/schema/upgrade.sql",
		"/C/Users/rschae/OneDrive - University of Texas Southwestern/Documents/GitHub/DPAM/claude_dpam/pipeline/controller.py",
		"/C/Users/rschae/OneDrive - University of Texas Southwestern/Documents/GitHub/DPAM/claude_dpam/steps/sse.py",
		"/C/Users/rschae/OneDrive - University of Texas Southwestern/Documents/GitHub/DPAM/claude_dpam/steps/parse_domains.py",
		"/C/Users/rschae/OneDrive - University of Texas Southwestern/Documents/GitHub/DPAM/claude_dpam/steps/domains.py",
		"/C/Users/rschae/OneDrive - University of Texas Southwestern/Documents/GitHub/DPAM/claude_dpam/steps/mapping.py",
		"/C/Users/rschae/OneDrive - University of Texas Southwestern/Documents/GitHub/DPAM/claude_dpam/steps/support.py",
		"/C/Users/rschae/OneDrive - University of Texas Southwestern/Documents/GitHub/DPAM/claude_dpam/steps/iterative_dali.py",
		"/C/Users/rschae/OneDrive - University of Texas Southwestern/Documents/GitHub/DPAM/claude_dpam/steps/analyze_dali.py",
		"/C/Users/rschae/OneDrive - University of Texas Southwestern/Documents/GitHub/DPAM/claude_dpam/pipeline/checkpoints.py",
		"/C/Users/rschae/OneDrive - University of Texas Southwestern/Documents/GitHub/DPAM/claude_dpam/batch/manager.py",
		"/C/Users/rschae/OneDrive - University of Texas Southwestern/Documents/GitHub/DPAM/claude_dpam/grid/monitor.py",
		"/C/Users/rschae/OneDrive - University of Texas Southwestern/Documents/GitHub/DPAM/claude_dpam/api/server.py",
		"/C/Users/rschae/OneDrive - University of Texas Southwestern/Documents/GitHub/DPAM/claude_dpam/# Suggested Naming Scheme for DPAM Pipeline Code C",
		"/C/Users/rschae/OneDrive - University of Texas Southwestern/Documents/GitHub/DPAM/claude_dpam/cli/worker.py",
		"/C/Users/rschae/OneDrive - University of Texas Southwestern/Documents/GitHub/DPAM/setup.py",
		"/C/Users/rschae/OneDrive - University of Texas Southwestern/Documents/GitHub/DPAM/claude_dpam/batch/supplement.py",
		"/C/Users/rschae/OneDrive - University of Texas Southwestern/Documents/GitHub/DPAM/claude_dpam/gemmi_utils.py",
		"/C/Users/rschae/OneDrive - University of Texas Southwestern/Documents/GitHub/DPAM/claude_dpam/steps/base.py",
		"/C/Users/rschae/OneDrive - University of Texas Southwestern/Documents/GitHub/DPAM/claude_dpam/bin/dpam-manager.py",
		"/C/Users/rschae/OneDrive - University of Texas Southwestern/Documents/GitHub/DPAM/claude_dpam/requirements.txt",
		"/C/Users/rschae/OneDrive - University of Texas Southwestern/Documents/GitHub/DPAM/claude_dpam/config.ts.json",
		"/C/Users/rschae/OneDrive - University of Texas Southwestern/Documents/GitHub/DPAM/claude_dpam/steps/foldseek.py",
		"/C/Users/rschae/OneDrive - University of Texas Southwestern/Documents/GitHub/DPAM/claude_dpam/steps/filter_foldseek.py",
		"/C/Users/rschae/OneDrive - University of Texas Southwestern/Documents/GitHub/DPAM/claude_dpam/steps/ecod.py",
		"/C/Users/rschae/OneDrive - University of Texas Southwestern/Documents/GitHub/DPAM/claude_dpam/steps/dali_candidates.py",
		"/C/Users/rschae/OneDrive - University of Texas Southwestern/Documents/GitHub/DPAM/claude_dpam/grid/manager.py",
		"/C/Users/rschae/OneDrive - University of Texas Southwestern/Documents/swissprot_afdb/uniprot_annot/uniprot_annotation_workflow.py",
		"/C/Users/rschae/OneDrive - University of Texas Southwestern/Documents/swissprot_afdb/generate_protein_plddt_commands.py",
		"/C/Users/rschae/OneDrive - University of Texas Southwestern/Documents/swissprot_afdb/uniprot_annot/prioritize_annotation_targets.py",
		"/C/Users/rschae/OneDrive - University of Texas Southwestern/Documents/swissprot_afdb/uniprot_annot/uniprot_annotation_loader.py",
		"/C/Users/rschae/OneDrive - University of Texas Southwestern/Documents/swissprot_afdb/uniprot_annot/uniprot_file_indexer.py",
		"/C/Users/rschae/OneDrive - University of Texas Southwestern/Documents/swissprot_afdb/delete_proteomes_protein_sequence.sql",
		"/C/Users/rschae/OneDrive - University of Texas Southwestern/Documents/database_support",
		"/C/Users/rschae/OneDrive - University of Texas Southwestern/Documents/swissprot_afdb/uniprot_annot/uniprot_file_manager.py",
		"/C/Users/rschae/OneDrive - University of Texas Southwestern/Documents/swissprot_afdb/uniprot_annot/uniprot_files.schema",
		"/C/Users/rschae/OneDrive - University of Texas Southwestern/Documents/swissprot_afdb/uniprot_annot/uniprot_annot_modifications.sql",
		"/C/Users/rschae/OneDrive - University of Texas Southwestern/Documents/swissprot_afdb/uniprot_annot/comparative_completeness.sql",
		"/C/Users/rschae/OneDrive - University of Texas Southwestern/Documents/swissprot_afdb/uniprot_annot/comparative_analysis.sql",
		"/C/Users/rschae/OneDrive - University of Texas Southwestern/Documents/swissprot_afdb/uniprot_annot/go_data_integrity.sql",
		"/C/Users/rschae/OneDrive - University of Texas Southwestern/Documents/swissprot_afdb/uniprot_annot/ec_data_integrity.sql",
		"/C/Users/rschae/OneDrive - University of Texas Southwestern/Documents/swissprot_afdb/uniprot_annot/uniprot_annot_data_integrity.sql",
		"/C/Users/rschae/OneDrive - University of Texas Southwestern/Documents/swissprot_afdb/proteomes_protein_plddt_integrity.sql",
		"/C/Users/rschae/OneDrive - University of Texas Southwestern/Documents/swissprot_afdb/extract_protein_plddt.py",
		"/C/Users/rschae/OneDrive - University of Texas Southwestern/Documents/swissprot_afdb/generate_plddt_commands.py",
		"/C/Users/rschae/OneDrive - University of Texas Southwestern/Documents/swissprot_afdb/test_cluster_job.sh",
		"/C/Users/rschae/OneDrive - University of Texas Southwestern/Documents/swissprot_afdb/test_process_batch.py",
		"/C/Users/rschae/OneDrive - University of Texas Southwestern/Documents/swissprot_afdb/process_plddt_batch.py",
		"/C/Users/rschae/OneDrive - University of Texas Southwestern/Documents/swissprot_afdb/4way_plddt_histo.sql",
		"/C/Users/rschae/OneDrive - University of Texas Southwestern/Documents/swissprot_afdb/submit_plddt_batch.sh",
		"/C/Users/rschae/OneDrive - University of Texas Southwestern/Documents/swissprot_afdb/distribute_plddt_extraction.py",
		"/C/Users/rschae/OneDrive - University of Texas Southwestern/Documents/swissprot_afdb/extract_plddt_proteomes.py",
		"/C/Users/rschae/OneDrive - University of Texas Southwestern/Documents/swissprot_afdb/plddt_integrity_check.sql",
		"/C/Users/rschae/OneDrive - University of Texas Southwestern/Documents/swissprot_afdb/cluster_analysis_temp.sql",
		"/C/Users/rschae/OneDrive - University of Texas Southwestern/Documents/swissprot_afdb/pdb_analysis_extend_init.sql",
		"/C/Users/rschae/OneDrive - University of Texas Southwestern/Documents/swissprot_afdb/pdb_scanner.py",
		"/C/Users/rschae/OneDrive - University of Texas Southwestern/Documents/swissprot_afdb/protein_sequence_populator.py",
		"/C/Users/rschae/OneDrive - University of Texas Southwestern/Documents/swissprot_afdb/parallel-dssp-population-script.py",
		"/C/Users/rschae/OneDrive - University of Texas Southwestern/Documents/swissprot_afdb/pdb_analysis_data_integrity.sql",
		"/C/Users/rschae/OneDrive - University of Texas Southwestern/Documents/swissprot_afdb/pdb_sequence_extractor.py",
		"/C/Users/rschae/OneDrive - University of Texas Southwestern/Documents/swissprot_afdb/config.json",
		"/C/Users/rschae/OneDrive - University of Texas Southwestern/Documents/swissprot_afdb/pdb_analysis_extend_tables.sql",
		"/C/Users/rschae/OneDrive - University of Texas Southwestern/Documents/swissprot_afdb/pdb_analysis_extend_views.sql",
		"/C/Users/rschae/OneDrive - University of Texas Southwestern/Documents/swissprot_afdb/pdb_analysis_extend_build_index.py",
		"/C/Users/rschae/OneDrive - University of Texas Southwestern/Documents/swissprot_afdb/proteomes_protein_sequence_populator.py",
		"/C/Users/rschae/OneDrive - University of Texas Southwestern/Documents/swissprot_afdb/dedup_protein_sequence.py",
		"/C/Users/rschae/OneDrive - University of Texas Southwestern/Documents/swissprot_afdb/test.sql",
		"/C/Users/rschae/OneDrive - University of Texas Southwestern/Documents/swissprot_afdb/proteome_db_tax_id.py",
		"/C/Users/rschae/OneDrive - University of Texas Southwestern/Documents/swissprot_afdb/pdb_analysis_uniprot_mapper.py",
		"/C/Users/rschae/OneDrive - University of Texas Southwestern/Documents/swissprot_afdb/proteomes_protein_integrity.sql",
		"/C/Users/rschae/OneDrive - University of Texas Southwestern/Documents/swissprot_afdb/structure_file_mapper.py",
		"/C/Users/rschae/OneDrive - University of Texas Southwestern/Documents/swissprot_afdb/swissprot_structure_file_mapping_orphan_eliminator.py",
		"/C/Users/rschae/OneDrive - University of Texas Southwestern/Documents/swissprot_afdb/extract_plddt_public.py",
		"/C/Users/rschae/OneDrive - University of Texas Southwestern/Documents/swissprot_afdb/enhanced_public_plddt_extract.py",
		"/C/Users/rschae/OneDrive - University of Texas Southwestern/Documents/swissprot_afdb/migrate_domain_plddt_detail_to_proteomes.sql",
		"/C/Users/rschae/OneDrive - University of Texas Southwestern/Documents/swissprot_afdb/candidate_domains_to_pfam_materialized_views_save_to_table.sql",
		"/C/Users/rschae/OneDrive - University of Texas Southwestern/Documents/swissprot_afdb/candidate_domains_to_pfam_materialized_views.sql",
		"/C/Users/rschae/OneDrive - University of Texas Southwestern/Documents/swissprot_afdb/candidates.sql",
		"/C/Users/rschae/OneDrive - University of Texas Southwestern/Documents/swissprot_afdb/populate_candidates.sql",
		"/C/Users/rschae/OneDrive - University of Texas Southwestern/Documents/swissprot_afdb/candidate_species_spread.sql",
		"/C/Users/rschae/OneDrive - University of Texas Southwestern/Documents/swissprot_afdb/candidate_domains_to_pfam.sql",
		"/C/Users/rschae/OneDrive - University of Texas Southwestern/Documents/swissprot_afdb/candidate_domains_to_pfam_analyze_explain.sql",
		"/C/Users/rschae/OneDrive - University of Texas Southwestern/Documents/swissprot_afdb/candidate_status.sql",
		"/C/Users/rschae/OneDrive - University of Texas Southwestern/Documents/swissprot_afdb/debug_joins.py",
		"/C/Users/rschae/OneDrive - University of Texas Southwestern/Documents/swissprot_afdb/claudes_last_dance.py",
		"/C/Users/rschae/OneDrive - University of Texas Southwestern/Documents/swissprot_afdb/extract_plddt_swiss.py",
		"/C/Users/rschae/OneDrive - University of Texas Southwestern/Documents/swissprot_afdb/uniprot_api/uniprot_update_service.py",
		"/C/Users/rschae/OneDrive - University of Texas Southwestern/Documents/swissprot_afdb/uniprot_api/uniprot_integration.py",
		"/C/Users/rschae/OneDrive - University of Texas Southwestern/Documents/swissprot_afdb/tmalign/tm_align_job_generator.py",
		"/C/Users/rschae/OneDrive - University of Texas Southwestern/Documents/swissprot_afdb/dssp_length.bash",
		"/C/Users/rschae/OneDrive - University of Texas Southwestern/Documents/swissprot_afdb/process_structures_dssp.py",
		"/C/Users/rschae/OneDrive - University of Texas Southwestern/Documents/swissprot_afdb/analyze_sge_results.py",
		"/C/Users/rschae/OneDrive - University of Texas Southwestern/Documents/GitHub/ECOD_JS/pages/testing/index.tsx",
		"/C/Users/rschae/OneDrive - University of Texas Southwestern/Documents/GitHub/ECOD_JS/components/testing/MolStarTestingEnvironment.tsx",
		"/C/Users/rschae/OneDrive - University of Texas Southwestern/Documents/GitHub/ECOD_JS/src/MolStarViewer.js",
		"/C/Users/rschae/OneDrive - University of Texas Southwestern/Documents/GitHub/ECOD_JS/src/hooks/useMolStar.js",
		"/C/Users/rschae/OneDrive - University of Texas Southwestern/Documents/GitHub/ECOD_JS/pages/api/statistics/domain-quality.ts",
		"/C/Users/rschae/OneDrive - University of Texas Southwestern/Documents/GitHub/ECOD_JS/services/api.ts",
		"/C/Users/rschae/OneDrive - University of Texas Southwestern/Documents/GitHub/ECOD_JS/components/visualizations/DomainQualityVisualization.tsx",
		"/C/Users/rschae/OneDrive - University of Texas Southwestern/Documents/GitHub/ECOD_JS/components/ui/switch.tsx",
		"/C/Users/rschae/OneDrive - University of Texas Southwestern/Documents/swissprot_afdb/map_dssp_v2.py",
		"/C/Users/rschae/OneDrive - University of Texas Southwestern/Documents/swissprot_afdb/create_missing_dssp_metadata.py",
		"/C/Users/rschae/OneDrive - University of Texas Southwestern/Documents/GitHub/ECOD_JS/components/testing/MolStarStructureViewer.tsx",
		"/C/Users/rschae/OneDrive - University of Texas Southwestern/Documents/swissprot_afdb/af2_pdb_sws_ecod.length.tsv",
		"/C/Users/rschae/OneDrive - University of Texas Southwestern/Documents/swissprot_afdb/public_dssp_filler.py",
		"/C/Users/rschae/OneDrive - University of Texas Southwestern/Documents/GitHub/ECOD_JS/components/ui/textarea.tsx",
		"/C/Users/rschae/OneDrive - University of Texas Southwestern/Documents/GitHub/ECOD_JS/pages/cluster_sets/index.tsx",
		"/C/Users/rschae/OneDrive - University of Texas Southwestern/Documents/GitHub/ECOD_JS/hooks/useStructureQuality.tsx",
		"/C/Users/rschae/OneDrive - University of Texas Southwestern/Documents/GitHub/ECOD_JS/hooks/useActivityFeed.tsx",
		"/C/Users/rschae/OneDrive - University of Texas Southwestern/Documents/GitHub/ECOD_JS/hooks/useReclassificationStats.tsx",
		"/C/Users/rschae/OneDrive - University of Texas Southwestern/Documents/GitHub/ECOD_JS/hooks/useRecentClusters.tsx",
		"/C/Users/rschae/OneDrive - University of Texas Southwestern/Documents/GitHub/ECOD_JS/pages/api/clusters/[id].ts",
		"/C/Users/rschae/OneDrive - University of Texas Southwestern/Documents/GitHub/ECOD_JS/pages/clusters/[id].tsx",
		"/C/Users/rschae/OneDrive - University of Texas Southwestern/Documents/GitHub/ECOD_JS/hooks/cluster/useClusterData.ts",
		"/C/Users/rschae/OneDrive - University of Texas Southwestern/Documents/GitHub/ECOD_JS/hooks/cluster/useClusterMembers.ts",
		"/C/Users/rschae/OneDrive - University of Texas Southwestern/Documents/GitHub/ECOD_JS/hooks/cluster/useStructureData.ts"
	],
	"find":
	{
		"height": 28.0
	},
	"find_in_files":
	{
		"height": 104.0,
		"where_history":
		[
			""
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"status",
			"class",
			"ecod_length_path",
			"ecod_length",
			"_run_dssp"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": true,
		"replace_history":
		[
		],
		"reverse": false,
		"scrollbar_highlights": true,
		"show_context": true,
		"use_buffer2": true,
		"use_gitignore": true,
		"whole_word": false,
		"wrap": true
	},
	"folders":
	[
		{
			"path": "C:\\Users\\rschae\\OneDrive - University of Texas Southwestern\\Documents\\GitHub\\DPAM\\claude_dpam"
		}
	],
	"groups":
	[
		{
			"sheets":
			[
				{
					"buffer": 0,
					"file": "grid/manager.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 17532,
						"regions":
						{
						},
						"selection":
						[
							[
								27,
								27
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 20,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "batch/supplement.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7464,
						"regions":
						{
						},
						"selection":
						[
							[
								553,
								553
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "api/routes.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 26914,
						"regions":
						{
						},
						"selection":
						[
							[
								1055,
								1055
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 108.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "steps/domain_quality_filter.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 16052,
						"regions":
						{
						},
						"selection":
						[
							[
								16052,
								16052
							]
						],
						"settings":
						{
							"auto_name": "",
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 13,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "steps/foldseek_search_runner.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4789,
						"regions":
						{
						},
						"selection":
						[
							[
								2182,
								2185
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 887.0,
						"zoom_level": 1.0
					},
					"stack_index": 10,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "steps/hhsearch_runner.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5663,
						"regions":
						{
						},
						"selection":
						[
							[
								2014,
								2014
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 711.0,
						"zoom_level": 1.0
					},
					"stack_index": 9,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "steps/iterative_dali_runner.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 12581,
						"regions":
						{
						},
						"selection":
						[
							[
								8156,
								8156
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2858.0,
						"zoom_level": 1.0
					},
					"stack_index": 8,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "steps/parse_domains.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 15417,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "steps/sequence_to_ecod_mapper.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 13288,
						"regions":
						{
						},
						"selection":
						[
							[
								8049,
								8060
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 3623.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 9,
					"file": "steps/domain_to_ecod_classifier.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 17430,
						"regions":
						{
						},
						"selection":
						[
							[
								26,
								26
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 114.0,
						"zoom_level": 1.0
					},
					"stack_index": 12,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 10,
					"file": "steps/pipeline_step_base.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6800,
						"regions":
						{
						},
						"selection":
						[
							[
								446,
								446
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 11,
					"file": "pipeline/controller.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 38968,
						"regions":
						{
						},
						"selection":
						[
							[
								4074,
								4074
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1391.0,
						"zoom_level": 1.0
					},
					"stack_index": 19,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 12,
					"file": "steps/dali_results_analyzer.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 16272,
						"regions":
						{
						},
						"selection":
						[
							[
								339,
								339
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 16,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 13,
					"file": "steps/domain_detector.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 23664,
						"regions":
						{
						},
						"selection":
						[
							[
								118,
								118
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 15,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 14,
					"file": "steps/foldseek_results_filter.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5062,
						"regions":
						{
						},
						"selection":
						[
							[
								161,
								161
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 11,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 15,
					"file": "steps/secondary_structure_assigner.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 14452,
						"regions":
						{
						},
						"selection":
						[
							[
								3158,
								3158
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 838.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 16,
					"file": "__init__.py",
					"selected": true,
					"semi_transient": true,
					"settings":
					{
						"buffer_size": 3141,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1140.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 17,
					"file": "steps/domain_support_calculator.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 16969,
						"regions":
						{
						},
						"selection":
						[
							[
								90,
								90
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 14,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 18,
					"file": "steps/disorder_predictor.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 21942,
						"regions":
						{
						},
						"selection":
						[
							[
								21795,
								21795
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 9690.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 19,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 456,
						"regions":
						{
							"match":
							{
								"flags": 112,
								"regions":
								[
									[
										239,
										255
									],
									[
										326,
										342
									]
								],
								"scope": ""
							}
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"detect_indentation": false,
							"line_numbers": false,
							"output_tag": 1,
							"result_base_dir": "",
							"result_file_regex": "^([^ \t].*):$",
							"result_line_regex": "^ +([0-9]+):",
							"scroll_past_end": true,
							"syntax": "Packages/Default/Find Results.hidden-tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 18,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 20,
					"file": "steps/dali_candidates_collector.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3728,
						"regions":
						{
						},
						"selection":
						[
							[
								184,
								184
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 17,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 28.0
	},
	"input":
	{
		"height": 40.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "",
	"replace":
	{
		"height": 52.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 186.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
